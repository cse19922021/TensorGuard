{
    "Patch": "#ifdef DEBUG\n    OP_REQUIRES(context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,\n                errors::Unimplemented(\"Fractional average pooling is not yet \"\n                                    \"supported on the batch nor channel dimension.\"));\n#else\n    OP_REQUIRES(context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,\n                errors::InvalidArgument(\"Fractional average pooling is not yet \"\n                                    \"supported on the batch nor channel dimension.\"));\n#endif\n    OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"seed\", &seed_));",
    "Patch Formated": [
        "#ifdef DEBUG",
        "    OP_REQUIRES(context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
        "                errors::Unimplemented(\"Fractional average pooling is not yet \"",
        "                                    \"supported on the batch nor channel dimension.\"));",
        "#else",
        "    OP_REQUIRES(context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
        "                errors::InvalidArgument(\"Fractional average pooling is not yet \"",
        "                                    \"supported on the batch nor channel dimension.\"));",
        "#endif",
        "    OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));",
        "    OP_REQUIRES_OK(context, context->GetAttr(\"seed\", &seed_));"
    ],
    "Actual Clean Code": [
        "    }",
        "    OP_REQUIRES(",
        "        context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,",
        "        errors::Unimplemented(\"Fractional average pooling is not yet \"",
        "                              \"supported on the batch nor channel dimension.\"));",
        "    OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));",
        "    OP_REQUIRES_OK(context, context->GetAttr(\"seed\", &seed_));"
    ],
    "Link": "https://github.com/tensorflow/tensorflow/commit/ee50d1e00f81f62a4517453f721c634bbb478307",
    "API name": "tensorflow.python.ops.nn_ops.fractional_avg_pool_v2"
},
{
    "Patch": "DimensionHandle unused;\nif (c->Dim(c->input(i), 0) != 1) {\n    return errors::InvalidArgument(\"Size of first dimension must be 1.\");\n}\nTF_RETURN_WITH_CONTEXT_IF_ERROR(c->Merge(c->input(i), cur, &cur),\n                                \"From merging shape \", i,\n                                \" with other shapes.\");\n}",
    "Patch Formated": [
        "DimensionHandle unused;",
        "if (c->Dim(c->input(i), 0) != 1) {",
        "    return errors::InvalidArgument(\"Size of first dimension must be 1.\");",
        "}",
        "TF_RETURN_WITH_CONTEXT_IF_ERROR(c->Merge(c->input(i), cur, &cur),",
        "                                \"From merging shape \", i,",
        "                                \" with other shapes.\");",
        "}"
    ],
    "Actual Clean Code": [
        "              \"All input shapes must be fully defined.\");",
        "        }",
        "        if (c->Rank(c->input(i)) < 1) {",
        "          return errors::InvalidArgument(",
        "              \"The rank of all input shapes must be greater than 0, \"",
        "              \"but input \",",
        "              i, \" had rank \", c->Rank(c->input(i)), \".\");",
        "        }",
        "        DimensionHandle unused;",
        "        if (!c->WithValue(c->Dim(c->input(i), 0), 1, &unused).ok()) {",
        "          return errors::InvalidArgument(\"Size of first dimension must be 1.\");",
        "        }"
    ],
    "Link": "https://github.com/tensorflow/tensorflow/commit/da66bc6d5ff466aee084f9e7397980a24890cd15",
    "API name": "tf.raw_ops.ParallelConcat"
},
