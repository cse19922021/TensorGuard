Library,Commit,Parent Module,API,Advisory Link,Anomaly,Anomaly description,Category,Reproducing Example,Vulnerable Parameter,Root cause 1,Root cause 2
Pytorch,https://github.com/pytorch/pytorch/commit/b6b1c01adfdadf93a4a1d30c3661ff177412a876,torch,torch.view_as_complex,https://github.com/pytorch/pytorch/commit/b6b1c01adfdadf93a4a1d30c3661ff177412a876,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,z = torch.tensor(2.0),z,N.A,segfault
Pytorch,https://github.com/pytorch/pytorch/issues/43476,torch.nn,torch.nn.Conv3d,https://github.com/pytorch/pytorch/commit/c010ef7f0c6d837809a7e973048afac76373e3de,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"torch.backends.cudnn.enabled=False
x = torch.rand(1, 32, 512, 512, 256).to('cuda:0')
m = torch.nn.Conv3d(32, 1, kernel_size=1, padding=0,stride=1,bias=False).to('cuda:0')
x = m(x)",x,N.A,N.A
Pytorch,https://github.com/pytorch/pytorch/issues/41780,torch,torch.nn.functional.embedding,https://github.com/pytorch/pytorch/commit/42b4a7132e7c6f1df963b473d1583e4791fb1808,Scalar input tensor,"A scalar input tensor refers to a tensor with a rank of 0, meaning it has zero dimensions. In other words, a scalar input tensor represents a single value without any additional structure or dimensions.",Tensor,"input = torch.tensor((np.random.rand(2,2)*100).astype('int64')) 
weight = torch.tensor(1) 
torch.nn.functional.embedding(input, weight)",weight,N.A,segfault
Pytorch,https://github.com/PyTorch/PyTorch/commit/7773a45c0d2cba1cd53d7f50b00baa7ae95ec6e4,torch,torch.addcdiv,https://github.com/pytorch/pytorch/issues/327,Tensor with zero element,"In the context of deep learning, a ""tensor with zero element"" refers to a tensor where all elements are zero. A tensor is a multi-dimensional array used as a fundamental data structure in deep learning frameworks like TensorFlow and PyTorch.",Tensor,"import torch
a = torch.IntTensor([1, 0])
a.fmod(a)",,,
Pytorch,https://github.com/PyTorch/PyTorch/commit/7773a45c0d2cba1cd53d7f50b00baa7ae95ec6e4,torch,torch.reminder,https://github.com/pytorch/pytorch/issues/327,Tensor with zero element,"In the context of deep learning, a ""tensor with zero element"" refers to a tensor where all elements are zero. A tensor is a multi-dimensional array used as a fundamental data structure in deep learning frameworks like TensorFlow and PyTorch.",Tensor,"import torch
a = torch.IntTensor([1, 0])
a.fmod(a)",,,
Pytorch,https://github.com/PyTorch/PyTorch/commit/7773a45c0d2cba1cd53d7f50b00baa7ae95ec6e4,torch,torch.fmod,https://github.com/pytorch/pytorch/issues/327,Tensor with zero element,"In the context of deep learning, a ""tensor with zero element"" refers to a tensor where all elements are zero. A tensor is a multi-dimensional array used as a fundamental data structure in deep learning frameworks like TensorFlow and PyTorch.",Tensor,"a = torch.IntTensor([0,1])
b = torch.IntTensor([0,1])
print(a.div(b))",N.A,N.A,segfault
Pytorch,https://github.com/pytorch/pytorch/commit/5702a28b2612a104204dd31e800faaaa09bdd458,torch.nn,torch.nn.ConvTranspose3d,https://github.com/pytorch/pytorch/pull/38970,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"in_channels = 64
out_channels = 128
kernel_size = 5

conv = torch.nn.ConvTranspose3d(
in_channels, out_channels, kernel_size=kernel_size,
stride=2, padding=2, output_padding=1).to(device)

x = torch.rand([1, 64, 8, 128, 172]).to(device)
y = conv(x)",N.A,N.A,N.A
Pytorch,https://github.com/PyTorch/PyTorch/commit/e4a3c584d51662d4c14060fc8517464fe3c12142,torch,torch.nn.functional.max_pool1d,https://github.com/pytorch/pytorch/issues/38764,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"x = 6.
size = 10. ** 6
print(f""Size of second dimension: {int(size)}"")
poolsize = 4
x = torch.rand((1,int(size),poolsize), requires_grad=True).to('cuda:0')
y = F.max_pool1d(x.contiguous(), kernel_size=poolsize, stride=None, padding=0)

loss = torch.sum(y)
loss.backward()",N.A,N.A,N.A
Pytorch,https://github.com/pytorch/pytorch/commit/63b1ae69831cd21bc4d6059a5854bc1155a152c9,torch,torch.remainder,https://github.com/pytorch/pytorch/commit/63b1ae69831cd21bc4d6059a5854bc1155a152c9,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"n = 1e9
torch.remainder(torch.tensor([n], device=""cpu"", dtype=torch.float32), math.pi) 
torch.remainder(torch.tensor([n], device=""cuda"", dtype=torch.float32), math.pi) ",N.A,N.A,N.A
Pytorch,https://github.com/pytorch/pytorch/commit/7aec364bdf9ed7297b77e8445a6a6d4116265dde,torch,torch.gather,https://github.com/pytorch/pytorch/commit/7aec364bdf9ed7297b77e8445a6a6d4116265dde,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"""k0 = 8
k1 = 8
m = 100

x = torch.rand((k0, k1))
ind = torch.randint(0, k0, (m, k1))
output = torch.empty((m, k1))""
print(torch.gather(x, 0, ind, out=output))
print(torch.gather(x, 1, ind, out=output))""",N.A,N.A,segfault
Pytorch,https://github.com/pytorch/pytorch/commit/74828be4a7d0d2dba3f0ec3f6e79265cdfae5329,torch,torch.cat,https://github.com/pytorch/pytorch/commit/74828be4a7d0d2dba3f0ec3f6e79265cdfae5329,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"SIZE1 = 6500
SIZE2 = 4500
concat_list = []
concat_list.append(torch.ones((SIZE1, 1024 * 512), dtype=torch.uint8))
concat_list.append(torch.ones((SIZE2, 1024 * 512), dtype=torch.uint8))
result = torch.cat(concat_list)",N.A,N.A,segfault
Pytorch,https://github.com/pytorch/pytorch/commit/071971476d7431a24e527bdc181981678055a95d,torch.distributions.binomial,torch.distributions.binomial.Binomial,https://github.com/pytorch/pytorch/commit/071971476d7431a24e527bdc181981678055a95d,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"logits = torch.tensor([-100., 100.], dtype=torch.float)
total_count = 1.
x = torch.tensor([0., 0.], dtype=torch.float)
log_prob = Binomial(total_count, logits=logits).log_prob(x)",N.A,N.A,overflow
Pytorch,https://github.com/pytorch/pytorch/commit/6fde0cb507d59d2a9168f3051feba6865e9d1048,torch,N.A,https://github.com/pytorch/pytorch/issues/3498,None input argument,"In Python, None is a special object that represents the absence of a value or the lack of any specific data. It is often used to indicate that a variable or an input argument does not have a valid or meaningful value.",Numpy array,"np_arr = np.ones(100).astype(np.float32)
tensor = torch.from_numpy(np_arr[None]) # Issue seems to be use of [None] or [np.newaxis]
variable = Variable(tensor)
output = model(variable)",N.A,N.A,memory leak
Pytorch,N.A,torch,torch.multinomial,https://github.com/pytorch/pytorch/issues/86279,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"torch.multinomial(torch.ones(1, 32768, device='mps'), 2, replacement=True)",input,N.A,N.A
Pytorch,N.A,torch,torch.remainder,https://github.com/pytorch/pytorch/issues/86074,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"input = torch.tensor(1693446850, dtype=torch.int32)
other = torch.tensor([7285], dtype=torch.int16)

# test the apis with int input (wrong results)
r = torch.remainder(input, other)","input
other",N.A,N.A
Pytorch,N.A,torch,torch.fmod,https://github.com/pytorch/pytorch/pull/86064,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"input = torch.tensor(1693446850, dtype=torch.int32)
other = torch.tensor([7285], dtype=torch.int16)

# test the apis with int input (wrong results)
r = torch.fmod(input, other)","input
other",N.A,N.A
Pytorch,N.A,torch,torch.native_batch_norm,https://github.com/pytorch/pytorch/issues/85217,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"input = torch.full((5, 5,), 1, dtype=torch.float64, requires_grad=False)
weight = torch.full((14, 9, 12, 0, 6, 0, 15, 0, 0, 0,), -1.5e+300, dtype=torch.float64, requires_grad=False)
bias = torch.full((5,), 1, dtype=torch.float64, requires_grad=False)
running_mean = torch.full((0,), 1, dtype=torch.float64, requires_grad=False)
running_var = torch.full((0,), 1, dtype=torch.float64, requires_grad=False)
training = True
momentum = 0
eps = 0
torch.native_batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps)","nput, weight, bias, running_mean, running_var, training, momentum, eps",N.A,segfault
Pytorch,N.A,torch,torch._mkldnn_transpose,https://github.com/pytorch/pytorch/issues/85216,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"self = torch.full((3, 4, 5,), 1, dtype=torch.float32, requires_grad=False).to_mkldnn()
dim0 = 1250999896764
dim1 = 0
torch._mkldnn_transpose(self, dim0, dim1)","self, dim0, dim1",N.A,segfault
Pytorch,N.A,torch._C._nn,torch._C._nn.mkldnn_reorder_conv2d_weight,https://github.com/pytorch/pytorch/issues/85214,Large integer list element,A large integer list element in Python refers to an element within a list that has a large integer value. It means that the element is an integer with a value that exceeds the typical range of integer values.,List,"self = torch.full((3, 3, 1, 1,), 1, dtype=torch.float32, requires_grad=False).to_mkldnn()
padding = []
stride = [65534, 65534]
dilation = [65534, 65534]
groups = 0
torch._C._nn.mkldnn_reorder_conv2d_weight(self, padding, stride, dilation, groups)","self, padding, stride, dilation, groups",N.A,segfault
Pytorch,N.A,torch._C._nn,torch._C._nn.mkldnn_reorder_conv3d_weight,https://github.com/pytorch/pytorch/issues/85213,Large integer list element,A large integer list element in Python refers to an element within a list that has a large integer value. It means that the element is an integer with a value that exceeds the typical range of integer values.,List,"self = torch.full((32, 3, 3, 3, 3,), 1, dtype=torch.float32, requires_grad=False).to_mkldnn()
padding = []
stride = [1250999896764, 1250999896764, 1250999896764]
dilation = [1250999896764, 1250999896764, 1250999896764]
groups = 0
torch._C._nn.mkldnn_reorder_conv3d_weight(self, padding, stride, dilation, groups)","self, padding, stride, dilation, groups",N.A,segfault
Pytorch,N.A,torch.jit,torch.jit.wait,https://github.com/pytorch/pytorch/issues/85072,None input argument,"In Python, None is a special object that represents the absence of a value or the lack of any specific data. It is often used to indicate that a variable or an input argument does not have a valid or meaningful value.",None,"import torch

torch.jit.wait(None)",N.A,N.A,segfault
Pytorch,N.A,torch.futures,torch.futures.collect_all,https://github.com/pytorch/pytorch/issues/84990,None input argument,"In Python, None is a special object that represents the absence of a value or the lack of any specific data. It is often used to indicate that a variable or an input argument does not have a valid or meaningful value.",Tuple,"import torch

input = (None,)

torch.futures.collect_all(futures=input)",futures,N.A,segfault
Pytorch,N.A,torch.nn,torch.nn.Conv2d,https://github.com/pytorch/pytorch/issues/83328,Float input tensor,"A float input tensor refers to a tensor in a deep learning framework (such as TensorFlow or PyTorch) that contains elements of the floating-point data type. In deep learning, floating-point numbers are commonly used to represent and perform computations on real-valued data.",Tensor,"results = dict()
import torch
arg_class = torch.nn.Conv2d(512,2048,1)
arg_1 = torch.rand([128, 512, 16, 16], dtype=torch.float16)
results[""time_low""] = arg_class(arg_1)","in_channels, out_channels, kernel_size",N.A,check failure
Pytorch,N.A,torch.nn,torch.nn.MaxUnpool2d,https://github.com/pytorch/pytorch/issues/83229,Negative integer argument,"A negative integer argument in Python refers to an integer value that is less than zero. It is a numeric value that represents a negative quantity or position in a numerical sequence. In Python, negative integers are denoted by placing a minus sign (-) before the numerical value. For example, -1, -2, -3, and so on.",Integer,"arg_1 = -100
arg_2 = False
arg_class = torch.nn.MaxUnpool2d(arg_1,stride=arg_2,)",kernel_size,N.A,N.A
Pytorch,N.A,torch.nn,torch.nn.MaxUnpool3d,https://github.com/pytorch/pytorch/issues/83221,Negative integer argument,"A negative integer argument in Python refers to an integer value that is less than zero. It is a numeric value that represents a negative quantity or position in a numerical sequence. In Python, negative integers are denoted by placing a minus sign (-) before the numerical value. For example, -1, -2, -3, and so on.",Integer,"unpool = torch.nn.MaxUnpool3d(-3, stride=2)",kernel_size,N.A,N.A
Pytorch,N.A,torch.nn,torch.nn.GRU,https://github.com/pytorch/pytorch/issues/83175,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch
results={}
arg_1 = 10
arg_2 = 20
arg_3 = 100000
arg_class = torch.nn.GRU(arg_1,arg_2,arg_3,)",num_layers,N.A,N.A
Pytorch,N.A,torch.nn,torch.nn.functional.fold,https://github.com/pytorch/pytorch/issues/83152,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch
results={}
arg_1_tensor = torch.rand([1, 12, 12], dtype=torch.float32)
arg_1 = arg_1_tensor.clone()
arg_2 = [4,5,]
arg_3 = [2,2,]
arg_4 = 1
arg_5 = 36028797018963968
arg_6 = 1
results['res'] = torch.nn.functional.fold(arg_1,arg_2,arg_3,arg_4,arg_5,arg_6,)",padding,N.A,N.A
Pytorch,N.A,torch._C._nn,torch._C._nn.adaptive_avg_pool2d,https://github.com/pytorch/pytorch/issues/81409,Dimension mismatch,"""Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.""",Tensor,"from __future__ import annotations
import sys
import torch

if __name__ == '__main__':
assert len(sys.argv) == 5
Ih, Iw, Oh, Ow = map(int, sys.argv[1:])
_input_size = (Ih, Iw)
_output_size = (Oh, Ow)

torch.manual_seed(0) # it seems seed value is irrelevant as far as I checked
imgs = torch.randint(low=0, high=256, size=(1,)+_input_size).type(torch.float32)
imgs_ = torch._C._nn.adaptive_avg_pool2d(imgs, _output_size)",N.A,N.A,segfault
Pytorch,N.A,torch,torch._weight_norm,https://github.com/pytorch/pytorch/issues/81195,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"a = torch.Tensor([[1,2],[3,4]])
b = torch.Tensor([[5],[6]])
torch._weight_norm(a,b,dim=1)","a
b
dim",N.A,N.A
Pytorch,N.A,torch,torch.renorm,https://github.com/pytorch/pytorch/issues/80804,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"def fn(input):
p = 2
dim = -1
maxnorm = 0
fn_res = torch.renorm(input, p, dim, maxnorm, )
return fn_res
input = torch.tensor([[0.1, 0.], [0., 0.]], dtype=torch.float64, requires_grad=True)

torch.autograd.gradcheck(fn, (input))","p = 2
maxnorm = 0",N.A,N.A
Pytorch,N.A,torch.nn.utils.rnn,torch.nn.utils.rnn.pack_sequence,https://github.com/pytorch/pytorch/issues/78153,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"sequences_3 = torch.randint(-8, 2, [0, 4, 85], dtype=torch.int8)","sequences, enforce_sorted=enforce_sorted",N.A,segfault
Pytorch,N.A,torch,torch._pad_packed_sequence,https://github.com/pytorch/pytorch/issues/78131,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"total_length = torch.full([], -9937, dtype=torch.int64, requires_grad=False)",batch_sizes,N.A,segfault
Pytorch,N.A,torch,torch._grid_sampler_2d_cpu_fallback,https://github.com/pytorch/pytorch/issues/78130,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"grid = torch.full([0, 3, 8, 2, 4, 1], -9545, dtype=torch.float32, requires_grad=False)",N.A,N.A,segfault
Pytorch,N.A,torch,torch._embedding_bag_forward_only,https://github.com/pytorch/pytorch/issues/78129,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"mode = torch.full([], 6318, dtype=torch.int64, requires_grad=False)",N.A,N.A,segfault
Pytorch,N.A,torch,torch._C._nn.thnn_conv2d,https://github.com/pytorch/pytorch/issues/78128,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"import torch

tensor_0 = torch.full([3, 3, 3], -4398, dtype=torch.float64, requires_grad=False)
tensor_1 = torch.full([6, 7], -4532, dtype=torch.int32, requires_grad=False)
intarrayref_2 = -10000
tensor_3 = torch.full([3, 3, 3, 6, 7], -2321, dtype=torch.float16, requires_grad=False)
intarrayref_4 = -2807
intarrayref_5 = []
torch._C._nn.thnn_conv2d(tensor_0, tensor_1, intarrayref_2, tensor_3, intarrayref_4, intarrayref_5)",intarrayref_5,N.A,segfault
Pytorch,N.A,torch,torch._C._nn.reflection_pad2d,https://github.com/pytorch/pytorch/issues/78127,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"import torch

tensor_0 = torch.full([6, 5, 7], -8754, dtype=torch.int32, requires_grad=False)
intarrayref_1 = []
torch._C._nn.reflection_pad2d(tensor_0, intarrayref_1)",intarrayref_1,N.A,segfault
Pytorch,N.A,torch,torch._C._nn.max_unpool3d,https://github.com/pytorch/pytorch/issues/78126,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"import torch

tensor_0 = torch.full([], -10000, dtype=torch.int64, requires_grad=False)
tensor_1 = torch.full([7, 7, 7, 4, 4, 4, 7, 7], -8695, dtype=torch.float16, requires_grad=False)
intarrayref_2 = []
intarrayref_3 = 7052
intarrayref_4 = -9995
torch._C._nn.max_unpool3d(tensor_0, tensor_1, intarrayref_2, intarrayref_3, intarrayref_4)",intarrayref_2,N.A,segfault
Pytorch,N.A,torch,torch.grid_sampler_3d,https://github.com/pytorch/pytorch/issues/78125,Negative integer argument,"A negative integer argument in Python refers to an integer value that is less than zero. It is a numeric value that represents a negative quantity or position in a numerical sequence. In Python, negative integers are denoted by placing a minus sign (-) before the numerical value. For example, -1, -2, -3, and so on.",Integer,"import torch

input = torch.full([4, 2, 0, 0, 4, 0, 0, 3], -1480, dtype=torch.float64, requires_grad=False)
grid = torch.full([1, 6, 3, 5, 3, 4, 0, 6], -2024, dtype=torch.float64, requires_grad=False)
interpolation_mode = -3278
padding_mode = -1469
align_corners = True
torch.grid_sampler_3d(input, grid, interpolation_mode, padding_mode, align_corners)",N.A,N.A,segfault
Pytorch,N.A,torch,torch.choose_qparams_optimized,https://github.com/pytorch/pytorch/issues/78123,Negative integer argument,"A negative integer argument in Python refers to an integer value that is less than zero. It is a numeric value that represents a negative quantity or position in a numerical sequence. In Python, negative integers are denoted by placing a minus sign (-) before the numerical value. For example, -1, -2, -3, and so on.",Integer,"import torch

input = torch.full([7, 7, 4, 6, 3, 1, 2], -7124, dtype=torch.float32, requires_grad=False)
numel = -8192
n_bins = 1255
ratio = -9185
bit_width = -4519
torch.choose_qparams_optimized(input, numel, n_bins, ratio, bit_width)",N.A,N.A,segfault
Pytorch,N.A,torch,torch.bincount,https://github.com/pytorch/pytorch/issues/78122,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"import torch

self = torch.full([3], 2550, dtype=torch.int64, requires_grad=False)
weights = torch.full([3, 1, 3, 0, 0, 0, 1, 1], -4620, dtype=torch.int64, requires_grad=False)
minlength = 9711
torch.bincount(self, weights, minlength)",N.A,N.A,segfault
Pytorch,N.A,torch,torch._remove_batch_dim,https://github.com/pytorch/pytorch/issues/77893,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch

self = torch.full((5, 5, 5, 5, 5,), 1, dtype=torch.float64, requires_grad=False)
level = 0
batch_size = 0
out_dim = 1250999896764
torch._remove_batch_dim(self, level, batch_size, out_dim)",N.A,N.A,segfault
Pytorch,N.A,torch,torch.scatter_add,https://github.com/pytorch/pytorch/issues/77231,Input argument with complex data type,"An input argument with a complex data type refers to a tensor that represents complex numbers. Complex numbers consist of a real part and an imaginary part, and they can be represented using the complex64 or complex128 data types.",Tensor,"import torch
from torch.autograd import gradcheck

input_tensor = torch.rand([10, 5], dtype=torch.float64, requires_grad=True)
index_tensor = torch.rand([13, 0], dtype=torch.complex128, requires_grad=True)
src_tensor = torch.rand([10, 2], dtype=torch.float64, requires_grad=True)

def fn(input, index, src):
dim = -1
fn_res = torch.scatter_add(input, dim, index, src, )
return fn_res

print(gradcheck(fn, (input_tensor, index_tensor, src_tensor)))",index_tensor,N.A,N.A
Pytorch,N.A,torch,torch.addmv,https://github.com/pytorch/pytorch/issues/76778,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"import torch
input = torch.rand([2], dtype=torch.float64, requires_grad=True)
mat = torch.rand([2, 3], dtype=torch.complex128, requires_grad=True)
vec = torch.rand([3], dtype=torch.complex128, requires_grad=True)

res = torch.addmv(input, mat, vec)
print(""addmv SUCCEED!"")

res_2 = res.sum()
print(""sum SUCCEED!"")

res_2.backward()","input
mat
vec",N.A,N.A
Pytorch,N.A,torch,torch.unique,https://github.com/pytorch/pytorch/issues/76571,NaN input tensor,"NaN stands for ""Not a Number"" and is a special value used to represent undefined or unrepresentable results in numerical computations. In the context of an input tensor, a NaN input tensor refers to a tensor that contains one or more NaN values. Also, when arguments of type tensor are assign with NaN values.",Tensor,"import torch

def unique(x):
return torch.unique(x, sorted=False, return_inverse=False, return_counts=True)

s = torch.tensor(0.).cuda()
x = torch.tensor(float('nan')).cuda()

print(unique(s))
print(unique(x)) # <- these two calls have different outputs
print(unique(x)) # <-",x,N.A,N.A
Pytorch,N.A,torch,torch.jit.load,https://github.com/pytorch/pytorch/issues/75171,Invalid input string,"An invalid string argument refers to a string value that does not meet the expected format or criteria for a particular function, method, or operation. It indicates that the provided string does not adhere to the required specifications, constraints, or conventions defined by the program or API. The definition of an invalid string argument can vary depending on the specific context or requirements of the function being used. It may include strings that are empty, contain forbidden characters, exceed length limits, or fail to meet certain formatting or validation rules.",String,"import torch

torch.jit.load('C:\\Users\\流星暴雨/.cache/clip\\ViT-B-16.pt', ""cpu"")",N.A,N.A,N.A
Pytorch,N.A,torch,torch.pow,https://github.com/pytorch/pytorch/issues/73196,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"import torch

x = torch.tensor(0, device=""cuda"", dtype=torch.int32)
y = torch.tensor(-1)
o = torch.pow(x, y)",y,N.A,N.A
Pytorch,N.A,torch,torch.max_pool3d,https://github.com/pytorch/pytorch/issues/73191,Large integer list element,A large integer list element in Python refers to an element within a list that has a large integer value. It means that the element is an integer with a value that exceeds the typical range of integer values.,List,"import torch

self = torch.full((1, 1, 1, 1, 1,), 1.5e+300, dtype=torch.float64, requires_grad=False)
kernel_size = [536870912, 536870912, 536870912]
stride = [1, 1, 1]
padding = [0, 0, 0]
dilation = [1879048192, 1879048192, 1879048192]
ceil_mode = True
torch.max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode)","kernel_size, dilation",N.A,segfault
Pytorch,N.A,torch,torch.max_pool1d,https://github.com/pytorch/pytorch/issues/73190,Large integer list element,A large integer list element in Python refers to an element within a list that has a large integer value. It means that the element is an integer with a value that exceeds the typical range of integer values.,List,"import torch

self = torch.full((2, 10, 4,), 0.5, dtype=torch.float64, requires_grad=False)
kernel_size = [1250999896764]
stride = [1250999896764]
padding = [0]
dilation = [1250999896764]
ceil_mode = True
torch.max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode)","kernel_size, stride, dilation",N.A,segfault
Pytorch,N.A,torch,torch._C._nn.fractional_max_pool3d,https://github.com/pytorch/pytorch/issues/73186,Zero integer list element,A zero integer list element in Python refers to an element within a list that has a value of zero. It is an integer value of zero (0) that is present as an item in a list.,List,"import torch

self = torch.full((2, 4, 5, 5, 5,), 1, dtype=torch.float64, requires_grad=False)
kernel_size = [0, 0, 0]
output_size = [0, 0, 0]
random_samples = torch.full((2, 4, 5, 5, 5,), 1, dtype=torch.float64, requires_grad=False)
torch._C._nn.fractional_max_pool3d(self, kernel_size, output_size, random_samples)",output_size,N.A,segfault
Pytorch,N.A,torch,torch._C._nn.fractional_max_pool2d,https://github.com/pytorch/pytorch/issues/73185,Zero integer list element,A zero integer list element in Python refers to an element within a list that has a value of zero. It is an integer value of zero (0) that is present as an item in a list.,List,"import torch

self = torch.full((1, 3, 7, 6,), 1, dtype=torch.float64, requires_grad=False)
kernel_size = [0, 0]
output_size = [0, 0]
random_samples = torch.full((1, 3, 7, 6,), 1, dtype=torch.float64, requires_grad=False)
torch._C._nn.fractional_max_pool2d(self, kernel_size, output_size, random_samples)",output_size,N.A,segfault
Pytorch,N.A,torch,torch._sobol_engine_scramble_,https://github.com/pytorch/pytorch/issues/73182,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch

self = torch.full((100, 30,), 1, dtype=torch.int64, requires_grad=False)
ltm = torch.full((100, 30, 30,), 1, dtype=torch.int64, requires_grad=False)
dimension = 1250999896764
torch._sobol_engine_scramble_(self, ltm, dimension)",dimension,N.A,segfault
Pytorch,N.A,torch,torch._sobol_engine_initialize_state_,https://github.com/pytorch/pytorch/issues/73181,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch

self = torch.full((2, 30,), 1, dtype=torch.int64, requires_grad=False)
dimension = 1250999896764
torch._sobol_engine_initialize_state_(self, dimension)",dimension,N.A,segfault
Pytorch,N.A,torch,torch._sobol_engine_ff_,https://github.com/pytorch/pytorch/issues/73180,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch

self = torch.full((2,), 1, dtype=torch.int64, requires_grad=False)
n = 1250999896764
sobolstate = torch.full((2, 30,), 1, dtype=torch.int64, requires_grad=False)
dimension = 1250999896764
num_generated = 0
torch._sobol_engine_ff_(self, n, sobolstate, dimension, num_generated)","dimension, n",N.A,segfault
Pytorch,N.A,torch.distributions.categorical,torch.distributions.categorical.Categorical,https://github.com/pytorch/pytorch/issues/71689,Zero integer argument,"A zero integer argument in Python refers to an integer value of zero (0) that is passed as an argument to a function, method, or operation. It represents a numerical value of zero that is used as input for a specific computation or functionality.",Integer,batch_sizes = 0,batch_sizes,N.A,N.A
Pytorch,N.A,torch,torch.bmm,https://github.com/pytorch/pytorch/issues/71678,Sparse input tensor,"A sparse tensor is a tensor in which the majority of the elements are zero or have negligible values. Sparse tensors are used to efficiently represent and manipulate data with a large number of zeros, saving memory and computational resources.",Tensor,"import torch
a = torch.rand(2, 3, 3).to_sparse().requires_grad_(True)
b = torch.rand(2, 3, 3)
c = torch.bmm(a, b)",a ,N.A,N.A
Pytorch,N.A,torch,torch.median,https://github.com/pytorch/pytorch/issues/71636,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
input = torch.randint(-2,2,[0], dtype=torch.int32)
print(torch.median(input))",input,N.A,N.A
Pytorch,N.A,torch,torch.cummin,https://github.com/pytorch/pytorch/issues/71477,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"input = torch.rand([], dtype=torch.float64)
dim = 100
torch.cummin(input, dim)",input,N.A,N.A
Pytorch,N.A,torch,torch.cummax,https://github.com/pytorch/pytorch/issues/71477,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
input = torch.rand([], dtype=torch.float64)
dim = 100
torch.cummax(input, dim)",input,N.A,N.A
Pytorch,N.A,torch,torch.sort,https://github.com/pytorch/pytorch/issues/71477,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
input = torch.rand([], dtype=torch.float64)
dim = 100
torch.sort(input, dim)",input,N.A,N.A
Pytorch,N.A,torch,torch.argsort,https://github.com/pytorch/pytorch/issues/71477,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
input = torch.rand([], dtype=torch.float64)
dim = 100
torch.argsort(input, dim)",input,N.A,N.A
Pytorch,N.A,torch,torch.diag,https://github.com/pytorch/pytorch/issues/71204,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"import torch
a = torch.tensor([[0, 1], [2, 3]])
for i in [0, 1, 2]:
assert(torch.equal(torch.diag(a, i), torch.diagonal(a, i)))
torch.diagonal(a, 3)
torch.diag(a, 3)",N.A,N.A,N.A
Pytorch,N.A,torch,torch.diagonal,https://github.com/pytorch/pytorch/issues/71204,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"import torch
a = torch.tensor([[0, 1], [2, 3]])
for i in [0, 1, 2]:
assert(torch.equal(torch.diag(a, i), torch.diagonal(a, i)))
torch.diagonal(a, 3)
torch.diag(a, 3)",N.A,N.A,N.A
Pytorch,N.A,torch,torch.combinations,https://github.com/pytorch/pytorch/issues/71082,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"import torch
input_tensor = torch.randint(-1,1,[3], dtype=torch.int64)
input = input_tensor.clone()
r = 100
print(torch.combinations(input, r=r))",r,N.A,N.A
Pytorch,N.A,torch,torch.nn.ConstantPad2d,https://github.com/pytorch/pytorch/issues/71078,Tensor Rank Confusion,Tensor Rank Confusion,Tensor,"import torch
padding = [-1, -2, 1, 1]
c1 = torch.nn.ReflectionPad2d(padding)
c2 = torch.nn.ReplicationPad2d(padding)
c3 = torch.nn.ConstantPad2d(padding, 0)
c4 = torch.nn.ZeroPad2d(padding)
input = torch.rand([1, 1, 3, 3], dtype=torch.float32)

print(c1(input))
print(c2(input))
c3(input)
# RuntimeError: The input size 3, plus negative padding -1 and -2 resulted in a negative output size, which is invalid. Check dimension 3 of your input.
c4(input)
# RuntimeError: The input size 3, plus negative padding -1 and -2 resulted in a negative output size, which is invalid. Check dimension 3 of your input.",input,N.A,N.A
Pytorch,N.A,torch,torch.nn.ZeroPad2d,https://github.com/pytorch/pytorch/issues/71078,Tensor Rank Confusion,Tensor Rank Confusion,Tensor,"import torch
padding = [-1, -2, 1, 1]
c1 = torch.nn.ReflectionPad2d(padding)
c2 = torch.nn.ReplicationPad2d(padding)
c3 = torch.nn.ConstantPad2d(padding, 0)
c4 = torch.nn.ZeroPad2d(padding)
input = torch.rand([1, 1, 3, 3], dtype=torch.float32)

print(c1(input))
print(c2(input))
c3(input)
# RuntimeError: The input size 3, plus negative padding -1 and -2 resulted in a negative output size, which is invalid. Check dimension 3 of your input.
c4(input)
# RuntimeError: The input size 3, plus negative padding -1 and -2 resulted in a negative output size, which is invalid. Check dimension 3 of your input.",input,N.A,N.A
Pytorch,N.A,torch,torch.scatter,https://github.com/pytorch/pytorch/issues/71059,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
input = torch.rand([])
dim = 0
index = torch.tensor([]) # or torch.tensor([0])
src = torch.rand([])
torch.scatter(input, dim, index, src)
# random value like tensor(6.7333e+22)",input,N.A,N.A
Pytorch,N.A,torch,torch.where,https://github.com/pytorch/pytorch/issues/71058,Float input tensor,"A float input tensor refers to a tensor in a deep learning framework (such as TensorFlow or PyTorch) that contains elements of the floating-point data type. In deep learning, floating-point numbers are commonly used to represent and perform computations on real-valued data.",Tensor,"import torch
condition= torch.randint(0,2,[2, 2], dtype=torch.bool)
x= torch.rand([2, 2], dtype=torch.float64)
y = 0.0
print( torch.where(condition, x, y) )
# tensor([[0.0000, 0.6290],
# [0.0000, 0.0000]], dtype=torch.float64)
print( x.where(condition, y) )
# TypeError: where(): argument 'other' (position 2) must be Tensor, not float",y,N.A,N.A
Pytorch,N.A,torch,torch.batch_norm_gather_stats_with_counts,https://github.com/pytorch/pytorch/issues/70901,Input tensor with half data type,"An input tensor with a half data type refers to a tensor that uses the float16 data type. The float16 data type, also known as half-precision floating-point format, represents a floating-point number with reduced precision compared to the standard float32 data type.",torch.half,"import torch
i = torch.rand([5,4,10,10], dtype=torch.float).cuda()
c = torch.rand((150,), dtype=torch.half).fill_(500).cuda()
m = torch.rand([150, 4], dtype=torch.float).cuda()
rm = torch.rand([4], dtype=torch.half).cuda()
v = torch.rand([150, 4], dtype=torch.float).cuda()
v += 0.0001
rv = torch.rand([4], dtype=torch.half).cuda()
rv += 0.0001
mea, inv = torch.batch_norm_gather_stats_with_counts(i, m, v, rm, rv, 1.2, 0.001, c)
print(mea)",count,N.A,overflow
Pytorch,N.A,torch,torch.as_strided,https://github.com/pytorch/pytorch/issues/70672,Negative input tensor,"A negative input tensor refers to a tensor that contains negative values. In other words, the elements of the tensor have a value less than zero.",Tensor,"import torch
a = torch.rand([3, 3])
b = torch.as_strided(a, [1, -1], [1, 1])
print(b.shape)
# torch.Size([1, -1])",N.A,N.A,N.A
,N.A,torch,tensor.expand,https://github.com/pytorch/pytorch/issues/70398,Negative integer list element,A negative integer list element in Python refers to an element within a list that has a negative integer value. It means that the element is a negative number represented by an integer data type.,List,"import torch
input = torch.rand([3])
shape = [-2, 3]
res = torch.broadcast_to(input,shape,)
print(res.shape)
# torch.Size([-2, 3])
print(torch.sum(res))
# tensor(0.)
torch.all(res)
# RuntimeError: Trying to create tensor with negative dimension -2: [-2, 3]",shape,N.A,N.A
Pytorch,N.A,torch,torch.broadcast_to,https://github.com/pytorch/pytorch/issues/70398,Negative integer list element,A negative integer list element in Python refers to an element within a list that has a negative integer value. It means that the element is a negative number represented by an integer data type.,List,"import torch
input = torch.rand([3])
shape = [-2, 3]
res = input.expand(shape)
print(res.shape)
print(torch.sum(res))
torch.all(res)",shape,N.A,N.A
Pytorch,N.A,torch,torch.empty_strided,https://github.com/pytorch/pytorch/issues/70397,Negative integer list element,A negative integer list element in Python refers to an element within a list that has a negative integer value. It means that the element is a negative number represented by an integer data type.,List,"import torch
size = [2, 3]
stride = [-1, 2]
res = torch.empty_strided(size,stride,)
print(torch.sum(res))
# tensor(nan)
print(res.shape)
# torch.Size([2, 3])
print(res)",stride,N.A,N.A
Pytorch,N.A,torch,torch.transpose,https://github.com/pytorch/pytorch/issues/69433,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
tensor = torch.rand(torch.Size([]))
res1 = torch.transpose(tensor, 0, 0)","dim0, dim1",N.A,N.A
Pytorch,N.A,torch,torch.hstack,https://github.com/pytorch/pytorch/issues/69408,Tensor Rank Confusion,Tensor Rank Confusion,Tensor,"import torch
tensor_0 = torch.rand(torch.Size([]))
tensor_1 = torch.rand(torch.Size([3]))
tensors = [tensor_0, tensor_1]
res1 = torch.hstack(tensors)
# succeed
res2 = torch.cat(tensors, dim=0)",dim=0,N.A,N.A
Pytorch,N.A,torch,torch.nn.functional.linear,https://github.com/pytorch/pytorch/issues/64978,Tensor Rank Confusion,Tensor Rank Confusion,Tensor,"import torch
a = torch.ones([1,1,10])
b = torch.ones([10]) # weight is 1-d
c = torch.nn.functional.linear(a, b)",b,N.A,N.A
Pytorch,N.A,torch,torch.equal,https://github.com/pytorch/pytorch/issues/64079,Sparse input tensor,"A sparse tensor is a tensor in which the majority of the elements are zero or have negligible values. Sparse tensors are used to efficiently represent and manipulate data with a large number of zeros, saving memory and computational resources.",Tensor,"if __name__ == ""__main__"":
x = torch.rand(4, 4).to_sparse()
assert torch.equal(x, x)",x,N.A,N.A
Pytorch,N.A,torch.jit,torch.jit.trace,https://github.com/pytorch/pytorch/issues/54638,Sparse input tensor,"A sparse tensor is a tensor in which the majority of the elements are zero or have negligible values. Sparse tensors are used to efficiently represent and manipulate data with a large number of zeros, saving memory and computational resources.",Tensor,,input,N.A,N.A
Pytorch,N.A,torch.nn,torch.nn.MaxPool1d,https://github.com/pytorch/pytorch/issues/54499,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch

m=torch.nn.MaxPool1d(545646544,stride=2)
input=input=torch.randn(20,16,50)
m(input)",kernel_size,N.A,integer overflow
Pytorch,N.A,torch,torch.matmul,https://github.com/pytorch/pytorch/issues/53407,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,torch.matmul(input),input,N.A,N.A
Pytorch,N.A,torch,torch.empty_strided,https://github.com/pytorch/pytorch/issues/53391,Negative input tensor,"A negative integer tuple element refers to an element within a tuple that holds a negative integer value. In Python, a tuple is an ordered collection of elements, enclosed in parentheses ( ), and separated by commas. Each element within the tuple can have any valid data type, including integers.",Tensor,torch.empty_strided(),stride,N.A,N.A
Pytorch,N.A,torch.nn.functional,torch.nn.functional.grid_sample,https://github.com/pytorch/pytorch/issues/51911,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"import torch
torch.nn.functional.grid_sample(input=torch.ones([1,1,1,5]), grid=torch.tensor([[[[ 2.9839e+38, -3.2406e+38]]]]))",grid,N.A,N.A
Pytorch,N.A,torch.nn.functional,torch.nn.functional.binary_cross_entropy_with_logits,https://github.com/pytorch/pytorch/issues/51906,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
torch.nn.functional.binary_cross_entropy_with_logits(input=torch.tensor([-2.3135e+307, 6.6756e+307]), target=torch.ones((2)))",input,N.A,N.A
Pytorch,N.A,torch.nn.functional,torch.nn.functional.binary_cross_entropy_with_logits,https://github.com/pytorch/pytorch/issues/51906,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
torch.nn.functional.binary_cross_entropy_with_logits(input=torch.tensor([]), target=torch.tensor([]))",input,N.A,N.A
Pytorch,N.A,torch.nn.functional,torch.nn.functional.binary_cross_entropy,https://github.com/pytorch/pytorch/issues/51803,Empty input tensor,An empty input tensor refers to a tensor that has no elements or has a size of zero along one or more dimensions. It represents a tensor with no data or empty content.,Tensor,"import torch
torch.nn.functional.binary_cross_entropy(input=torch.tensor([]), target=torch.tensor([]))",input,N.A,N.A
Pytorch,N.A,torch.nn.functional,torch.nn.functional.ctc_loss,https://github.com/pytorch/pytorch/issues/51732,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"import torch 
torch.nn.functional.ctc_loss(log_probs=torch.ones((1,2,1)), targets=torch.ones((2,1)), input_lengths=torch.tensor([-5570080269274466818, -1]), target_lengths=torch.tensor((1,1)))",input_lengths,N.A,segfault
Pytorch,N.A,torch.nn,torch.nn.ReplicationPad3d,https://github.com/pytorch/pytorch/issues/51134,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch
layer = torch.nn.ReplicationPad3d(padding=498444555)
model_input = torch.ones([1, 1, 1, 1, 1])
layer(model_input)",padding,N.A,segfault
Pytorch,N.A,torch.nn,torch.nn.ReplicationPad2d,https://github.com/pytorch/pytorch/issues/49520,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch
layer = torch.nn.ReplicationPad2d(padding=1012756988)
model_input = torch.ones([2,2,2,2])
layer(model_input)",padding,N.A,segfault
Pytorch,N.A,torch,torch.gather,https://github.com/pytorch/pytorch/issues/47610,Dimension mismatch,"Tensor shape mismatch: If the shapes of the input tensors are not compatible for a given operation, such as matrix multiplication, concatenation, or element-wise operations. For example, attempting to multiply two tensors with incompatible shapes like (3, 4) and (5, 6) will result in a dimension mismatch error.

Inconsistent dimensions in additional arguments: Some APIs require additional arguments like dimensions or indices to specify the dimensions or specific elements of the tensors to operate on. If these dimensions or indices are not valid or do not align with the input tensors' shapes, a dimension mismatch can occur.",Tensor,"import torch
torch.manual_seed(0)
input = torch.rand(4, 2)
index = torch.randint(2, size=(4,)).unsqueeze(0) # intended to be unsqueeze(1)
dim = 1
output = torch.gather(input, dim, index)
print(""input = "", input)
print(""index = "", index)
print(""output = "", output)","index
input",N.A,N.A
Pytorch,N.A,torch,torch.mode,https://github.com/pytorch/pytorch/issues/46225,NaN input tensor,"NaN stands for ""Not a Number"" and is a special value used to represent undefined or unrepresentable results in numerical computations. In the context of an input tensor, a NaN input tensor refers to a tensor that contains one or more NaN values. Also, when arguments of type tensor are assign with NaN values.",Tensor,"def test(device):
x = torch.rand(1000).mul(5).long().to(device)
s = torch.bincount(x, minlength=5).argsort(descending=True)

mode = x.mode().values
print(f'w/o nans, got {mode}, expected {s[0]}')

y = x.clone().float()
y[y == mode] = np.nan
mode = y.mode().values.long()
print(f'w nans, got {mode}, expected {s[1]}')",input,N.A,N.A
Pytorch,N.A,torch,torch.svd,https://github.com/pytorch/pytorch/issues/43567,NaN input tensor,"NaN stands for ""Not a Number"" and is a special value used to represent undefined or unrepresentable results in numerical computations. In the context of an input tensor, a NaN input tensor refers to a tensor that contains one or more NaN values. Also, when arguments of type tensor are assign with NaN values.",Tensor,"torch.svd(torch.tensor([[float('nan'), 1.0]]).cuda())",input,N.A,N.A
Pytorch,N.A,torch,torch.multinomial,https://github.com/pytorch/pytorch/issues/43115,Large integer argument,"A large integer argument refers to an argument passed to a function or operation that represents a large integer value. It means that the argument is an integer value that exceeds the typical range of integer values supported by the underlying programming language or system.

The specific definition of a ""large"" integer may vary depending on the context and the limitations of the programming language or system being used. For example, in Python, integers have arbitrary precision, allowing you to work with integers of any size. However, other programming languages may have predefined limits on the range of integer values they can handle.

In the context of function arguments, a large integer argument can be used to represent various concepts or quantities. It may be used to specify an index, a count, a value, or any other numerical parameter required by the function or operation.",Integer,"import torch
for ncat in (2**8, 2**22, 2**24):
probs=torch.empty(ncat) 
half = ncat//2 
probs[half:]=1
probs[:half-1]=2
out=torch.multinomial(probs, num_samples=10**5, replacement=True) 
print(""number of categories {:10}, number of samples in upper half {:8} "".format(ncat, (out>=half).sum().item())) #would expect 1/3 (~33333) of generated values to be >=half, true for ncat 2**8, 2**22, 0 for ncat 2**24",num_samples,N.A,N.A
Pytorch,N.A,torch,torch.cartesian_prod,https://github.com/pytorch/pytorch/issues/37556,Tensor Rank Confusion,Tensor Rank Confusion,Tensor,"a = [[1,1], [2,3], [3,5]]
b = [[4, 5], [3,6]]
print(list(itertools.product(a, b)))
tensor_a = torch.tensor(a)
tensor_b = torch.tensor(b)
#torch.cartesian_prod(tensor_a, tensor_b)
torch.cartesian_prod(tensor_a, tensor_b)",tensors,N.A,N.A
Pytorch,N.A,torch,torch.std,https://github.com/pytorch/pytorch/issues/29372,Scalar input tensor,"A scalar input tensor refers to a tensor with a rank of 0, meaning it has zero dimensions. In other words, a scalar input tensor represents a single value without any additional structure or dimensions.",Tensor,"import numpy as np
np.std(4) # returns 0
import torch
torch.std(torch.tensor(4.)) # returns NaN",input,N.A,N.A
Pytorch,N.A,torch,torch.cat,https://github.com/pytorch/pytorch/issues/25648,Negative integer argument,"A negative integer argument in Python refers to an integer value that is less than zero. It is a numeric value that represents a negative quantity or position in a numerical sequence. In Python, negative integers are denoted by placing a minus sign (-) before the numerical value. For example, -1, -2, -3, and so on.",Integer,"import torch 
from torch import nn

device = torch.device('cuda') # crashes with cuda, works with cpu

class Model(nn.Module):

def __init__(self):
super().__init__()
self.linear1 = nn.Linear(2, 16)
self.linear2 = nn.Linear(2, 16)

def forward(self, x, y):
x = self.linear1(x)
y = self.linear2(y)
return torch.cat([x, y], dim=-1) # if we replace -1 with 1 works fine with either GPU or CPU

model = Model().to(device)

data = [torch.randn(1, 2).to(device), torch.randn(1, 2).to(device)] 

traced = torch.jit.trace(model, data)

print(traced)",dim,N.A,N.A
Pytorch,N.A,torch.nn.functional,torch.nn.functional.grid_sample,https://github.com/pytorch/pytorch/issues/24823,NaN input list element,"NaN stands for ""Not a Number"" and is a special value used to represent an undefined or unrepresentable numerical result in Python. In the context of a list, a NaN input list element refers to an element that has the NaN value, indicating that it is not a valid numerical value.",List,"import torch

image = torch.rand(1, 1, 3, 3, device='cpu')
grid = torch.rand(1, 3, 3, 2, device='cpu')
grid[:,1,1,0] = float('nan')
torch.nn.functional.grid_sample(image, grid, padding_mode='reflection')",padding_mode,N.A,segfault
Pytorch,N.A,torch,torch.einsum,https://github.com/pytorch/pytorch/issues/23061,Tensor with specific dtype,A tensor with random data type,Tensor,"import os
os.environ['CUDA_VISIBLE_DEVICES']='0'
import torch
from time import time

a = torch.empty(24,32,40,48, dtype=torch.float32).to('cuda')
b = torch.empty(64,32,40,48, dtype=torch.float32).to('cuda')
c = torch.empty(40,80,24, dtype=torch.float32).to('cuda')
d = torch.empty(40,24,16, dtype=torch.float32).to('cuda')

st = time()
for _ in range(1000):
c.matmul(d)
print(time()-st)

st = time()
for _ in range(1000):
torch.einsum('ibnd,jbnd->ijbn', a, b)
print(time()-st)",operands,N.A,N.A
Pytorch,N.A,torch,torch.matmul,https://github.com/pytorch/pytorch/issues/22788,Tensor with specific dtype,A tensor with random data type,Tensor,"import os
os.environ['CUDA_VISIBLE_DEVICES']='0'
import torch
from time import time


a = torch.empty(24,32,40,48, dtype=torch.float16).to('cuda')
b = torch.empty(64,32,40,48, dtype=torch.float16).to('cuda')
c = torch.empty(40,80,24, dtype=torch.float16).to('cuda')
d = torch.empty(40,24,16, dtype=torch.float16).to('cuda')

st = time()
for _ in range(1000):
torch.matmul(c,d)
print(time()-st)

st = time()
for _ in range(1000):
torch.einsum('ibnd,jbnd->ijbn', a, b)
print(time()-st)",operands,,
Pytorch,N.A,torch,torch.mv,https://github.com/pytorch/pytorch/issues/17897,Large input tensor,A large tensor refers to a tensor that has a large number of elements or values or occupies a significant amount of memory.,Tensor,"x = torch.ones(35783, 65133, device='cuda')
y = torch.randn(65133, device='cuda')
z = torch.mv(x, y)
torch.cuda.synchronize() # report asynchronous error","input
vec",N.A,N.A
