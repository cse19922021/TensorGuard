[{
    "Id": 1,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/0a7eef9bcf6d1f8b5531102342ffc21f24beb58d",
    "Violation": "unnecessary",
    "Bug report": "[BE] Remove stale CUDA version check from cpp_extension.py. As at least CUDA-11.x is needed to build PyTorch on latest trunk. But still skip `--generate-dependencies-with-compile` if running on ROCm",
    "Number of deleted lines": 5,
    "Deleted lines": "    # file wherever it is.\n    sources = [os.path.abspath(file) for file in sources]\n\n    # See https://ninja-build.org/build.ninja.html for reference.\n    compile_rule = ['rule compile']\n    if IS_WINDOWS:\n        compile_rule.append(\n            '  command = cl /showIncludes $cflags -c $in /Fo$out $post_cflags')\n        compile_rule.append('  deps = msvc')\n    else:\n        compile_rule.append(\n            '  command = $cxx -MMD -MF $out.d $cflags -c $in -o $out $post_cflags')\n        compile_rule.append('  depfile = $out.d')\n        compile_rule.append('  deps = gcc')\n\n    if with_cuda:\n        cuda_compile_rule = ['rule cuda_compile']\n        nvcc_gendeps = ''\n        # --generate-dependencies-with-compile was added in CUDA 10.2.\n        # Compilation will work on earlier CUDA versions but header file\n        # dependencies are not correctly computed.\n        required_cuda_version = '11.0'\n        if torch.version.cuda is not None and TorchVersion(torch.version.cuda) >= required_cuda_version:\n            cuda_compile_rule.append('  depfile = $out.d')\n            cuda_compile_rule.append('  deps = gcc')\n            # Note: non-system deps with nvcc are only supported\n            # on Linux so use --generate-dependencies-with-compile\n            # to make this work on Windows too.\n            nvcc_gendeps = '--generate-dependencies-with-compile --dependency-output $out.d'\n        cuda_compile_rule.append(\n            f'  command = $nvcc {nvcc_gendeps} $cuda_cflags -c $in -o $out $cuda_post_cflags')\n\n    # Emit one build rule per source to enable incremental build.\n    build = []\n    for source_file, object_file in zip(sources, objects):\n        is_cuda_source = _is_cuda_file(source_file) and with_cuda\n        rule = 'cuda_compile' if is_cuda_source else 'compile'\n        if IS_WINDOWS:\n            source_file = source_file.replace(':', '$:')\n            object_file = object_file.replace(':', '$:')\n        source_file = source_file.replace(\" \", \"$ \")\n        object_file = object_file.replace(\" \", \"$ \")\n        build.append(f'build {object_file}: {rule} {source_file}')"
},
{
    "Id": 2,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/93cea394dee1315c7a85ead7bb7af21363157c4f",
    "Violation": "improper",
    "Bug report": "Currently we compare `CUDA_INCLUDE_DIRS` and expect exact equality with `CUDAToolkit_INCLUDE_DIR` however this fails in the presense of symbolic links or for split installs where there are multiple include paths.",
    "Number of deleted lines": 4,
    "Deleted lines": "  set(CMAKE_CUDA_HOST_COMPILER \"${CMAKE_C_COMPILER}\")\nendif()\nenable_language(CUDA)\nif(\"X${CMAKE_CUDA_STANDARD}\" STREQUAL \"X\" )\n  set(CMAKE_CUDA_STANDARD ${CMAKE_CXX_STANDARD})\nendif()\nset(CMAKE_CUDA_STANDARD_REQUIRED ON)\n\n# CMP0074 - find_package will respect <PackageName>_ROOT variables\ncmake_policy(PUSH)\nif(CMAKE_VERSION VERSION_GREATER_EQUAL 3.12.0)\n  cmake_policy(SET CMP0074 NEW)\nendif()\n\nfind_package(CUDAToolkit REQUIRED)\n\ncmake_policy(POP)\n\nif(NOT CMAKE_CUDA_COMPILER_VERSION STREQUAL CUDAToolkit_VERSION OR\n    NOT CUDA_INCLUDE_DIRS STREQUAL CUDAToolkit_INCLUDE_DIR)\n  message(FATAL_ERROR \"Found two conflicting CUDA installs:\\n\"\n                      \"V${CMAKE_CUDA_COMPILER_VERSION} in '${CUDA_INCLUDE_DIRS}' and\\n\"\n                      \"V${CUDAToolkit_VERSION} in '${CUDAToolkit_INCLUDE_DIR}'\")\nendif()\n\nif(NOT TARGET CUDA::nvToolsExt)\n  message(FATAL_ERROR \"Failed to find nvToolsExt\")\nendif()\n\nmessage(STATUS \"Caffe2: CUDA detected: \" ${CUDA_VERSION})\nmessage(STATUS \"Caffe2: CUDA nvcc is: \" ${CUDA_NVCC_EXECUTABLE})\nmessage(STATUS \"Caffe2: CUDA toolkit directory: \" ${CUDA_TOOLKIT_ROOT_DIR})\nif(CUDA_VERSION VERSION_LESS 11.0)\n  message(FATAL_ERROR \"PyTorch requires CUDA 11.0 or above.\")\nendif()\n\nif(CUDA_FOUND)\n  # Sometimes, we may mismatch nvcc with the CUDA headers we are\n  # compiling with, e.g., if a ccache nvcc is fed to us by CUDA_NVCC_EXECUTABLE\n  # but the PATH is not consistent with CUDA_HOME.  It's better safe\n  # than sorry: make sure everything is consistent.\n  if(MSVC AND CMAKE_GENERATOR MATCHES \"Visual Studio\")\n    # When using Visual Studio, it attempts to lock the whole binary dir when"
},
{
    "Id": 3,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/6b4c686b9a33a1503a4a4133f9067dd31e0822f7",
    "Violation": "improper",
    "Bug report": "Forward fix a performance regression caused by #110510. When a model is run once, all those kernel pointers are initialized and removing the if-nullptr check will cause those loadKernel be unnecessarily executed again when we rerun the foward function.",
    "Number of deleted lines": 2,
    "Deleted lines": "        self, name: str, kernel: str, metadata: Optional[str] = None, cuda=True\n    ):\n        if not cuda:\n            return super().define_kernel(name, kernel, metadata, cuda)\n\n    def generate(self):\n        self.prefix.writeline(\"\\n\")\n        if not V.graph.aot_mode:\n            for kernel in self.src_to_kernel.values():\n                self.prefix.writeline(f\"static CUfunction {kernel} = nullptr;\")\n            self.prefix.writeline(\"\\n\")\n        return super().generate()\n\n    @functools.lru_cache(None)\n    def generate_load_kernel_once(\n        self, name: str, mangled_name: str, cubin_path: str, shared_mem: int\n    ):\n        if V.graph.aot_mode:\n            self.writeline(\n                f\"\"\"kernels.{name} = loadKernel(\"{cubin_path}\", \"{mangled_name}\", {shared_mem}, this->cubin_dir_);\"\"\"\n            )\n        else:\n            self.writeline(\n                f\"\"\"{name} = loadKernel(\"{cubin_path}\", \"{mangled_name}\", {shared_mem});\"\"\"\n            )\n\n    def generate_args_decl(self, call_args):\n        dynamic_symbols = V.graph.sizevars.free_symbols()\n        # TODO: only works for constant now, need type info\n        new_args = []\n        for arg in call_args:\n            var_name = f\"var_{next(self.arg_var_id)}\"\n            if isinstance(\n                arg,\n                (\n                    sympy.Integer,\n                    sympy.Symbol,\n                    SymbolicCallArg,\n                ),\n            ):\n                self.writeline(f\"auto {var_name} = {arg};\")\n            elif is_int(arg):\n                self.writeline(f\"int {var_name} = {arg};\")\n            elif is_float(arg):\n                self.writeline(f\"float {var_name} = {arg};\")"
},
{
    "Id": 4,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/45296f87ec865a7a500a6fd98353035c040d0cb7",
    "Violation": "insufficient",
    "Bug report": "Prior to this change ROCm was not exiting check_cuda, causing an exception at packaging.version.parse(torch.version.cuda),",
    "Number of deleted lines": 1,
    "Deleted lines": "    hip_version_str = (\n        subprocess.check_output([hipcc, \"--version\"])\n        .strip()\n        .decode(*cpp_extension.SUBPROCESS_DECODE_ARGS)\n    )\n    hip_version = re.search(r\"HIP version: (\\d+[.]\\d+)\", hip_version_str)\n\n    if hip_version is None:\n        raise VerifyDynamoError(\"HIP version not found in `hipcc --version` output\")\n\n    hip_str_version = hip_version.group(1)\n\n    return packaging.version.parse(hip_str_version)\n\n\ndef check_cuda():\n    import torch\n\n    if not torch.cuda.is_available():\n        return None\n\n    torch_cuda_ver = packaging.version.parse(torch.version.cuda)\n\n    # check if torch cuda version matches system cuda version\n    cuda_ver = get_cuda_version()\n    if cuda_ver != torch_cuda_ver:\n        # raise VerifyDynamoError(\n        warnings.warn(\n            f\"CUDA version mismatch, `torch` version: {torch_cuda_ver}, env version: {cuda_ver}\"\n        )\n\n    if torch_cuda_ver < MIN_CUDA_VERSION:\n        # raise VerifyDynamoError(\n        warnings.warn(\n            f\"(`torch`) CUDA version not supported: {torch_cuda_ver} \"\n            f\"- minimum requirement: {MIN_CUDA_VERSION}\"\n        )\n    if cuda_ver < MIN_CUDA_VERSION:\n        # raise VerifyDynamoError("
},
{
    "Id": 5,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bede7d999523d02e636a8981c0dff233b67f1a62",
    "Violation": "improper",
    "Bug report": "It does not check if `kind` variable fits in array of pointer called `names`",
    "Number of deleted lines": 1,
    "Deleted lines": "\nconstexpr int max_tensor_display_size = 10;\n\nenum class AttributeKind { f, fs, i, is, s, ss, t, ts, g, gs, ty, tys, ival };\nstatic inline const char* toString(AttributeKind kind) {\n  static const char* names[] = {\"f\",\n                                \"fs\",\n                                \"i\",\n                                \"is\",\n                                \"s\",\n                                \"ss\",\n                                \"t\",\n                                \"ts\",\n                                \"g\",\n                                \"gs\",\n                                \"ty\",\n                                \"tys\",\n                                \"ival\"};\n  AT_ASSERT(size_t(kind) < sizeof(names) / sizeof(AttributeKind));\n  return names[int(kind)];\n}\n\nstruct AttributeValue {\n  AttributeValue(Symbol name) : name(name) {}\n  using Ptr = std::unique_ptr<AttributeValue>;\n  Symbol name;\n  virtual AttributeKind kind() const = 0;\n  virtual Ptr clone() const = 0;\n  virtual ~AttributeValue() = default;\n};\n\ntemplate <typename T, AttributeKind Kind>\nstruct ScalarAttributeValue : public AttributeValue {\n  using ConstructorType = T;\n  using ValueType = T;\n  ScalarAttributeValue(Symbol name, ConstructorType value_)\n      : AttributeValue(name), value_(std::move(value_)) {}\n  ValueType& value() {\n    return value_;"
},
{
    "Id": 6,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f6639359357452de8bfc691430396ded98ea399c",
    "Violation": "improper",
    "Bug report": "`TORCH_CHECK(i<UINT32_MAX)` is always false, it should be `TORCH_CHECK(iterShape[i] < UINT32_MAX)`",
    "Number of deleted lines": 3,
    "Deleted lines": "  MPSGraphCacheCallback() : graph_cache(MPSGraphCache::getInstance()) {}\n\n  void executeMPSAllocatorCallback(void* ptr, EventType event) override {}\n\n private:\n  MPSGraphCache* graph_cache;\n};\n\nREGISTER_MPS_ALLOCATOR_CALLBACK(\"mps_graph_cache_callback\", MPSGraphCacheCallback);\n\nid<MTLBuffer> generateKernelDataOffsets(id<MTLComputeCommandEncoder> commandEncoder, const TensorIteratorBase& iter) {\n  constexpr uint32_t nOffsets = 3;\n  uint32_t numThreads = iter.numel();\n  const uint32_t nDim = iter.ndim();\n  const IntArrayRef& iterShape = iter.shape();\n  std::vector<uint32_t> iterShapeData(iterShape.size());\n  std::vector<std::array<uint32_t, nOffsets>> strides(nDim);\n  TORCH_INTERNAL_ASSERT(iter.ntensors() >= nOffsets);\n\n  for (const auto i : c10::irange(iterShape.size())) {\n    TORCH_CHECK(i <= UINT32_MAX);\n    iterShapeData[i] = (uint32_t)(iterShape[i]);\n  }\n\n  for (const auto i : c10::irange(nDim)) {\n    for (const auto offset : c10::irange(nOffsets)) {\n      strides[i][offset] = iter.strides(offset)[i];\n    }\n  }\n\n  id<MTLComputePipelineState> kernelDataOffsetsPSO = MPSDevice::getInstance()->metalIndexingPSO(\"kernel_index_offsets\");\n  id<MTLBuffer> kernelDataOffsets = (id<MTLBuffer>)getIMPSAllocator()->allocate(numThreads * sizeof(simd_uint3)).get();\n\n  [commandEncoder setComputePipelineState:kernelDataOffsetsPSO];\n  [commandEncoder setBytes:strides.data() length:sizeof(uint32_t) * nDim * nOffsets atIndex:0];\n  [commandEncoder setBuffer:kernelDataOffsets offset:0 atIndex:1];\n  [commandEncoder setBytes:iterShapeData.data() length:sizeof(uint32_t) * iterShape.size() atIndex:2];\n  [commandEncoder setBytes:&nDim length:sizeof(uint32_t) atIndex:3];\n  [commandEncoder setBytes:&nOffsets length:sizeof(uint32_t) atIndex:4];\n\n  mtl_dispatch1DJob(commandEncoder, kernelDataOffsetsPSO, numThreads);\n\n  return kernelDataOffsets;\n}\n\n} // namespace at::native::mps\n"
},
{
    "Id": 7,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/175ccfc4c8443bcc65c87d9c942272d3ebf16b0b",
    "Violation": "missing",
    "Bug report": "flatbuffer module fields are not initialized",
    "Number of deleted lines": 2,
    "Deleted lines": "    all_functions_[i] = func_ptr.get();\n    mcu_->register_function(std::move(func_ptr));\n  } else {\n    all_ivalues_[i] = parseIValue(ivalue);\n  }\n}\n\nmobile::Module FlatbufferLoader::parseModule(\n    mobile::serialization::Module* module,\n    char* end) {\n  module_ = module;\n  all_ivalues_.clear();\n  all_types_.clear();\n  storages_.clear();\n  storage_loaded_.clear();\n  module_parsed_ = false;\n\n  const auto* ivalues = module->ivalues();\n  TORCH_CHECK(ivalues != nullptr, \"Corrupted ivalues field\")\n  TORCH_CHECK(\n      reinterpret_cast<const char*>(ivalues) < end, \"Corrupted ivalues field\")\n  all_ivalues_.resize(ivalues->size());\n  all_types_.resize(module->object_types()->size());\n  storages_.resize(module->storage_data_size());\n  storage_loaded_.resize(module->storage_data_size(), false);\n\n  mobile_ivalue_size_ = module_->mobile_ivalue_size();\n  if (mobile_ivalue_size_ == 0) {\n    mobile_ivalue_size_ = ivalues->size();\n  }\n\n  for (uint32_t i = 0; i < mobile_ivalue_size_; i++) {\n    const auto* ival = ivalues->Get(i);\n    TORCH_CHECK(\n        reinterpret_cast<const char*>(ival) < end, \"Corrupted ivalue item\")\n    parseAndPopulate(i, ival);\n  }\n  IValue& module_ivalue = getIValue(module->state_obj());\n\n  // register functions\n  for (const auto& f : all_functions_) {"
},
{
    "Id": 8,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bde7b81f34925491fbcbb9e355697eb594e36923",
    "Violation": "improper",
    "Bug report": "Back out \"[PyTorch] Don't do extra numel() check in TensorImpl::data()",
    "Number of deleted lines": 1,
    "Deleted lines": "  ///\n  /// get_data must return a byte-addressed pointer, e.g. char*,\n  /// std::byte const*, etc.\n  template <typename Void, typename Func>\n  Void* data_impl(const Func& get_data) const {\n    TORCH_CHECK(\n        has_storage(),\n        \"Cannot access data pointer of Tensor that doesn't have storage\");\n    TORCH_CHECK(\n        dtype_initialized(),\n        \"Cannot access data pointer of Tensor that doesn't have initialized dtype \"\n        \"(e.g., caffe2::Tensor x(CPU), prior to calling mutable_data<T>() on x)\");\n    auto* data = get_data();\n    static_assert(\n        sizeof(*data) == 1, \"get_data must return a byte-addressed pointer.\");\n    // Computing an offset into an empty tensor would be UB, since an empty\n    // tensor's storage will be nullptr, and adding a nonzero offset to nullptr\n    // is UB.  So we skip the offset computation in this case.\n    if (data == nullptr) {\n      return nullptr;\n    }\n    return data + data_type_.itemsize() * storage_offset_;\n  }\n\n public:\n  /**\n   * Returns the TypeMeta of a tensor, which describes what data type\n   * it is (e.g., int, float, ...)\n   */\n  const caffe2::TypeMeta dtype() const {\n    return data_type_;\n  }\n\n  /**\n   * Return the size of a single element of this tensor in bytes.\n   */\n  size_t itemsize() const {\n    TORCH_CHECK(\n        dtype_initialized(),"
},
{
    "Id": 9,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/2e224d62b6afecc78d885d0a4e160354950f6424",
    "Violation": "missing",
    "Bug report": "We have environment variable USE_CUDNN with self-explanatory name. However cpp code is compiled based on cpp macro definition AT_CUDNN_ENABLED, even if USE_CUDNN is set to 0, cpp is compiled with cuDNN if cmake finds cuDNN in the system.",
    "Number of deleted lines": 2,
    "Deleted lines": "\n  IF (WIN32 AND NOT CYGWIN)\n    SET(BLAS_INSTALL_LIBRARIES \"OFF\"\n      CACHE BOOL \"Copy the required BLAS DLLs into the TH install dirs\")\n  ENDIF()\n\n  FIND_PACKAGE(LAPACK)\n  IF (LAPACK_FOUND)\n    SET(USE_LAPACK 1)\n  ENDIF()\n\n  if (NOT USE_CUDA)\n    message(\"disabling CUDA because NOT USE_CUDA is set\")\n    SET(AT_CUDA_ENABLED 0)\n  else()\n    SET(AT_CUDA_ENABLED 1)\n  endif()\n\n  IF (NOT AT_CUDA_ENABLED OR NOT CUDNN_FOUND)\n    MESSAGE(STATUS \"CuDNN not found. Compiling without CuDNN support\")\n    set(AT_CUDNN_ENABLED 0)\n  ELSE()\n    include_directories(SYSTEM ${CUDNN_INCLUDE_PATH})\n    set(AT_CUDNN_ENABLED 1)\n  ENDIF()\n\n  IF (NOT USE_ROCM)\n    message(\"disabling ROCM because NOT USE_ROCM is set\")\n    MESSAGE(STATUS \"MIOpen not found. Compiling without MIOpen support\")\n    set(AT_ROCM_ENABLED 0)\n  ELSE()\n    INCLUDE_DIRECTORIES(BEFORE ${MIOPEN_INCLUDE_DIRS})\n    set(AT_ROCM_ENABLED 1)\n  ENDIF()\n\n  SET(AT_MKLDNN_ENABLED 0)\n  SET(CAFFE2_USE_MKLDNN OFF)\n  IF (USE_MKLDNN)\n    INCLUDE(${CMAKE_CURRENT_LIST_DIR}/public/mkldnn.cmake)\n    IF(MKLDNN_FOUND)"
},
{
    "Id": 10,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/30e1c74dc19ae2b622b46ebcdb7972c42775ac80",
    "Violation": "improper",
    "Bug report": "Update cuda amp to also check xla device ",
    "Number of deleted lines": 1,
    "Deleted lines": "    The autocast state is thread-local.  If you want it enabled in a new thread, the context manager or decorator\n    must be invoked in that thread.  This affects :class:`torch.nn.DataParallel` and\n    :class:`torch.nn.parallel.DistributedDataParallel` when used with more than one GPU per process\n    (see :ref:`Working with Multiple GPUs<amp-multigpu>`).\n\n    Args:\n        device_type(string, required):  Whether to use 'cuda' or 'cpu' device\n        enabled(bool, optional, default=True)\":  Whether autocasting should be enabled in the region.\n        fast_dtype(torch_dtype, optional):  Whether to use torch.float16 or torch.bfloat16\n    \"\"\"\n    def __init__(self, device_type, enabled=True, **kwargs):\n        self.device = device_type\n        if self.device == 'cuda':\n            self.fast_dtype = torch.get_autocast_gpu_dtype()\n        elif self.device == 'cpu':\n            self.fast_dtype = torch.get_autocast_cpu_dtype()\n        else:\n            raise RuntimeError('User specified autocast device_type must be \\'cuda\\' or \\'cpu\\'')\n        if not torch.cuda.is_available() and self.device == 'cuda':\n            warnings.warn('User provided device_type of \\'cuda\\', but CUDA is not available. Disabling')\n            enabled = False\n        for key, value in kwargs.items():\n            if key == 'fast_dtype':\n                self.fast_dtype = value\n            if not (key == 'fast_dtype'):\n                raise RuntimeError('Unrecognized optional argument supplied to autocast context manager: ' + str(key))\n\n        if self.device == 'cpu':\n            supported_dtype = [torch.bfloat16]\n            if self.fast_dtype not in supported_dtype:\n                error_message = 'In CPU autocast, but the target dtype is not supported. Disabling autocast.\\n'\n                error_message += 'CPU Autocast only supports dtype of torch.bfloat16 currently.'\n                warnings.warn(error_message)\n                enabled = False\n        if self.device == 'cuda':\n            if self.fast_dtype == torch.bfloat16 and torch.cuda.get_device_properties(torch.cuda.current_device()).major < 8:\n                raise RuntimeError('Current CUDA Device does not support bfloat16. Switching fast_dtype to float16.')\n        self._enabled = enabled\n"
},
{
    "Id": 11,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5a63c452e638dad8e077887ad8d2c94ff0e23917",
    "Violation": "missing",
    "Bug report": "This is because there are some hard-to-detect edge cases that will throw exceptions with cudnn 8.0.5 on Nvidia A40 GPU.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  inline bool use_persist_device_heuristics(const RNNDescriptorParams& rnn,\n                                            const TensorDescriptorListParams& tensors) {\n    auto bsize = tensors.mini_batch;\n    cudaDeviceProp* prop = at::cuda::getCurrentDeviceProperties();\n    if (prop->major == 7) {\n      if (prop->minor == 5) {\n        // Excludes Turing from using persistent rnn.\n        return false;\n      } else {\n        // technically, batch size should be multiple of 8, but there are quite a few multiple-of-8 batchsizes that give bad perf,\n        // weed them out\n        return ((bsize % 16 == 0 && bsize != 80 && bsize !=112) || bsize == 8) &&\n               ((tensors.seq_length >=40 && bsize <=128) ||\n                (tensors.seq_length >=20 && bsize <=96) ||\n                (tensors.seq_length >=10 && bsize <=32));\n      }\n    } else if (prop->major >= 8) {\n      // Based on tests by Vasily Volkov and xwang233.  Vasily only tried bsize <= 128,\n      // so conservatively enable persistence for bsize <= 128 only.\n      // TODO:  Run more tests for bsize > 128.\n      if (rnn.mode == CUDNN_GRU) {\n        // Persistent GRU performance is flakier than other RNN types.  Exclude them for now.\n        // TODO:  Write a more refined GRU heuristic.\n        return false;\n      } else if (rnn.mode == CUDNN_LSTM) {\n        // Persistent LSTMs are comparable to or better than non-persistent for bsize <= 128.\n        return (bsize % 8 == 0) && (bsize <= 128);\n      } else {\n        // Persistent RNN_RELU and TANH show poor performance when bsize >= 96 AND hidden size >= 896.\n        return (bsize % 8 == 0) && (bsize <= 128) && (bsize < 96 || rnn.hidden_size < 896);\n      }\n    } else {\n      return false;\n    }\n  }\n\n  cudnnRNNAlgo_t get_algo(const RNNDescriptorParams& rnn, const TensorDescriptorListParams& tensors, const Tensor input) {"
},
{
    "Id": 12,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/611080a118fff166c85f3200d860f3b059abac6f",
    "Violation": "improper",
    "Bug report": "uda 11.0.x doesn't support sm86.",
    "Number of deleted lines": 2,
    "Deleted lines": "\nif(CUDA_VERSION VERSION_GREATER \"9.5\")\n  list(APPEND CUDA_KNOWN_GPU_ARCHITECTURES \"Turing\")\n  list(APPEND CUDA_COMMON_GPU_ARCHITECTURES \"7.5\")\n  list(APPEND CUDA_ALL_GPU_ARCHITECTURES \"7.5\")\n\n  if(CUDA_VERSION VERSION_LESS \"11.0\")\n    set(CUDA_LIMIT_GPU_ARCHITECTURE \"8.0\")\n    list(APPEND CUDA_COMMON_GPU_ARCHITECTURES \"7.5+PTX\")\n  endif()\nendif()\n\nif(CUDA_VERSION VERSION_GREATER \"10.5\")\n  list(APPEND CUDA_KNOWN_GPU_ARCHITECTURES \"Ampere\")\n  list(APPEND CUDA_COMMON_GPU_ARCHITECTURES \"8.0\")\n  list(APPEND CUDA_ALL_GPU_ARCHITECTURES \"8.0\")\n\n  if(CUDA_VERSION VERSION_LESS \"11.1\")\n    set(CUDA_LIMIT_GPU_ARCHITECTURE \"8.6\")\n    list(APPEND CUDA_COMMON_GPU_ARCHITECTURES \"8.0+PTX\")\n  endif()\nendif()\n\nif(CUDA_VERSION VERSION_GREATER \"11.0\")\n  list(APPEND CUDA_COMMON_GPU_ARCHITECTURES \"8.6\" \"8.6+PTX\")\n  list(APPEND CUDA_ALL_GPU_ARCHITECTURES \"8.6\")\n\n  if(CUDA_VERSION VERSION_LESS \"12.0\")\n    set(CUDA_LIMIT_GPU_ARCHITECTURE \"9.0\")\n  endif()\nendif()\n\n################################################################################################\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n# Usage:\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n#\nfunction(CUDA_DETECT_INSTALLED_GPUS OUT_VARIABLE)\n  if(NOT CUDA_GPU_DETECT_OUTPUT)\n    if(CMAKE_CUDA_COMPILER_LOADED) # CUDA as a language\n      set(file \"${PROJECT_BINARY_DIR}/detect_cuda_compute_capabilities.cu\")\n    else()\n      set(file \"${PROJECT_BINARY_DIR}/detect_cuda_compute_capabilities.cpp\")\n    endif()\n\n    file(WRITE ${file} \"\""
},
{
    "Id": 13,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/563bbeb8905f4cea0bc5353dc12518c61113128e",
    "Violation": "insufficient",
    "Bug report": "undefined CUDA_VERSION warning",
    "Number of deleted lines": 1,
    "Deleted lines": ""
},
{
    "Id": 14,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/8198474eb763c8d526ede3418211479c2f4cbd30",
    "Violation": "missing",
    "Bug report": "Previous to this PR, we only checked TorchScript nodes for scope compatibility, skipping their parent's scope reference check.",
    "Number of deleted lines": 1,
    "Deleted lines": "\nnamespace ONNXScopeName {\n\nusing NameFunc = std::string (*)(torch::jit::ScopePtr scope);\n\nconst std::string name_separator = \"::\";\n\nnamespace {\n\nstd::string nameFromRoot(\n    torch::jit::ScopePtr scope,\n    const std::string& layer_separator,\n    NameFunc name_func) {\n  std::string out = (*name_func)(scope);\n  if (scope->isRoot()) {\n    return out;\n  }\n  auto parent = scope->parent();\n  while (!parent->isRoot()) {\n    out = std::string((*name_func)(parent)).append(layer_separator).append(out);\n    parent = parent->parent();\n  }\n  return out;\n}\n\nstd::pair<std::string, std::string> parseNameFromScope(\n    torch::jit::ScopePtr scope) {\n  std::string full_name = scope->name().toUnqualString();\n  auto pos = full_name.find(name_separator);\n  TORCH_CHECK(\n      pos != std::string::npos,\n      \"Scope name (\" + full_name + \") does not contain '\" + name_separator +\n          \"'\");\n  return std::make_pair(full_name.substr(0, pos), full_name.substr(pos + 2));\n}\n\n} // namespace\n\nstd::string createFullScopeName("
},
{
    "Id": 15,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/37dea0454dd310cfe443859f717862657df6b753",
    "Violation": "missing",
    "Bug report": "add checking for number of args checking observer in same graph",
    "Number of deleted lines": 1,
    "Deleted lines": "    node: Node,\n    node_name_to_target_dtype: Dict[str, Dict[str, Optional[Union[torch.dtype, type]]]],\n    dtype_config: Dict[str, torch.dtype],\n) -> bool:\n    \"\"\" Check if the configured qconfig for the output\n    is supported by the backend or not\n    \"\"\"\n    output_dtype = dtype_config.get(\"output_dtype\", None)\n    return output_dtype is None or \\\n        output_dtype == node_name_to_target_dtype[node.name][\"output_activation_dtype\"]\n\ndef is_observer_in_same_graph(node, modules, node_name_to_target_dtype):\n    \"\"\" Check if observer in same graph\n    when the node output is not fp32 and input is 'placeholder'\n    the input is assumed to be quantized, so it is observed\n    in a different place rather than not observed.\n    \"\"\"\n    node_output_dtype = get_arg_target_dtype_as_output(node, modules, node_name_to_target_dtype)\n    if isinstance(node.args[0], Node):\n        if node_output_dtype == torch.quint8 and node.args[0].op == 'placeholder':\n            return False\n    return True\n\ndef is_pattern_dtype_config_supported_by_backend(\n    pattern: Optional[Pattern],\n    matched_node_pattern: Optional[NodePattern],\n    node_name_to_target_dtype: Dict[str, Dict[str, Optional[Union[torch.dtype, type]]]],\n    backend_config_dict: Optional[Dict[str, Any]]\n) -> bool:\n    \"\"\" Check is the dtype configuration of a pattern is supported by\n    the backend or not\n    \"\"\"\n    if backend_config_dict is None or pattern is None:\n        return True\n    assert matched_node_pattern is not None and len(matched_node_pattern) >= 1\n    pattern_to_dtype_configs = get_pattern_to_dtype_configs(backend_config_dict)\n    dtype_configs: List[Dict[str, torch.dtype]] = pattern_to_dtype_configs.get(pattern, [])\n\n    # TODO: this only works for one input and one output patterns, need to generalize to multiple"
},
{
    "Id": 16,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bdbd3ed312e0fc81e75302239ea78b3445fe95e7",
    "Violation": "insufficient",
    "Bug report": "Although `len(compiler.captured_graphs)` is 2, no error was thrown during the compilation. This observation conflicts with `nopython=True`. After some digging, I found a check is missed before making graph break. This PR adds it.",
    "Number of deleted lines": 1,
    "Deleted lines": "        else:\n            unimplemented(f\"generic_jump {typestr(value)}\")\n\n    return inner\n\n\nexplain = False\n\n\ndef break_graph_if_unsupported(*, push):\n    def decorator(inner_fn):\n        @functools.wraps(inner_fn)\n        def wrapper(self: \"InstructionTranslatorBase\", inst: Instruction):\n            state = self.copy_graphstate()\n            reason = None\n            try:\n                return inner_fn(self, inst)\n            except Unsupported as excp:\n                if self.has_backedge():\n                    msg = \"Skipping frame because there is a graph break in a for/while loop\"\n                    log.debug(msg)\n                    raise exc.SkipFrame(msg) from excp\n\n                if not self.should_compile_partial_graph():\n                    raise\n\n                log.debug(\"break_graph_if_unsupported triggered compile\", exc_info=True)\n\n                user_stack = [self.frame_summary()] + list(reversed(excp.real_stack))\n                user_stack_formatted = \"\".join(traceback.format_list(user_stack))\n                frame_loc = (user_stack[-1].filename, user_stack[-1].lineno)\n                # torch._dynamo.explain() formats this a little nicer, and presents a slightly\n                # more actionable user code pointer\n                if (\n                    config.print_graph_breaks\n                    and not explain\n                    and graph_break_dup_warning_checker.add(frame_loc)\n                ):\n                    log.warning("
},
{
    "Id": 17,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/7e9bf2ed860b8b60d252eead4cc457c3fe5f1667",
    "Violation": "insufficient",
    "Bug report": "Although `len(compiler.captured_graphs)` is 2, no error was thrown during the compilation. This observation conflicts with `nopython=True`. After some digging, I found a check is missed before making graph break. This PR adds it.",
    "Number of deleted lines": 1,
    "Deleted lines": "        else:\n            unimplemented(f\"generic_jump {typestr(value)}\")\n\n    return inner\n\n\nexplain = False\n\n\ndef break_graph_if_unsupported(*, push):\n    def decorator(inner_fn):\n        @functools.wraps(inner_fn)\n        def wrapper(self: \"InstructionTranslatorBase\", inst: Instruction):\n            state = self.copy_graphstate()\n            reason = None\n            try:\n                return inner_fn(self, inst)\n            except Unsupported as excp:\n                if self.has_backedge():\n                    msg = \"Skipping frame because there is a graph break in a for/while loop\"\n                    log.debug(msg)\n                    raise exc.SkipFrame(msg) from excp\n\n                if not self.should_compile_partial_graph():\n                    raise\n\n                log.debug(\"break_graph_if_unsupported triggered compile\", exc_info=True)\n\n                user_stack = [self.frame_summary()] + list(reversed(excp.real_stack))\n                user_stack_formatted = \"\".join(traceback.format_list(user_stack))\n                frame_loc = (user_stack[-1].filename, user_stack[-1].lineno)\n                # torch._dynamo.explain() formats this a little nicer, and presents a slightly\n                # more actionable user code pointer\n                if (\n                    config.print_graph_breaks\n                    and not explain\n                    and graph_break_dup_warning_checker.add(frame_loc)\n                ):\n                    log.warning("
},
{
    "Id": 18,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/9234f5026dbaf09a41b82bb6cf5f10ad4eeb03f2",
    "Violation": "improper",
    "Bug report": "at::cuda::CUDAEvent is \"lazy\" and only creates an event when it's first recorded. Until then, at::cuda::CUDAEvent is empty. If we use at::cuda::CUDAEvent::query() this is taken into account (an empty event is always ready), but WorkNCCL extracts the raw cudaEvent_t value from at::cuda::CUDAEvent and calls cudaEventQuery manually and doesn't check this. This could cause a failure. It's unclear if this is ever supposed to happen, but we're seeing that failure, and we want to sort it out in order to see if there's something \"deeper\" going on.",
    "Number of deleted lines": 5,
    "Deleted lines": "  exception_ = exception_ptr;\n}\n\nvoid ProcessGroupNCCL::WorkNCCL::setException(\n    std::exception_ptr exception_ptr) {\n  std::unique_lock<std::mutex> lock(mutex_);\n  exception_ = exception_ptr;\n}\n\n// Helper that checks if the NCCL kernels are completed on the GPUs\nbool ProcessGroupNCCL::WorkNCCL::finishedGPUExecution() {\n  checkAndSetException();\n  return finishedGPUExecutionInternal();\n}\n\nbool ProcessGroupNCCL::WorkNCCL::finishedGPUExecutionInternal() const {\n  for (size_t i = 0; i < devices_.size(); ++i) {\n    // Checking the work's corresponding CUDA events' status\n    auto ret = cudaEventQuery((*cudaEvents_)[i]);\n    if (ret != cudaSuccess && ret != cudaErrorNotReady) {\n      AT_CUDA_CHECK(ret);\n    }\n    if (ret == cudaErrorNotReady) {\n      return false;\n    }\n  }\n  return true;\n}\n\nvoid ProcessGroupNCCL::WorkNCCL::checkAndThrowException() {\n  // Set the appropriate exception if found.\n  checkAndSetException();\n\n  // Throw an exception, only if we have a valid exception.\n  if (exception()) {\n    std::rethrow_exception(exception());\n  }\n}\n\nvoid ProcessGroupNCCL::WorkNCCL::handleNCCLGuard() {\n  std::lock_guard<std::mutex> lock(mutex_);\n  completed_ = true;\n  if (exception_) {"
},
{
    "Id": 19,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e9c1ccee2247a7746fde202067a7d47b72809968",
    "Violation": "improper",
    "Bug report": "Bug fix: allow std 0 in the meta definition of normal_. All other `normal` variants allow 0.  Looks like a mistake made while copying the check. ",
    "Number of deleted lines": 1,
    "Deleted lines": "Tensor& uniform_meta_(Tensor& self, double from, double to, c10::optional<Generator> gen) {\n  return at::native::templates::uniform_impl_<UniformMeta, Generator>(self, from, to, gen);\n}\n\n// ==================================================== Normal ========================================================\n\ntemplate<typename RNG>\nstruct NormalStub {\n  void operator()(Tensor& self, double mean, double std, c10::optional<Generator> gen) {\n    normal_stub(self.device().type(), self, mean, std, gen);\n  }\n};\n\nTensor& normal_(Tensor& self, double mean, double std, c10::optional<Generator> gen) {\n  return at::native::templates::normal_impl_<NormalStub, Generator>(self, mean, std, gen);\n}\n\nTensor& normal_meta_(Tensor& self, double mean, double std, c10::optional<Generator> gen) {\n  TORCH_CHECK(std > 0.0, \"normal_ expects std > 0.0, but found std=\", std);  // TODO: dedupe\n  return self;\n}\n\nTensor& normal_out(const Tensor& mean, double std, c10::optional<Generator> gen, Tensor& output) {\n  return at::native::templates::normal_out_impl<NormalStub, Generator>(output, mean, std, gen);\n}\n\nTensor& normal_out(double mean, const Tensor& std, c10::optional<Generator> gen, Tensor& output) {\n  return at::native::templates::normal_out_impl<NormalStub, Generator>(output, mean, std, gen);\n}\n\nTensor& normal_out(const Tensor& mean, const Tensor& std, c10::optional<Generator> gen, Tensor& output) {\n  return at::native::templates::normal_out_impl<NormalStub, Generator>(output, mean, std, gen);\n}\n\nTensor normal(const Tensor& mean, double std, c10::optional<Generator> gen) {\n  return at::native::templates::normal_impl<NormalStub, Generator>(mean, std, gen);\n}\n\nTensor normal(double mean, const Tensor& std, c10::optional<Generator> gen) {"
},
{
    "Id": 20,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c99277e177cf16736262251c7e92ea5e9ba2c5c2",
    "Violation": "improper",
    "Bug report": " handle the case in acc_ops.sum when dim == 0, differentiating it from the case when dim is None. handle the case in acc_ops.sum when dim == 0, differentiating it from the case when dim is None",
    "Number of deleted lines": 1,
    "Deleted lines": "        (\"input\", \"input\"),\n        (\"dim\", \"dim\", this_arg_is_optional),\n        (\"keepdim\", \"keepdim\", this_arg_is_optional),\n        (\"dtype\", \"dtype\", this_arg_is_optional),\n    ],\n)\ndef add_sum_mapper(node: torch.fx.Node, mod: torch.fx.GraphModule) -> torch.fx.Node:\n    with node.graph.inserting_before(node):\n        sum_kwargs = dict(node.kwargs)\n        if \"dim\" in sum_kwargs and isinstance(sum_kwargs[\"dim\"], int):\n            sum_kwargs[\"dim\"] = (sum_kwargs[\"dim\"],)\n        sum_node = node.graph.call_function(sum, kwargs=sum_kwargs)\n        sum_node.meta = node.meta.copy()\n        return sum_node\n\n\n@register_acc_op\ndef sum(*, input, dim=None, keepdim=False, dtype=None):\n    if dim:\n        return torch.sum(**locals())\n    else:\n        return input.sum(dtype=dtype)\n\n\n@register_acc_op_mapping(op_and_target=(\"call_function\", torch.sigmoid))\n@register_acc_op_mapping(op_and_target=(\"call_method\", \"sigmoid\"))\n@register_acc_op\ndef sigmoid(*, input):\n    return torch.sigmoid(**locals())\n\n\n@register_acc_op_mapping(op_and_target=(\"call_function\", torch.sinh))\n@register_acc_op\ndef sinh(*, input):\n    return torch.sinh(**locals())\n\n\n@register_acc_op_mapping(op_and_target=(\"call_function\", torch.cosh))\n@register_acc_op"
},
{
    "Id": 21,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/d72db37c4a6513c0f67f6f69870c9c45bf4880e6",
    "Violation": "unnecessary",
    "Bug report": "In file: combinatorics.py, the comparison of Collection length creates a logical short circuit. if isinstance(self.sampler, Sized) and len(self.sampler) >= 0: Here, the right side of the comparison will always return true. I suggested that the Collection length check should be removed since this is redundant.",
    "Number of deleted lines": 1,
    "Deleted lines": "                 sampler: Type[Sampler] = SequentialSampler,\n                 sampler_args: Optional[Tuple] = None,\n                 sampler_kwargs: Optional[Dict] = None\n                 ) -> None:\n        assert isinstance(datapipe, Sized), \\\n            \"Sampler class requires input datapipe implemented `__len__`\"\n        super().__init__()\n        self.datapipe = datapipe\n        self.sampler_args = () if sampler_args is None else sampler_args\n        self.sampler_kwargs = {} if sampler_kwargs is None else sampler_kwargs\n        # https://github.com/python/mypy/pull/9629 will solve\n        self.sampler = sampler(data_source=self.datapipe, *self.sampler_args, **self.sampler_kwargs)  # type: ignore[misc]\n\n    def __iter__(self) -> Iterator[T_co]:\n        return iter(self.sampler)\n\n    def __len__(self) -> int:\n        # Dataset has been tested as `Sized`\n        if isinstance(self.sampler, Sized) and len(self.sampler) >= 0:\n            return len(self.sampler)\n        raise TypeError(\"{} instance doesn't have valid length\".format(type(self).__name__))\n\n\n@functional_datapipe('shuffle')\nclass ShufflerIterDataPipe(IterDataPipe[T_co]):\n    r\"\"\"\n    Shuffles the input DataPipe with a buffer (functional name: ``shuffle``). The buffer\n    with ``buffer_size`` is filled with elements from the datapipe first. Then,\n    each item will be yielded from the buffer by reservoir sampling via iterator.\n\n    ``buffer_size`` is required to be larger than ``0``. For ``buffer_size == 1``, the\n    datapipe is not shuffled. In order to fully shuffle all elements from datapipe,\n    ``buffer_size`` is required to be greater than or equal to the size of datapipe.\n\n    When it is used with :class:`torch.utils.data.DataLoader`, the methods to\n    set up random seed are different based on :attr:`num_workers`.\n\n    For single-process mode (:attr:`num_workers == 0`), the random seed is set before\n    the :class:`~torch.utils.data.DataLoader` in the main process. For multi-process"
},
{
    "Id": 22,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c170d395de8ca441d3bedb20c9e45beb666f216c",
    "Violation": "missing",
    "Bug report": "Only check for xnnpack if torch installed. Fixes a bug where collect_env.py was not able to be run without having torch installed",
    "Number of deleted lines": 2,
    "Deleted lines": "            system_root = os.environ.get('SYSTEMROOT', 'C:\\\\Windows')\n            findstr_cmd = os.path.join(system_root, 'System32', 'findstr')\n            grep_cmd = r'{} /R \"numpy torch mypy\"'.format(findstr_cmd)\n        else:\n            grep_cmd = r'grep \"torch\\|numpy\\|mypy\"'\n        return run_and_read_all(run_lambda, pip + ' list --format=freeze | ' + grep_cmd)\n\n    pip_version = 'pip3' if sys.version[0] == '3' else 'pip'\n    out = run_with_pip(sys.executable + ' -mpip')\n\n    return pip_version, out\n\n\ndef get_cachingallocator_config():\n    ca_config = os.environ.get('PYTORCH_CUDA_ALLOC_CONF', '')\n    return ca_config\n\ndef is_xnnpack_available():\n    import torch.backends.xnnpack\n    return str(torch.backends.xnnpack.enabled)  # type: ignore[attr-defined]\n\ndef get_env_info():\n    run_lambda = run\n    pip_version, pip_list_output = get_pip_packages(run_lambda)\n\n    if TORCH_AVAILABLE:\n        version_str = torch.__version__\n        debug_mode_str = str(torch.version.debug)\n        cuda_available_str = str(torch.cuda.is_available())\n        cuda_version_str = torch.version.cuda\n        if not hasattr(torch.version, 'hip') or torch.version.hip is None:  # cuda version\n            hip_compiled_version = hip_runtime_version = miopen_runtime_version = 'N/A'\n        else:  # HIP version\n            cfg = torch._C._show_config().split('\\n')\n            hip_runtime_version = [s.rsplit(None, 1)[-1] for s in cfg if 'HIP Runtime' in s][0]\n            miopen_runtime_version = [s.rsplit(None, 1)[-1] for s in cfg if 'MIOpen' in s][0]\n            cuda_version_str = 'N/A'\n            hip_compiled_version = torch.version.hip\n    else:\n        version_str = debug_mode_str = cuda_available_str = cuda_version_str = 'N/A'"
},
{
    "Id": 23,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/65faf1a7eb07129d8b1f017fac341e178620dabd",
    "Violation": "missing",
    "Bug report": "Add version check for ProfilingVerbosity bulider config",
    "Number of deleted lines": 1,
    "Deleted lines": "        if fp16_mode and not self.builder.platform_has_fast_fp16:\n            warnings.warn(\"Current platform doesn't support fast native fp16!\")\n\n        self.input_specs_iter = 0\n        super().run()\n\n        self.builder.max_batch_size = max_batch_size\n        builder_config = self.builder.create_builder_config()\n        builder_config.max_workspace_size = max_workspace_size\n\n        cache = None\n        if timing_cache:\n            cache_file = numpy.array(timing_cache)\n            cache = builder_config.create_timing_cache(cache_file.tobytes())\n        else:\n            cache = builder_config.create_timing_cache(b\"\")\n        builder_config.set_timing_cache(cache, False)\n\n        builder_config.profiling_verbosity = profiling_verbosity if profiling_verbosity else trt.ProfilingVerbosity.LAYER_NAMES_ONLY\n        if fp16_mode:\n            builder_config.set_flag(trt.BuilderFlag.FP16)\n\n        if int8_mode:\n            builder_config.set_flag(trt.BuilderFlag.INT8)\n\n        if sparse_weights:\n            assert fp16_mode or int8_mode, \"We can only enable sparsity in fp16 or int8 mode.\"\n            builder_config.set_flag(trt.BuilderFlag.SPARSE_WEIGHTS)\n\n        if strict_type_constraints:\n            builder_config.set_flag(trt.BuilderFlag.STRICT_TYPES)\n\n        if self.optimization_profiles:\n            for optimization_profile in self.optimization_profiles:\n                builder_config.add_optimization_profile(optimization_profile)\n\n        if algorithm_selector:\n            builder_config.set_flag(trt.BuilderFlag.DISABLE_TIMING_CACHE)\n            builder_config.algorithm_selector = algorithm_selector"
},
{
    "Id": 24,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5fdddbbfe8ef17b2c81ed34a48f3b963944aa4c3",
    "Violation": "improper",
    "Bug report": "Fix checking of current mode in PyOperator dispatch",
    "Number of deleted lines": 3,
    "Deleted lines": "            assert (\n                dispatch_key != torch._C.DispatchKey.Python\n            ), \"Please register a mode for the torch._C.DispatchKey.Python key instead.\"\n            assert isinstance(dispatch_key, torch._C.DispatchKey)\n            assert dispatch_key not in self.table\n            self.table[dispatch_key] = fn\n            return fn\n\n        return inner\n\n    def dispatch(self, dispatch_key, *args, **kwargs):\n        from torch.utils._python_dispatch import _get_current_dispatch_mode\n\n        if dispatch_key == torch._C.DispatchKey.FuncTorchDynamicLayerFrontMode:\n            return dispatch_functorch(self, args, kwargs)\n\n        if dispatch_key == torch._C.DispatchKey.Python:\n            # TODO(voz): We should walk all the nodes here / turn it into a list, topmode is ok for now.\n            curr_mode = type(_get_current_dispatch_mode())\n            assert (\n                curr_mode is not None\n            ), \"Illegal invocation of dispatch on torch._C.DispatchKey.Python without a mode.\"\n            assert (\n                curr_mode in self.python_key_mode_table\n            ), f\"Current active mode {curr_mode} not registered\"\n            # TODO(voz): The idea behind this is that we do not yet support dispatch by key + mode, only key.\n            return self.python_key_mode_table[curr_mode](*args, **kwargs)\n\n        assert dispatch_key in self.table, dispatch_key\n        return self.table[dispatch_key](*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        flat_args = _to_flat_tuple(args, kwargs)\n        if torch.overrides.has_torch_function(flat_args):\n            return torch.overrides.handle_torch_function(\n                self, flat_args, *args, **kwargs\n            )\n\n        dispatch_key_set = _compute_keyset(args, kwargs)\n        return self.dispatch(dispatch_key_set.highestPriorityTypeId(), *args, **kwargs)\n\n    def name(self):\n        return self.name\n\n    # TODO(voz): Should rewrite fallthrough register as the impl for keys we do not specify\n    # as opposed to being this sort of explicit thing where ops are a little too key aware...\n    def _fallthrough_fn(self, operator, dispatch_key):"
},
{
    "Id": 25,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/0c0c9e743e82b398435ed07719e998aa15ac1ce1",
    "Violation": "improper",
    "Bug report": "Fix dimensions check ",
    "Number of deleted lines": 1,
    "Deleted lines": "    class Context = CUDAContext,\n    bool FIRSTDIMS = true,\n    bool NORMALIZE = false>\nclass ReduceDimsOp : public Operator<CUDAContext> {\n public:\n  USE_OPERATOR_CONTEXT_FUNCTIONS;\n  ReduceDimsOp(const OperatorDef& operator_def, Workspace* ws)\n      : Operator<CUDAContext>(operator_def, ws),\n        num_reduce_dims_(\n            OperatorBase::GetSingleArgument<int32_t>(\"num_reduce_dim\", 1)) {}\n\n  ~ReduceDimsOp() {}\n\n  bool RunOnDevice() override {\n    const auto& input = Input(0);\n    const auto* input_data = input.template data<T>();\n    auto* Y = Output(0);\n\n    CHECK_LT(num_reduce_dims_, input.dims().size());\n    const int M = FIRSTDIMS\n        ? input.size_to_dim(num_reduce_dims_)\n        : input.size_to_dim(input.ndim() - num_reduce_dims_);\n    const int N = FIRSTDIMS\n        ? input.size_from_dim(num_reduce_dims_)\n        : input.size_from_dim(input.ndim() - num_reduce_dims_);\n\n    vector<TIndex> output_shape;\n    int start_index = FIRSTDIMS ? num_reduce_dims_ : 0;\n    int end_index = FIRSTDIMS ? input.dims().size()\n                              : input.dims().size() - num_reduce_dims_;\n    for (int i = start_index; i < end_index; ++i) {\n      output_shape.push_back(input.dims()[i]);\n    }\n\n    Y->Resize(output_shape);\n\n    int in_dim = FIRSTDIMS ? M : N;\n\n    T alpha = 1.0;"
},
{
    "Id": 26,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4d0fbb0e6f578bea14f3f52b0a927bcc20f8b109",
    "Violation": "improper",
    "Bug report": "when adding a new axis to concatenate along, allow it to be the last axis. For example, concated 1D columns into a 2D matrix with axis=1, add_axis=1.",
    "Number of deleted lines": 1,
    "Deleted lines": "        axis_dim * after,\n        static_cast<const char*>(input.raw_data()) + input_offset,\n        input.dim32(axis_) * after,\n        output->raw_mutable_data(input.meta()),\n        axis_dim * after,\n        &context_);\n    input_offset += axis_dim * after * input.itemsize();\n  }\n  return true;\n}\n\ntemplate <class Context>\nbool ConcatOp<Context>::RunOnDevice() {\n  auto* output = Output(0);\n  TensorCPU* split = OperatorBase::Output<TensorCPU>(1);\n  split->Resize(vector<TIndex>(1, InputSize()));\n  int* axis_data = split->template mutable_data<int>();\n  auto& input_zero = Input(0);\n  CAFFE_ENFORCE_LT(axis_, input_zero.ndim(), \"Axis not in input ndim range.\");\n  for (int i = 1; i < InputSize(); ++i) {\n    CAFFE_ENFORCE(\n        Input(i).meta() == input_zero.meta(),\n        \"All inputs must have the same type, expected: \",\n        input_zero.meta().name(),\n        \" but got: \",\n        Input(i).meta().name(),\n        \" for input: \",\n        i);\n  }\n\n  int before = 1, after = 1;\n  vector<TIndex> output_dims(input_zero.dims());\n  for (int i = 0; i < input_zero.ndim(); ++i) {\n    if (i == axis_ && !add_axis_) {\n      continue;\n    }\n    int dim = input_zero.dim32(i);\n    if (i < axis_) {\n      before *= dim;"
},
{
    "Id": 27,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b2d110447190abe5d66b0b59a775cc4881f3e30e",
    "Violation": "improper",
    "Bug report": "Fixed numpy bool check",
    "Number of deleted lines": 1,
    "Deleted lines": "    bias_k: Optional[torch.Tensor]\n    bias_v: Optional[torch.Tensor]\n\n    def __init__(self, embed_dim, num_heads, dropout=0., bias=True, add_bias_kv=False, add_zero_attn=False,\n                 kdim=None, vdim=None, batch_first=False, device=None, dtype=None) -> None:\n        factory_kwargs = {'device': device, 'dtype': dtype}\n        super(MultiheadAttention, self).__init__()\n        self.embed_dim = embed_dim\n        self.kdim = kdim if kdim is not None else embed_dim\n        self.vdim = vdim if vdim is not None else embed_dim\n        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim\n\n        self.num_heads = num_heads\n        self.dropout = dropout\n        self.batch_first = batch_first\n        self.head_dim = embed_dim // num_heads\n        assert self.head_dim * num_heads == self.embed_dim, \"embed_dim must be divisible by num_heads\"\n\n        if self._qkv_same_embed_dim is False:\n            self.q_proj_weight = Parameter(torch.empty((embed_dim, embed_dim), **factory_kwargs))\n            self.k_proj_weight = Parameter(torch.empty((embed_dim, self.kdim), **factory_kwargs))\n            self.v_proj_weight = Parameter(torch.empty((embed_dim, self.vdim), **factory_kwargs))\n            self.register_parameter('in_proj_weight', None)\n        else:\n            self.in_proj_weight = Parameter(torch.empty((3 * embed_dim, embed_dim), **factory_kwargs))\n            self.register_parameter('q_proj_weight', None)\n            self.register_parameter('k_proj_weight', None)\n            self.register_parameter('v_proj_weight', None)\n\n        if bias:\n            self.in_proj_bias = Parameter(torch.empty(3 * embed_dim, **factory_kwargs))\n        else:\n            self.register_parameter('in_proj_bias', None)\n        self.out_proj = NonDynamicallyQuantizableLinear(embed_dim, embed_dim, bias=bias, **factory_kwargs)\n\n        if add_bias_kv:\n            self.bias_k = Parameter(torch.empty((1, 1, embed_dim), **factory_kwargs))\n            self.bias_v = Parameter(torch.empty((1, 1, embed_dim), **factory_kwargs))\n        else:"
},
{
    "Id": 28,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/85cbe0d8258ab06897e2f049e61f74d8aa935240",
    "Violation": "missing",
    "Bug report": "This diff is similar to D14163001. We need to handle the edge case when add_axis=1.",
    "Number of deleted lines": 1,
    "Deleted lines": "      in_dev[1] = DeviceOption();\n      return std::make_pair(in_dev, out_dev);\n    })\n    .SetDoc(R\"DOC(\nSplit a tensor into a list of tensors, given a lengths input, along the specified\n'axis'. If `K` outputs are provided, the op assumes `len(lengths) % K == 0`.\nThe `input` will be split into `K` parts. Each part of length\n`sum(lengths[i*k:i*k+k))`)DOC\");\n\nOpSchema::Cost CostInferenceForConcat(\n    const OperatorDef& def,\n    const vector<TensorShape>& in) {\n  ArgumentHelper helper(def);\n  const int axis = helper.HasArgument(\"axis\")\n      ? helper.GetSingleArgument<int>(\"axis\", -1)\n      : GetDimFromOrderString(\n            helper.GetSingleArgument<string>(\"order\", \"NCHW\"));\n  bool add_axis = helper.GetSingleArgument<int>(\"add_axis\", 0) != 0;\n  const int canonical_axis = canonical_axis_index_(axis, in[0].dims_size());\n  CAFFE_ENFORCE_GT(in.size(), 0);\n  vector<int> out_shape(in[0].dims().begin(), in[0].dims().end());\n  if (add_axis) {\n    out_shape.insert(out_shape.begin() + canonical_axis, in.size());\n  } else {\n    for (size_t i = 1; i < in.size(); ++i) {\n      out_shape[canonical_axis] += in[i].dims(canonical_axis);\n    }\n  }\n  uint64_t nElemRead = 1;\n  for (int i = 0; i < in.size(); ++i) {\n    nElemRead += nElemFromDim(in[i]);\n  }\n  int size = 1;\n  for (auto& s : out_shape) {\n    size *= s;\n  }\n\n  struct OpSchema::Cost cost;\n  cost.flops = 0;"
},
{
    "Id": 29,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4f63f348aef3da8b4d53f61098f4e32bd916c221",
    "Violation": "improper",
    "Bug report": "The bounds check was too conservative by an extra one.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n  for(int64_t d = 0; d < tensor.dim(); d++) {\n    if(d != dim || tensor.sizes()[dim] != 1) {\n      sizes.push_back(tensor.sizes()[d]);\n      strides.push_back(tensor.strides()[d]);\n    }\n  }\n  return std::make_tuple(sizes, strides);\n}\n\nstd::tuple<std::vector<int64_t>, std::vector<int64_t> >\ninferUnsqueezeGeometry(const Tensor& tensor, int64_t dim) {\n  if (tensor.numel() == 0) {\n    throw std::runtime_error(\"cannot unsqueeze empty tensor\");\n  }\n\n  std::vector<int64_t> sizes(tensor.sizes());\n  std::vector<int64_t> strides(tensor.strides());\n  int64_t new_stride = dim >= tensor.dim() - 1 ? 1 : sizes[dim] * strides[dim];\n  sizes.insert(sizes.begin() + dim, 1);\n  strides.insert(strides.begin() + dim, new_stride);\n\n  return std::make_tuple(sizes, strides);\n}\n\nTensor squeeze(const Tensor& self) {\n  auto g = inferSqueezeGeometry(self);\n  return self.as_strided(std::get<0>(g), std::get<1>(g));\n}\n\nTensor squeeze(const Tensor& self, int64_t dim) {\n  int64_t dims = self.dim();\n  dim = maybe_wrap_dim(dim, dims);\n\n  if (dims == 0 || self.sizes()[dim] != 1) {\n    return self.as_strided(self.sizes().vec(), self.strides().vec());\n  }\n  auto g = inferSqueezeGeometry(self, dim);\n  return self.as_strided(std::get<0>(g), std::get<1>(g));"
},
{
    "Id": 30,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bf32ea80942ce720b105efcd517fd11182edeb08",
    "Violation": "insufficient",
    "Bug report": " Fix dimension check in 1D instance norm, allowing 2D tensors alongsid e 3D.",
    "Number of deleted lines": 2,
    "Deleted lines": "    Shape:\n        - Input: :math:`(N, C, L)`\n        - Output: :math:`(N, C, L)` (same shape as input)\n\n    Examples::\n\n        >>> # Without Learnable Parameters\n        >>> m = nn.InstanceNorm1d(100)\n        >>> # With Learnable Parameters\n        >>> m = nn.InstanceNorm1d(100, affine=True)\n        >>> input = torch.randn(20, 100, 40)\n        >>> output = m(input)\n\n    .. _`Instance Normalization: The Missing Ingredient for Fast Stylization`:\n        https://arxiv.org/abs/1607.08022\n    \"\"\"\n\n    def _check_input_dim(self, input):\n        if input.dim() != 3:\n            raise ValueError('expected 3D input (got {}D input)'\n                             .format(input.dim()))\n\n\nclass InstanceNorm2d(_InstanceNorm):\n    r\"\"\"Applies Instance Normalization over a 4D input (a mini-batch of 2D inputs\n    with additional channel dimension) as described in the paper\n    `Instance Normalization: The Missing Ingredient for Fast Stylization`_ .\n\n    .. math::\n\n        y = \\frac{x - \\mathrm{E}[x]}{ \\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta\n\n    The mean and standard-deviation are calculated per-dimension separately\n    for each object in a mini-batch. :math:`\\gamma` and :math:`\\beta` are learnable parameter vectors\n    of size `C` (where `C` is the input size) if :attr:`affine` is ``True``.\n\n    By default, this layer uses instance statistics computed from input data in\n    both training and evaluation modes.\n\n    If :attr:`track_running_stats` is set to ``True``, during training this"
},
{
    "Id": 31,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a9deda5469a6ef73692a9dd796cc4eeba4436d6c",
    "Violation": "improper",
    "Bug report": "The at::native::_validate_sparse_coo_tensor_args only supports checking the indices on CUDA device and CPU device. To extend the function to support more device type.",
    "Number of deleted lines": 1,
    "Deleted lines": "  int64_t sparse_dim = indices.size(0);\n  int64_t dense_dim = values.dim() - 1;\n  TORCH_CHECK(\n      static_cast<int64_t>(size.size()) == sparse_dim + dense_dim,\n      \"number of dimensions must be sparse_dim (\",\n      sparse_dim,\n      \") + dense_dim (\",\n      dense_dim,\n      \"), but got \",\n      size.size());\n\n  // Check to make sure all indices are within the boundaries of `size`\n  if (indices.numel() > 0) {\n    Tensor min_indices =\n        std::get</* values */ 0>(indices.min(/* dim */ 1, /* keepdim */ false));\n    Tensor max_indices =\n        std::get</* values */ 0>(indices.max(/* dim */ 1, /* keepdim */ false));\n    Tensor cpu_min_indices, cpu_max_indices;\n    if (indices.is_cuda()) {\n      cpu_min_indices = min_indices.to(at::DeviceType::CPU);\n      cpu_max_indices = max_indices.to(at::DeviceType::CPU);\n    } else {\n      cpu_min_indices = min_indices;\n      cpu_max_indices = max_indices;\n    }\n    auto cpu_min_indices_accessor = cpu_min_indices.accessor<int64_t, 1>();\n    auto cpu_max_indices_accessor = cpu_max_indices.accessor<int64_t, 1>();\n    for (const auto d : c10::irange(sparse_dim)) {\n      // NB: This used to sync ndim times to access each entry; now we copy\n      // everything to CPU first and then access it.\n      int64_t min_index_in_dim = cpu_min_indices_accessor[d];\n      TORCH_CHECK(\n          min_index_in_dim >= 0,\n          \"found negative index \",\n          min_index_in_dim,\n          \" for dim \",\n          d);\n      int64_t max_index_in_dim = cpu_max_indices_accessor[d];\n      int64_t dim_size = size[static_cast<size_t>(d)];"
},
{
    "Id": 32,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/d9870d70c12dc59b0f8bce288910422bcb60b044",
    "Violation": "insufficient",
    "Bug report": "Exempt _foreach_norm from autograd_not_implemented_fallback check",
    "Number of deleted lines": 1,
    "Deleted lines": "          TORCH_INTERNAL_ASSERT(\n              storage_saved.at(idx_tensor).value().is_alias_of(t.storage()),\n              op_name);\n        if (impl_saved.at(idx_tensor))\n          TORCH_INTERNAL_ASSERT(\n              impl_saved.at(idx_tensor) == t.getIntrusivePtr(), op_name);\n      },\n      &stack_args_copy,\n      0,\n      num_arguments);\n  _foreach_tensor(\n      [&](size_t idx_tensor, size_t idx_ret, const at::Tensor& t) {\n        if (at::impl::tensor_has_dispatch(t) ||\n            at::impl::dispatch_mode_enabled())\n          return;\n        if (!is_inplace_output[idx_ret])\n          TORCH_INTERNAL_ASSERT(\n              t.use_count() <= 1, op_name); // Okay to return undefined tensor\n        if (!is_aliased_output[idx_ret] && t.has_storage())\n          TORCH_INTERNAL_ASSERT(t.storage().use_count() == 1);\n      },\n      stack,\n      stack->size() - num_returns,\n      num_returns);\n  // There should be only a single base-view pair, make sure their storage is\n  // aliased.\n  if (aliased_input_idx != -1 && aliased_output_idx != -1) {\n    const c10::IValue& aliased_input_iv = stack_args_copy[aliased_input_idx];\n    const c10::IValue& aliased_output_iv =\n        (*stack)[stack->size() - num_returns + aliased_output_idx];\n    TORCH_INTERNAL_ASSERT(aliased_input_iv.isTensor(), op_name);\n    TORCH_INTERNAL_ASSERT(\n        aliased_output_iv.isTensor() || aliased_output_iv.isTensorList(),\n        op_name);\n    const at::Tensor& aliased_input = aliased_input_iv.toTensor();\n    if (aliased_input.has_storage()) {\n      if (aliased_output_iv.isTensor()) {\n        const at::Tensor& aliased_output = aliased_input_iv.toTensor();\n        TORCH_INTERNAL_ASSERT("
},
{
    "Id": 33,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/98f9ff90268ae62ab6d794cce0786121bf17edc9",
    "Violation": "improper",
    "Bug report": "Fix an assertion failure involving Slice. Before this change, exporting a model to ONNX involving Slice crashes at `axes[i]` in line 153 if C++ assertions are enabled:",
    "Number of deleted lines": 1,
    "Deleted lines": "  // Checking 'axes' input, if available.\n  std::vector<int64_t> axes;\n  if (inputTensorValues.size() > 3) {\n    if (inputTensorValues[3].sizes().size() != 1) {\n      std::cerr\n          << \"Warning: Constant folding - Invalid 'axes' input found for opset >= 10 onnx::Slice op. \"\n          << \"Constant folding not applied.\" << std::endl;\n      return c10::nullopt;\n    }\n    if (inputTensorValues[3].sizes()[0] != inputTensorValues[1].sizes()[0]) {\n      // Number of elements of 'axes' and 'ends' 1-D input tensors should be the\n      // same\n      std::cerr\n          << \"Warning: Constant folding - Invalid 'axes' or 'ends' inputs found for opset >= 10 onnx::Slice op. \"\n          << \"Constant folding not applied.\" << std::endl;\n      return c10::nullopt;\n    }\n    auto axes_a = inputTensorValues[3].accessor<int64_t, 1>();\n    axes.reserve(inputTensorValues[3].sizes()[0]);\n    // ONNX slice accepts negative axis, fix this for aten op\n    for (const auto i : c10::irange(inputTensorValues[3].sizes()[0])) {\n      axes[i] = axes_a[i] < 0 ? axes_a[i] + inputTensorValues[0].sizes().size()\n                              : axes_a[i];\n    }\n  } else {\n    axes = std::vector<int64_t>(inputTensorValues[1].sizes()[0], 0);\n  }\n  // Checking 'steps' input, if available.\n  if (inputTensorValues.size() > 4) {\n    if (inputTensorValues[4].sizes().size() != 1) {\n      std::cerr\n          << \"Warning: Constant folding - Invalid 'steps' input found for opset >= 10 onnx::Slice op. \"\n          << \"Constant folding not applied.\" << std::endl;\n      return c10::nullopt;\n    }\n    if (inputTensorValues[4].sizes()[0] != inputTensorValues[1].sizes()[0]) {\n      // Number of elements of 'steps' and 'ends' 1-D input tensors should be\n      // the same\n      std::cerr"
},
{
    "Id": 34,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/71af538e31547e5b1bc814c9e00323a21905baf3",
    "Violation": "insufficient",
    "Bug report": "Updated assert to remove check on 3rd dim for MHA.  Updated assert statement to remove check on 3rd dimension (features) for keys and values in MultiheadAttention / Transform. The feature dimension for keys and values can now be of different sizes",
    "Number of deleted lines": 1,
    "Deleted lines": "        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n    \"\"\"\n    if not torch.jit.is_scripting():\n        tens_ops = (query, key, value, in_proj_weight, in_proj_bias, bias_k, bias_v,\n                    out_proj_weight, out_proj_bias)\n        if any([type(t) is not Tensor for t in tens_ops]) and has_torch_function(tens_ops):\n            return handle_torch_function(\n                multi_head_attention_forward, tens_ops, query, key, value,\n                embed_dim_to_check, num_heads, in_proj_weight, in_proj_bias,\n                bias_k, bias_v, add_zero_attn, dropout_p, out_proj_weight,\n                out_proj_bias, training=training, key_padding_mask=key_padding_mask,\n                need_weights=need_weights, attn_mask=attn_mask,\n                use_separate_proj_weight=use_separate_proj_weight,\n                q_proj_weight=q_proj_weight, k_proj_weight=k_proj_weight,\n                v_proj_weight=v_proj_weight, static_k=static_k, static_v=static_v)\n    tgt_len, bsz, embed_dim = query.size()\n    assert embed_dim == embed_dim_to_check\n    assert key.size() == value.size()\n\n    head_dim = embed_dim // num_heads\n    assert head_dim * num_heads == embed_dim, \"embed_dim must be divisible by num_heads\"\n    scaling = float(head_dim) ** -0.5\n\n    if not use_separate_proj_weight:\n        if torch.equal(query, key) and torch.equal(key, value):\n            # self-attention\n            q, k, v = linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)\n\n        elif torch.equal(key, value):\n            # encoder-decoder attention\n            # This is inline in_proj function with in_proj_weight and in_proj_bias\n            _b = in_proj_bias\n            _start = 0\n            _end = embed_dim\n            _w = in_proj_weight[_start:_end, :]\n            if _b is not None:\n                _b = _b[_start:_end]\n            q = linear(query, _w, _b)"
},
{
    "Id": 35,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b8ab3080b1043a610ba2825a2be406a1833b1d70",
    "Violation": "improper",
    "Bug report": "If kernel sizes were specified via \"kernel_w\" and \"kernel_h\", tensor size inference was incorrect in InferShapesAndTypes(): it was checking for \"helper_w\" instead of \"kernel_w\".",
    "Number of deleted lines": 1,
    "Deleted lines": "    vector<int> kernel = helper.GetRepeatedArgument<int>(\"kernels\");\n    vector<int> strides = helper.GetRepeatedArgument<int>(\"strides\");\n    vector<int> dilations = helper.GetRepeatedArgument<int>(\"dilation\");\n\n    if (helper.HasArgument(\"pad\")) {\n      pads.resize(4, helper.GetSingleArgument<int>(\"pad\", 0));\n    } else if (\n        helper.HasArgument(\"pad_t\") && helper.HasArgument(\"pad_l\") &&\n        helper.HasArgument(\"pad_b\") && helper.HasArgument(\"pad_r\")) {\n      pads.push_back(helper.GetSingleArgument<int>(\"pad_t\", 0));\n      pads.push_back(helper.GetSingleArgument<int>(\"pad_l\", 0));\n      pads.push_back(helper.GetSingleArgument<int>(\"pad_b\", 0));\n      pads.push_back(helper.GetSingleArgument<int>(\"pad_r\", 0));\n    }\n\n    if (helper.HasArgument(\"kernel\")) {\n      kernel.resize(2, helper.GetSingleArgument<int>(\"kernel\", 1));\n    } else if (\n        helper.HasArgument(\"kernel_h\") && helper.HasArgument(\"helper_w\")) {\n      kernel.push_back(helper.GetSingleArgument<int>(\"kernel_h\", 1));\n      kernel.push_back(helper.GetSingleArgument<int>(\"kernel_w\", 1));\n    }\n\n    if (helper.HasArgument(\"stride\")) {\n      strides.resize(2, helper.GetSingleArgument<int>(\"stride\", 1));\n    } else if (\n        helper.HasArgument(\"stride_h\") && helper.HasArgument(\"stride_w\")) {\n      strides.push_back(helper.GetSingleArgument<int>(\"stride_h\", 1));\n      strides.push_back(helper.GetSingleArgument<int>(\"stride_w\", 1));\n    }\n\n    if (helper.HasArgument(\"dilation\")) {\n      strides.resize(2, helper.GetSingleArgument<int>(\"dilation\", 1));\n    } else if (\n        helper.HasArgument(\"dilation_h\") && helper.HasArgument(\"dilation_w\")) {\n      strides.push_back(helper.GetSingleArgument<int>(\"dilation_h\", 1));\n      strides.push_back(helper.GetSingleArgument<int>(\"dilation_w\", 1));\n    }\n"
},
{
    "Id": 36,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/be253b8ee8a104997773d11ed28928a48193217d",
    "Violation": "improper",
    "Bug report": "The existing check isn't safe for 32-bit `size_t` because the max 64-bit int will overflow.",
    "Number of deleted lines": 1,
    "Deleted lines": "bool TensorGeometry::is_contiguous() const {\n  if (numel_ == 0) {\n    return true;"
},
{
    "Id": 37,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/128dd6b1502ad3687ffb79484b72d4cfafec496e",
    "Violation": "insufficient",
    "Bug report": "Relax the check that makes sure number of outs equals number of returns. We are trying to add an out variant for an existing operator, Notice the out argument is a mutable list of tensors. Given the fact that we don't support mutable tensor list as a return type and it seems not useful to add such a return type. The solution I'm proposing is to relax the constraint that the number of outs needs to be the same as the number of returns, so we can return a `void`.",
    "Number of deleted lines": 3,
    "Deleted lines": "        # Invariant: we expect out arguments to appear as keyword arguments in the schema.\n        # This means that all mutable returns should be aliased to a keyword argument\n        # (except for \"self\", which we explicitly don't treat as an out argument because of its use in methods)\n        # See Note [is_out_fn]\n        out_and_self = list(self.arguments.out) + [\n            arg for arg in self.arguments.flat_positional if arg.name == \"self\"\n        ]\n        mutable_returns = [\n            ret\n            for ret in self.returns\n            if ret.annotation is not None and ret.annotation.is_write\n        ]\n        for ret in mutable_returns:\n            assert any([ret.annotation == arg.annotation for arg in out_and_self]), (\n                'All mutable returns must be aliased either to a keyword argument, or to \"self\". '\n                \"Did you forget to mark an out argument as keyword-only?\"\n            )\n        if self.arguments.out:\n            assert len(self.arguments.out) == len(\n                self.returns\n            ), \"Must return as many arguments as there are out arguments\"\n        if self.name.name.inplace:\n            # TODO: fixme\n            if not is_foreach_op(str(self.name)):\n                assert len(self.returns) == 1\n\n    def is_out_fn(self) -> bool:\n        # Note [is_out_fn]\n        #\n        # out functions are the variants which take an explicit out= argument\n        # to populate into.  We need to know if a schema corresponds to an\n        # out function for several reasons:\n        #\n        #   - They codegen differently in C++ API\n        #       - codegen to at::add_out rather than at::add\n        #       - out argument is moved to front of C++ argument list\n        #\n        # out functions are DEFINED to be any function with a keyword-only\n        # argument that is mutable.  In principle, this could lead to a\n        # false positive if you define a function that mutates a\n        # kwarg only argument, but this isn't the \"true\" output of this"
},
{
    "Id": 38,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/9c3cb6e652e6033e355cef92229fde5b0baf271b",
    "Violation": "improper",
    "Bug report": "Fix stride checks in gemm dispatch.  lda: \"When transa = 'N' or 'n', then lda must be at least max(1, m), otherwise lda must be at least max(1, k). When transb = 'N' or 'n', then ldb must be at least max(1, k), otherwise ldb must be at least max(1, n).",
    "Number of deleted lines": 2,
    "Deleted lines": "  {\n    if(k == 1)\n      lda = m;\n  }\n\n  if(transb_)\n  {\n    if(k == 1)\n      ldb = n;\n  }\n  else\n  {\n    if(n == 1)\n      ldb = k;\n  }\n\n#if defined(USE_BLAS) && (defined(TH_REAL_IS_DOUBLE) || defined(TH_REAL_IS_FLOAT))\n  if( (m <= INT_MAX) && (n <= INT_MAX) && (k <= INT_MAX) &&\n      (lda >= THMax(1, (transa_ ? m : k))) && (lda <= INT_MAX) &&\n      (ldb >= THMax(1, (transb_ ? k : n))) && (ldb <= INT_MAX) &&\n      (ldc >= THMax(1, n)) && (ldc <= INT_MAX) )\n  {\n    int i_m = (int)m;\n    int i_n = (int)n;\n    int i_k = (int)k;\n    int i_lda = (int)lda;\n    int i_ldb = (int)ldb;\n    int i_ldc = (int)ldc;\n\n#if defined(TH_REAL_IS_DOUBLE)\n    dgemm_(&transa, &transb, &i_m, &i_n, &i_k, &alpha, a, &i_lda, b, &i_ldb, &beta, c, &i_ldc);\n#else\n    sgemm_(&transa, &transb, &i_m, &i_n, &i_k, &alpha, a, &i_lda, b, &i_ldb, &beta, c, &i_ldc);\n#endif\n    return;\n  }\n#endif\n  {\n    int64_t i, j, l;\n    if(!transa_ && !transb_)"
},
{
    "Id": 39,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/7f125bca1cd42ebd8e07c97f1bd1682dff5cf387",
    "Violation": "insufficient",
    "Bug report": "Add pin_memory check in empty_strided. Add the false checking if pin_memory has been specified to `False`",
    "Number of deleted lines": 1,
    "Deleted lines": "      !options.has_pinned_memory(),\n      \"'pin_memory' argument is incompatible with Metal tensor\");\n  TORCH_CHECK(\n      !options.has_memory_format() && !memory_format,\n      \"'memory_format' argument is incompatible with Metal tensor\");\n  MetalTensor mt{size.vec()};\n  return MetalTensor::toTensor(\n      std::move(mt), at::device(at::kMetal).dtype(options.dtype()));\n};\n\nat::Tensor empty_strided(\n    IntArrayRef size,\n    IntArrayRef stride,\n    optional<ScalarType> dtype,\n    optional<Layout> layout,\n    optional<Device> device,\n    optional<bool> pin_memory) {\n  TORCH_CHECK(\n      !pin_memory.has_value(),\n      \"'pin_memory' argument is incompatible with Metal tensor\");\n  MetalTensor mt{size.vec(), stride.vec()};\n  return MetalTensor::toTensor(\n      std::move(mt), at::device(at::kMetal).dtype(dtype));\n}\n\nTensor addmm(\n    const Tensor& bias,\n    const Tensor& input,\n    const Tensor& weight,\n    Scalar beta,\n    Scalar alpha) {\n  TORCH_CHECK(input.is_metal());\n  TORCH_CHECK(input.dim() == 2 && weight.dim() == 2);\n  TORCH_CHECK(beta.toFloat() == 1.0f);\n  TORCH_CHECK(alpha.toFloat() == 1.0f);\n  auto&& sizes = weight.sizes();\n  at::Tensor transposedWeight = weight.t().contiguous();\n  at::Tensor mWeight =\n      transposedWeight.view({sizes[1], sizes[0], 1, 1}).contiguous();"
},
{
    "Id": 40,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f02b7a9c36dd6182da694bc47a5c345285dfd951",
    "Violation": "improper",
    "Bug report": "don't error when unused fill value is zero. In the python version of `F.pad`, checking that the fill value was left as default was done by comparing against zero. So if someone does explicitly pass in a zero-value, then this `TORCH_CHECK` was an accidental BC-break.",
    "Number of deleted lines": 4,
    "Deleted lines": "      out_slice = out.slice(dim, out_shape[dim] - pad_r, out_shape[dim]);\n      in_slice = out.slice(dim, std::max(pad_l, zero), std::max(pad_l, zero) + pad_r);\n      out_slice.copy_(in_slice);\n    }\n  }\n\n  return out;\n}\n\nTensor _pad_enum(const Tensor &self, IntArrayRef pad, int64_t mode_int, c10::optional<double> value) {\n  const auto input_dim = self.dim();\n  TORCH_CHECK(pad.size() % 2 == 0, \"Padding length must be divisible by 2\");\n  TORCH_CHECK(static_cast<int64_t>(pad.size()) <= input_dim * 2, \"Padding length too large\");\n  auto mode = static_cast<at::padding_mode>(mode_int);\n\n  if (mode == at::padding_mode::constant) {\n    return at::constant_pad_nd(self, pad, value.value_or(0.0));\n  }\n  TORCH_CHECK(\n      !value.has_value(), \"Padding mode \\\"\",\n      padding_mode_string(mode),\n      \"\\\" doesn't take in value argument\");\n\n  if (pad.size() == 2 && (input_dim == 2 || input_dim == 3)) {\n    switch (mode) {\n      case at::padding_mode::reflect: return at::reflection_pad1d(self, pad);\n      case at::padding_mode::replicate: return at::replication_pad1d(self, pad);\n      case at::padding_mode::circular: return at::_pad_circular(self, pad);\n      default: {}\n    }\n  } else if(pad.size() == 4 && (input_dim == 3 || input_dim == 4)) {\n    switch (mode) {\n      case at::padding_mode::reflect: return at::reflection_pad2d(self, pad);\n      case at::padding_mode::replicate: return at::replication_pad2d(self, pad);\n      case at::padding_mode::circular: return at::_pad_circular(self, pad);\n      default: {}\n    }\n  } else if (pad.size() == 6 && (input_dim == 4 || input_dim == 5)) {\n    switch (mode) {\n      case at::padding_mode::reflect: return at::reflection_pad3d(self, pad);\n      case at::padding_mode::replicate: return at::replication_pad3d(self, pad);\n      case at::padding_mode::circular: return at::_pad_circular(self, pad);"
},
{
    "Id": 41,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/75be4f9cdb503d6eff189b2bc5c05d96bff66653",
    "Violation": "insufficient",
    "Bug report": " check tensor has storage before refer to tensor data ptr. In the exporter dedupe initializers passes, check the tensor has storage before reference to tensor's data_ptr, otherwise it will result in a crash.",
    "Number of deleted lines": 1,
    "Deleted lines": "      auto id_node = g->create(onnx::Identity);\n      id_node->insertAfter(g->block()->param_node());\n      id_node->addInput(*it);\n      id_node->output()->copyMetadata(v);\n      id_node->copyMetadata(g->block()->param_node());\n      v->replaceAllUsesWith(id_node->output());\n    }\n  }\n  for (auto it = inputsIndicesToRemove.rbegin();\n       it != inputsIndicesToRemove.rend();\n       ++it) {\n    valsToParamsMap.erase(g->inputs().at(*it));\n    g->eraseInput(*it);\n  }\n}\n\nbool DeduplicateInitializersByDataPtr(at::Tensor& t1, at::Tensor& t2) {\n  return t1.sizes().equals(t2.sizes()) && t1.strides().equals(t2.strides()) &&\n      (t1.data_ptr() == t2.data_ptr());\n}\n\nbool DeduplicateInitializersByValue(at::Tensor& t1, at::Tensor& t2) {\n  if (t1.dtype() != t2.dtype() || !t1.sizes().equals(t2.sizes()) ||\n      !t1.strides().equals(t2.strides())) {\n    return false;\n  }\n\n  if (t1.device() != t2.device()) {\n    return t1.to(\"cpu\").equal(t2.to(\"cpu\"));\n  }\n\n  return t1.equal(t2);\n}\n\nvoid DeduplicateInitializers(\n    std::shared_ptr<Graph>& g,\n    std::map<std::string, IValue>& paramsDict,\n    bool is_train) {\n  auto valsToParamsMap = buildValueToParamsMap(g->block(), paramsDict);"
},
{
    "Id": 42,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a3701b674046bcefb5927a6643364b186f77dbcf",
    "Violation": "unnecessary",
    "Bug report": "fix backward bug for custom device. In the backward on some device , it may get an error to get device index because of exchange a new thread. So just set_device and check the device index in `setDevice`  func may be better for some many kinds of devices. For CUDA, the device index check is also included in `setDevice`  func",
    "Number of deleted lines": 2,
    "Deleted lines": "    outputs = (*hook)(outputs, inputs);\n  }\n  return outputs;\n}\n\nvoid set_device(int device) {\n  // NB: We MUST NOT construct the guard for device CPU,\n  // as in some settings we compile with cuda, but\n  // have lazy stubs for CUDA functionality (so actually\n  // attempting to setup a guard(CPU_DEVICE) will cause an\n  // error, because it will still query cudaGetDevice).\n  //\n  // Don't use DeviceGuard here because its destructor may be called before the\n  // device is reset. This is fine because the device is thread local.\n  if (device != CPU_DEVICE) {\n    for (const auto i : c10::irange(static_cast<size_t>(\n             c10::DeviceType::COMPILE_TIME_MAX_DEVICE_TYPES))) {\n      auto* impl = c10::impl::device_guard_impl_registry[i].load();\n      if (impl && device < impl->deviceCount() &&\n          impl->getDevice().index() != device) {\n        impl->setDevice(at::Device(static_cast<c10::DeviceType>(i), device));\n      }\n    }\n  }\n  worker_device = device;\n}\n\nvoid validate_outputs(\n    const edge_list& edges,\n    variable_list& grads,\n    const std::function<std::string(const std::string&)>& format_error) {\n  if (grads.size() != edges.size()) {\n    std::stringstream ss;\n    ss << \"invalid number of gradients - expected \";\n    ss << edges.size() << \", but got \" << grads.size();\n    AT_ERROR(format_error(ss.str()));\n  }\n  for (const auto i : c10::irange(grads.size())) {\n    const auto& edge = edges[i];\n    if (!edge.is_valid())"
},
{
    "Id": 43,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/6f5945e4bb1258d39a2878a08a910fcc8f659d5e",
    "Violation": "improper",
    "Bug report": "triton supports devices < 7.0, not 6.0. triton is still buggy with Pascal devices, so make the error checker reflect that. Also, this < 6.0 never worked, as the `has_triton` definition in utils.py was checking >= 7.0.",
    "Number of deleted lines": 2,
    "Deleted lines": "\n        node, *epilogue = scheduler_node.get_nodes()\n        node.allocate()\n        template_codegen(self, node, epilogue)\n        self.free_buffers()\n\n    def create_backend(self, device: torch.device):\n        assert (\n            device.type != \"cuda\" or device.index is not None\n        ), f\"{device} should have been normalized in lowering\"\n        V.graph.device_types.add(device.type)\n        if device.type == \"cpu\":\n            from .codegen.cpp import CppScheduling\n\n            return CppScheduling(self)\n        else:\n            if not has_triton():\n                device_props = torch.cuda.get_device_properties(device)\n                if device_props.major < 6:\n                    raise RuntimeError(\n                        f\"Found {device_props.name} which is too old to be supported by the triton GPU compiler, which is used as the backend. Triton only supports devices of CUDA Capability >= 6.0, but your device is of CUDA capability {device_props.major}.{device_props.minor}\"  # noqa: B950\n                    )\n                else:\n                    raise RuntimeError(\n                        \"Cannot find a working triton installation. More information on installing Triton can be found at https://github.com/openai/triton\"  # noqa: B950\n                    )\n            from .codegen.triton import TritonScheduling\n\n            return TritonScheduling(self)\n\n    def get_backend(self, device: torch.device):\n        if device not in self.backends:\n            self.backends[device] = self.create_backend(device)\n        return self.backends[device]\n\n    @dynamo_utils.dynamo_timed\n    def codegen(self):\n        for node in self.nodes:\n            self.buffer_names_no_longer_needed.update(node.last_usage)\n\n            if not isinstance(node, NopKernelSchedulerNode):"
},
{
    "Id": 44,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/871b5caae76185cff141c522b3133e7543c8dabf",
    "Violation": "improper",
    "Bug report": "Fix hpu deserialization bug. fix hpu deserialization bug. It should check hpu model if and only if location start with hpu. Otherwise, it always raise an AssertError if hpu is not imported. This break the serialization/desirialization functionality abourt other third-party like IPEX. only assert hpu model when start with hpu",
    "Number of deleted lines": 2,
    "Deleted lines": "    device = hpu._utils._get_device_index(location, optional=True)\n\n    if not hpu.is_available():\n        raise RuntimeError('Attempting to deserialize object on a HPU '\n                           'device but torch.hpu.is_available() is False. '\n                           'If you are running on a CPU-only machine, '\n                           'please use torch.load with map_location=torch.device(\\'cpu\\') '\n                           'to map your storages to the CPU.')\n    device_count = hpu.device_count()\n    if device >= device_count:\n        raise RuntimeError('Attempting to deserialize object on HPU device '\n                           f'{device} but torch.hpu.device_count() is {device_count}. Please use '\n                           'torch.load with map_location to map your storages '\n                           'to an existing device.')\n    return device\n\n\ndef _hpu_deserialize(obj, location):\n    hpu = getattr(torch, \"hpu\", None)\n    assert hpu is not None, \"HPU device module is not loaded\"\n    if location.startswith('hpu'):\n        device = validate_hpu_device(location)\n        if getattr(obj, \"_torch_load_uninitialized\", False):\n            with hpu.device(device):\n                return torch.UntypedStorage(obj.nbytes(), device=torch.device(location))\n        else:\n            return obj.hpu(device)\n\n\ndef _mps_deserialize(obj, location):\n    if location.startswith('mps'):\n        return obj.mps()\n\n\ndef _meta_deserialize(obj, location):\n    if location == 'meta':\n        return torch.UntypedStorage(obj.nbytes(), device='meta')\n\n\ndef _validate_privateuse1_device(location, backend_name):\n    device = torch.device(location)"
},
{
    "Id": 45,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/6592259ea52f45e1fc9a633ccb5b154ba5099334",
    "Violation": "insufficient",
    "Bug report": "As per torch.jit.load documentation, all previously saved modules, irrespective of their device, are first loaded onto CPU, and then are moved to the devices they were saved from. So far, supported devices included CPU and CUDA only. To enable torch.jit.load for HPU, additional check for HPU is introduced.",
    "Number of deleted lines": 2,
    "Deleted lines": "          storage_context_->addStorage(key, storage);\n        }\n      }\n\n      auto options = at::CPU(type).options();\n      if (use_storage_device_) {\n        options = options.device(storage.device());\n        device = storage.device();\n      }\n\n      at::Tensor tensor;\n      if (options.backend() == c10::Backend::QuantizedCPU) {\n        tensor = at::_empty_affine_quantized({}, options, 0, 0)\n                     .set_(storage, 0, {}, {});\n      } else {\n        tensor = at::empty({0}, options).set_(storage);\n      }\n\n      if (device.is_cuda() || device.is_xpu() || device.is_meta()) {\n        tensor = tensor.to(device, tensor.scalar_type());\n      } else if (device.type() != DeviceType::CPU) {\n        AT_ERROR(\n            \"supported devices include CPU and CUDA, however got \",\n            DeviceTypeName(device.type(), false));\n      }\n      stack_.emplace_back(std::move(tensor));\n    } break;\n    default: {\n      AT_ERROR(\n          \"Unknown opcode for unpickling at \",\n          reinterpret_cast<void*>(opcode),\n          \": \",\n          int(static_cast<uint8_t>(opcode)));\n    } break;\n  }\n  return opcode;\n}\n\nvoid Unpickler::readGlobal(\n    const std::string& module_name,\n    const std::string& class_name) {\n  // TODO [unpickler refactor] __main__ isn't used by the pickler anymore, this\n  // is only here for bc-compatibility reasons"
},
{
    "Id": 46,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/1becd2c314f45bded8d3fbec91d785e7190b4afe",
    "Violation": "insufficient",
    "Bug report": "Align checks in _use_cudnn_ctc_loss with those in _cudnn_ctc_loss.This PR is intended to fix the following problem: When using `CTCLoss`, there is a cudnn path gated by a call to [`_use_cudnn_ctc_loss`] which checks some conditions. However, there are more checks in `_cudnn_ctc_loss`.  some of which are not present in `_use_cudnn_ctc_loss` (e.g. the check that `targets` is on CPU which will cause a RuntimeError after dispatching to `_cudnn_ctc_loss`). Instead, these checks should be in `_use_cudnn_ctc_loss` so that the normal `_ctc_loss` path will be used if the checks are not met)",
    "Number of deleted lines": 1,
    "Deleted lines": "#include <ATen/cudnn/Utils.h>\n\n#include <ATen/TensorUtils.h>\n#include <c10/util/irange.h>\n\nnamespace at { namespace native {\n\nbool _use_cudnn_ctc_loss(\n    const Tensor& log_probs,\n    const Tensor& targets,\n    IntArrayRef input_lengths,\n    IntArrayRef target_lengths,\n    int64_t BLANK) {\n  auto& ctx = at::globalContext();\n\n  bool use_cudnn = ctx.userEnabledCuDNN() && (BLANK == 0) &&\n      (targets.dim() == 1) && (log_probs.scalar_type() == at::kFloat) &&\n      (targets.scalar_type() == at::kInt) &&\n      (log_probs.device().type() == at::kCUDA);\n\n  if (use_cudnn) {\n    // we don't know that input_lengths and target_lengths have the same size\n    // (they should, but we didn't check yet)\n    int64_t max_input_length = log_probs.size(0);\n    for (const auto input_length : input_lengths) {\n      use_cudnn = use_cudnn && ((input_length == max_input_length) ? 1 : 0);\n    }\n    for (const auto b : c10::irange(target_lengths.size())) {\n      // target length < 256 is documented, but we see illegal memory accesses\n      // when target lengths > input lengths for CuDNN\n      use_cudnn =\n          use_cudnn && (target_lengths[b] < 256) && (target_lengths[b] <= input_lengths[b]);\n    }\n  }\n  return use_cudnn;\n}\n\nbool _use_cudnn_ctc_loss_tensor(\n    const Tensor& log_probs,"
},
{
    "Id": 47,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a076a74f1118da171cf70d00d1de4abbe27cf85d",
    "Violation": "insufficient",
    "Bug report": " Add xpu device in assertion for nested tensor creation",
    "Number of deleted lines": 2,
    "Deleted lines": "NestedTensorImpl::NestedTensorImpl(\n    Storage storage,\n    c10::DispatchKeySet key_set,\n    const caffe2::TypeMeta data_type,\n    at::Tensor nested_sizes,\n    at::Tensor nested_strides,\n    at::Tensor storage_offsets)\n    : TensorImpl(std::move(storage), key_set, data_type),\n      nested_sizes_(std::move(nested_sizes)),\n      nested_strides_(std::move(nested_strides)),\n      storage_offsets_(std::move(storage_offsets)),\n      opt_sizes_(c10::nullopt) {\n  C10_LOG_API_USAGE_ONCE(\"torch.NestedTensor\");\n  TORCH_WARN_ONCE(\n      \"The PyTorch API of nested tensors is in prototype stage and will change \"\n      \"in the near future.\");\n  auto storage_device = storage_.device();\n  TORCH_INTERNAL_ASSERT(\n      storage_device.is_cpu() || storage_device.is_cuda() || storage_device.is_privateuseone(),\n      \"NestedTensorImpl storage must be either CUDA, CPU or \", get_privateuse1_backend(), \" but got \",\n      storage_device);\n  validate_nested_tensor_metadata(nested_sizes_, nested_strides_, storage_offsets_);\n  refresh_dim();\n  set_custom_sizes_strides(c10::TensorImpl::SizesStridesPolicy::CustomSizes);\n}\n\nNestedTensorImpl::NestedTensorImpl(\n    at::Tensor buffer,\n    at::Tensor nested_sizes,\n    at::Tensor nested_strides,\n    at::Tensor storage_offsets)\n    : NestedTensorImpl(\n          buffer.storage(),\n          generate_nested_key_set_from_buffer(buffer),\n          buffer.dtype(),\n          nested_sizes,\n          nested_strides,\n          storage_offsets) {\n\n  TORCH_INTERNAL_ASSERT("
},
{
    "Id": 48,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/097defb1608827d82b18b27adeec0a98b72a9281",
    "Violation": "insufficient",
    "Bug report": "only check when world size > num_devices per host",
    "Number of deleted lines": 1,
    "Deleted lines": "\n    def _get_or_create_default_group(self):\n        default_initialized = is_initialized()\n        if not default_initialized:\n            init_process_group()\n\n        world_size = get_world_size()\n        if self.mesh.numel() > world_size:\n            raise RuntimeError(\n                f\"Mesh should not be bigger than default world size, but found {self.mesh.numel()} ranks!\"\n            )\n\n        device_handle = _get_device_handle(self.device_type)\n        # TODO: if user want to pass pg_options, offer a way to do it\n        if not default_initialized and device_handle:\n            # automatically set the current cuda/cuda-like device base on num of gpu devices available in each host\n            # NOTE: This device selection would only work for homogeneous hardware.\n            num_devices_per_host = device_handle.device_count()\n            if world_size % num_devices_per_host != 0:\n                raise RuntimeError(\n                    f\"DeviceMesh only support homogeneous hardware, but found \"\n                    f\"{world_size} ranks and {num_devices_per_host} {self.device_type} devices!\"\n                )\n            device_handle.set_device(get_rank() % num_devices_per_host)\n\n        # calculate the coordinates of the current global rank on the mesh\n        rank_coords = (self.mesh == get_rank()).nonzero()\n        assert rank_coords.size(0) in (0, 1)\n        self._coordinate_on_dim: Optional[List[int]] = (\n            rank_coords[0].tolist() if rank_coords.size(0) > 0 else None\n        )\n        return _get_default_group()\n\n    def _validate_mesh(self):\n        # check mesh tensor validity\n        unique_mesh_values = self.mesh.unique(sorted=True)\n        if unique_mesh_values.numel() != self.mesh.numel():\n            raise RuntimeError(\n                f\"DeviceMesh cannot have duplicate values, but found {self.mesh.tolist()}\""
},
{
    "Id": 49,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/57af1ec14594a73c8f2b73bf70c04ba7efeb6eab",
    "Violation": "improper",
    "Bug report": "observers: use torch.all to check for valid min and max values. Using `torch.all` instead of `torch.sum` and length check. It's unclear whether the increase in perf (~5% for small inputs) is real, but should be a net benefit, especially for larger channel inputs.",
    "Number of deleted lines": 1,
    "Deleted lines": "            max_val: Maximum values per channel\n\n        Returns:\n            scales: Scales tensor of shape (#channels,)\n            zero_points: Zero points tensor of shape (#channels,)\n        \"\"\"\n        if min_val.numel() == 0 or max_val.numel() == 0:\n            warnings.warn(\n                \"must run observer before calling calculate_qparams.\\\n                                    Returning default scale and zero point \"\n            )\n            return torch.tensor([1.0]), torch.tensor([0])\n\n        if min_val.dim() == 0 or max_val.dim() == 0:\n            assert min_val <= max_val, \"min {} should be less than max {}\".format(\n                min_val, max_val\n            )\n        else:\n            assert torch.sum(min_val <= max_val) == len(min_val), \"min {} should be less than max {}\".format(\n                min_val, max_val\n            )\n\n        quant_min, quant_max = self._calculate_qmin_qmax()\n        min_val_neg = torch.min(min_val, torch.zeros_like(min_val))\n        max_val_pos = torch.max(max_val, torch.zeros_like(max_val))\n\n        scale = torch.ones(min_val_neg.size(), dtype=torch.float32)\n        zero_point = torch.zeros(min_val_neg.size(), dtype=torch.int64)\n        device = 'cuda' if min_val_neg.is_cuda else 'cpu'\n\n        if self.qscheme == torch.per_tensor_symmetric or self.qscheme == torch.per_channel_symmetric:\n            max_val_pos = torch.max(-min_val_neg, max_val_pos)\n            scale = max_val_pos / (float(quant_max - quant_min) / 2)\n            scale = torch.max(scale, self.eps)\n            if self.dtype == torch.quint8:\n                if self.has_customized_qrange:\n                    # When customized quantization range is used, down-rounded midpoint of the range is chosen.\n                    zero_point = zero_point.new_full(zero_point.size(), (quant_min + quant_max) // 2)\n                else:"
},
{
    "Id": 50,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/07f0f383fa23e63eca164036ab58ab983e9437eb",
    "Violation": "unnecessary",
    "Bug report": "update tensor-like to check instance for torch function impl. tensor like should check the instance for a torch function impl, not the type",
    "Number of deleted lines": 1,
    "Deleted lines": "\n    >>> is_tensor_like(6)\n    False\n    >>> is_tensor_like(None)\n    False\n    >>> class NotATensor: ...\n    >>> is_tensor_like(NotATensor())\n    False\n\n    But, they can be made Tensor-like by implementing __torch_function__.\n\n    >>> class TensorLike:\n    ...     @classmethod\n    ...     def __torch_function__(cls, func, types, args, kwargs):\n    ...         return -1\n    >>> is_tensor_like(TensorLike())\n    True\n    \"\"\"\n    return type(inp) is torch.Tensor or hasattr(type(inp), \"__torch_function__\")\n\nclass TorchFunctionMode:\n    \"\"\"\n    A ``TorchFunctionMode`` allows you to override the meaning of all\n    ``__torch_function__`` overrideable functions within a dynamic scope,\n    without having to actually create a tensor subclass or manually\n    monkey-patch functions in the PyTorch API.  Some common situations\n    where you should use a mode:\n\n        * You want to override the meaning of factory functions, or other\n          functions that do not otherwise take a tensor as an argument\n          (these cannot be overridden with tensor subclasses).\n\n        * You want to override the behavior of all functions without needing\n          to wrap your inputs in tensor subclasses; e.g., if you are just\n          interested in logging intermediate computations.\n\n        * You want to control the order of execution of various tensor\n          subclasses explicitly, rather than implicitly via the return of\n          ``NotImplemented``."
},
{
    "Id": 51,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b90db4a78f8d760377a81a5a64d03ab4b67599de",
    "Violation": "improper",
    "Bug report": "Fix type checking to accept both Iter and Map DataPipe",
    "Number of deleted lines": 1,
    "Deleted lines": "    def __iter__(self):\n        while True:\n            yield None\n\n\ndef _get_distributed_settings():\n    if dist.is_available() and dist.is_initialized():\n        return dist.get_world_size(), dist.get_rank()\n    else:\n        return 1, 0\n\n\ndef _sharding_worker_init_fn(worker_init_fn, world_size, rank_id, worker_id):\n    global_worker_id = worker_id\n    info = torch.utils.data.get_worker_info()\n    assert info is not None\n    total_workers = info.num_workers\n    datapipe = info.dataset\n    assert isinstance(datapipe, IterDataPipe)\n    # To distribute elements across distributed process evenly, we should shard data on distributed\n    # processes first then shard on worker processes\n    total_workers *= world_size\n    global_worker_id = global_worker_id * world_size + rank_id\n    torch.utils.data.graph_settings.apply_sharding(datapipe, total_workers, global_worker_id)\n    if worker_init_fn is not None:\n        worker_init_fn(worker_id)\n\n\ndef _share_dist_seed(generator, pg):\n    _shared_seed = torch.empty((), dtype=torch.int64).random_(generator=generator)\n    if isinstance(pg, dist.ProcessGroup):\n        dist.broadcast(_shared_seed, src=0, group=pg)\n    return _shared_seed.item()\n\n\nclass DataLoader(Generic[T_co]):\n    r\"\"\"\n    Data loader. Combines a dataset and a sampler, and provides an iterable over\n    the given dataset."
},
{
    "Id": 52,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/63cbdc92a750a667ffdcfbdac563d02db6fd9559",
    "Violation": "improper",
    "Bug report": "switching the exact check to isinstance check. Simplifying a type check if an object is a SymIntNode in `is_symint_node`",
    "Number of deleted lines": 2,
    "Deleted lines": "#include <torch/csrc/utils/six.h>\n\n#include <ATen/PythonTorchFunctionTLS.h>\n#include <ATen/core/Tensor.h>\n#include <c10/util/Exception.h>\n#include <c10/util/irange.h>\n\n#include <c10/core/SymIntNodeImpl.h>\n#include <array>\n#include <cstddef>\n#include <memory>\n#include <sstream>\n#include <string>\n#include <vector>\n\nnamespace torch {\ninline bool is_symint_node(py::handle obj) {\n  auto static tp_symn = py::type::of<c10::SymIntNodeImpl>();\n  // TODO: switch this to `isinstance`\n  if (obj.get_type().equal(tp_symn)) {\n    TORCH_CHECK(\n        !jit::tracer::isTracing(), \"JIT tracing of SymInts isn't supported!\");\n    return true;\n  }\n  return false;\n}\n} // namespace torch\n\nnamespace pybind11 {\nnamespace detail {\ntemplate <>\nstruct type_caster<c10::SymInt> {\n public:\n  PYBIND11_TYPE_CASTER(c10::SymInt, _(\"SymInt\"));\n  bool load(py::handle src, bool) {\n    if (torch::is_symint_node(src)) {\n      value = src.cast<c10::SymIntNodeImpl*>()->toSymInt();\n      return true;\n    }\n"
},
{
    "Id": 53,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/92ebb04f9206882e6d312a8b91318545f43a53c2",
    "Violation": "insufficient",
    "Bug report": "added check for NumberType",
    "Number of deleted lines": 3,
    "Deleted lines": "            getAugOp(stmt, sliceable->type()),\n            {rhs},\n            {},\n            indexed);\n        graph->insert(\n            aten::index_put_,\n            {slicedArg, indices, augmented},\n            {},\n            stmt.range());\n      }\n    } else {\n      emitAugAssignmentGeneric(stmt, lhs, sliceable);\n    }\n  }\n\n  NamedValue emitValueToTensor(\n      const NamedValue& value,\n      const NamedValue& matchTypeOf) {\n    // Add implicit conversion of int/float/bool types to tensors\n    // Used in emitSubscriptAssign to convert:\n    //   `tensor(...)[x] = 99` to `tensor(...)[x] = tensor(99)`\n    // Mirrors the `valueToTensor` behavior in python_variable_indexing.cpp\n    const auto kind = value.type()->kind();\n    if (kind == c10::TypeKind::IntType || kind == c10::TypeKind::BoolType ||\n        kind == c10::TypeKind::FloatType) {\n      auto dtype = graph->insert(prim::dtype, {matchTypeOf}, {});\n      auto device = graph->insert(prim::device, {matchTypeOf}, {});\n      auto converted = graph->insert(\n          aten::tensor,\n          {value},\n          {NamedValue(\"dtype\", dtype), NamedValue(\"device\", device)});\n      return NamedValue(value.loc(), converted);\n    }\n\n    return value;\n  }\n\n  // Emit mutating assignments like `foo[0] = bar`\n  void emitSubscriptAssign(\n      const SourceRange& stmtRange,\n      const Subscript& lhs,\n      const Expr& rhs) {\n    emitSubscriptAssign(stmtRange, lhs, NamedValue(rhs.range(), emitExpr(rhs)));\n  }\n"
},
{
    "Id": 54,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/fe6aa0844466e5dd2669092eac5edde153108b28",
    "Violation": "improper",
    "Bug report": "Don't delegate to `operator=` for construction. Catch hypothetical addition of a new Scalar type via debug assertion rather than checking in prod.",
    "Number of deleted lines": 5,
    "Deleted lines": "  IValue() : tag(Tag::None) {}\n  bool isNone() const {\n    return Tag::None == tag;\n  }\n  std::string toNone() const {\n    AT_ASSERT(isNone());\n    return \"None\";\n  }\n\n  static IValue uninitialized() {\n    auto i = IValue();\n    i.tag = Tag::Uninitialized;\n    return i;\n  }\n\n  // Scalar, which gets encoded as either an Int, a Double or a ComplexDouble\n  IValue(const at::Scalar& s) : IValue() {\n    if (s.isFloatingPoint()) {\n      *this = s.toDouble();\n    } else if (s.isComplex()) {\n      *this = s.toComplexDouble();\n    } else if (s.isBoolean()) {\n      *this = s.toBool();\n    } else if (s.isIntegral(false)) {\n      *this = s.toLong();\n    } else {\n      TORCH_CHECK(false, \"Unknown type in Scalar\");\n    }\n  }\n\n  bool isScalar() const {\n    return isDouble() || isInt() || isComplexDouble() || isBool();\n  }\n\n  at::Scalar toScalar() const {\n    if (isDouble())\n      return toDouble();\n    else if (isInt())\n      return toInt();\n    else if (isComplexDouble())\n      return toComplexDouble();\n    else if (isBool())\n      return toBool();\n    throw std::runtime_error(\"IValue is not a Scalar\");\n  }\n\n  // Device"
},
{
    "Id": 55,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/35e7ac3fa17bc20d982ea69440d30cd9658dff25",
    "Violation": "insufficient",
    "Bug report": "This fixes a bug in singleCheckErrors introduced by #69437 (thanks Lezcano for the catch). Checking existence of a substring in a larger string is done with (name.find(text) != name.npos) but we omitted the second half of the check.",
    "Number of deleted lines": 3,
    "Deleted lines": "  if (info < 0) {\n    TORCH_INTERNAL_ASSERT(false, name, batch_string,\n        \": Argument \", -info, \" has illegal value. Most certainly there is a bug in the implementation calling the backend library.\");\n  } else if (info > 0) {\n    if (name.find(\"inv\") != name.npos) {\n      // inv, inverse, cholesky_inverse, etc.\n      TORCH_CHECK_LINALG(false, name, batch_string,\n          \": The diagonal element \", info, \" is zero, the inversion could not be completed because the input matrix is singular.\");\n    } else if (name.find(\"solve\") != name.npos) {\n      // solve, linalg_solve, cholesky_solve, etc.\n      TORCH_CHECK_LINALG(false, name, batch_string,\n          \": The diagonal element \", info, \" is zero, the solve could not be completed because the input matrix is singular.\");\n    } else if (name.find(\"cholesky\") != name.npos) {\n      TORCH_CHECK_LINALG(false, name, batch_string,\n          \": The factorization could not be completed because the input is not positive-definite (the leading minor of order \", info, \" is not positive-definite).\");\n    } else if (name.find(\"svd\") != name.npos) {\n      TORCH_CHECK_LINALG(false, name, batch_string,\n          \": The algorithm failed to converge because the input matrix is ill-conditioned or has too many repeated singular values (error code: \", info, \").\");\n    } else if (name.find(\"eig\") || name.find(\"syevd\")) {\n      TORCH_CHECK_LINALG(false, name, batch_string,\n          \": The algorithm failed to converge because the input matrix is ill-conditioned or has too many repeated eigenvalues (error code: \", info, \").\");\n    } else if (name.find(\"lstsq\")) {\n      TORCH_CHECK_LINALG(false, name, batch_string,\n          \": The least squares solution could not be computed because the input matrix does not have full rank (error code: \", info, \").\");\n    } else if (name.find(\"lu_factor\")) {\n      TORCH_CHECK(false, name, batch_string,\n          \": U[\", info, \",\", info, \"] is zero and using it on lu_solve would result in a division by zero. \"\n          \"If you still want to perform the factorization, consider calling linalg.lu(A, pivot) or \"\n          \"linalg.lu_factor_ex(A, pivot)\");\n    } else {\n      TORCH_INTERNAL_ASSERT(false, name, \": Unknown error code: \", info, \".\");\n    }\n  }\n}\n\n/*\n * Given a vector of int64_t infos, obtained after a batch operations,\n * this function checks if the computation over all these batches has been\n * successful (info = 0) or not, and report in case of the latter.\n */\nstatic inline void batchCheckErrors(const std::vector<int64_t>& infos, const c10::string_view name) {\n  for (size_t i = 0; i < infos.size(); i++) {\n    auto info = infos[i];\n    singleCheckErrors(info, name, i);\n  }"
},
{
    "Id": 56,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a7cc6531399300f999a404718827e2a94c115aaf",
    "Violation": "insufficient",
    "Bug report": "Summary:GCC version check is currently being skipped when using the newly released CUDA 9.1. This will also handle other CUDA 9.x minor releases if any, reducing our work if there are such releases like 9.2. This assumes that the next major CUDA version will be 10.0, needing adjustment only after such major version is released.",
    "Number of deleted lines": 3,
    "Deleted lines": "    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n  else()\n    message(WARNING \"Not compiling with OpenMP. Suppress this warning with -DUSE_OPENMP=OFF\")\n    set(USE_OPENMP OFF)\n  endif()\nendif()\n\n\n# ---[ Android specific ones\nif(ANDROID)\n  list(APPEND Caffe2_DEPENDENCY_LIBS log)\nendif()\n\n# ---[ CUDA\nif(USE_CUDA)\n  include(cmake/Cuda.cmake)\n  if(HAVE_CUDA)\n    # CUDA 9.0 requires GCC version <= 6\n    if (CUDA_VERSION VERSION_EQUAL 9.0)\n      if (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND\n          NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 7.0 AND\n          CUDA_HOST_COMPILER STREQUAL CMAKE_C_COMPILER)\n        message(FATAL_ERROR\n          \"CUDA 9.0 is not compatible with GCC version >= 7. \"\n          \"Use the following option to use another version (for example): \\n\"\n          \"  -DCUDA_HOST_COMPILER=/usr/bin/gcc-6\\n\")\n      endif()\n    # CUDA 8.0 requires GCC version <= 5\n    elseif (CUDA_VERSION VERSION_EQUAL 8.0)\n      if (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND\n          NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 6.0 AND\n          CUDA_HOST_COMPILER STREQUAL CMAKE_C_COMPILER)\n        message(FATAL_ERROR\n          \"CUDA 8.0 is not compatible with GCC version >= 6. \"\n          \"Use the following option to use another version (for example): \\n\"\n          \"  -DCUDA_HOST_COMPILER=/usr/bin/gcc-5\\n\")\n      endif()\n    endif()\n  endif()\n  # ---[ CUDNN\n  if(HAVE_CUDA)\n    find_package(CuDNN REQUIRED)\n    if(CUDNN_FOUND)\n      caffe2_include_directories(${CUDNN_INCLUDE_DIRS})"
},
{
    "Id": 57,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/3f5dc95b57496c4ea938be381efcdc2ea92bb4cc",
    "Violation": "insufficient",
    "Bug report": "Some of the tests don't specify `device` in the input configs so filter by device won't work for them. This diff fixes that issue.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n    def _keep_test(self, test_case):\n        # TODO: consider regex matching for test filtering.\n        # Currently, this is a sub-string matching.\n        op_test_config = test_case.test_config\n\n        if self.args.framework:\n            frameworks = benchmark_utils.process_arg_list(self.args.framework)\n\n        operators = benchmark_utils.process_arg_list(self.args.operators) if self.args.operators else None\n\n        # Filter framework, operator, test_name, tag, forward_only\n        if (self._check_keep(op_test_config.test_name, self.args.test_name) and\n            self._check_keep_list(test_case.op_bench.module_name(), operators) and\n            self._check_keep_list(test_case.framework, frameworks) and\n                (self.args.tag_filter == 'all' or\n                    self._check_keep(op_test_config.tag, self.args.tag_filter)) and\n                (not self.args.forward_only or op_test_config.run_backward != self.args.forward_only) and\n                (self.args.device == 'None' or self.args.device in op_test_config.test_name)):\n            return True\n\n        return False\n\n    def _print_test_case_info(self, test_case):\n        # Print out the test name and skip the real execution\n        if self.args.list_tests:\n            print(\"# {}\".format(test_case.test_config.test_name))\n            return True\n        elif self.args.list_ops:\n            if self.args.operators is None:\n                op_name = test_case.op_bench.module_name()\n\n                if op_name not in self.printed_ops_list:\n                    print(\"# {}\".format(op_name))\n                    self.printed_ops_list.add(op_name)\n            return True\n\n        return False\n"
},
{
    "Id": 58,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/1c02be1b6a0f6d02d3a0ae19c13d51a3e59a55ae",
    "Violation": "insufficient",
    "Bug report": "In PyTorch 1.5, when running `torch.cuda.reset_peak_memory_stats()` on a machine where `torch.cuda.is_available() is False`, I would get: AssertionError: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from. With this patch, we get a more sensible:",
    "Number of deleted lines": 1,
    "Deleted lines": "            # (https://bugs.python.org/issue2651), so we work around it.\n            msg = KeyErrorMessage(msg)\n        elif getattr(self.exc_type, \"message\", None):\n            # Some exceptions have first argument as non-str but explicitly\n            # have message field\n            raise self.exc_type(message=msg)\n        raise self.exc_type(msg)\n\n\ndef _get_available_device_type():\n    if torch.cuda.is_available():\n        return \"cuda\"\n    # add more available device types here\n    return None\n\n\ndef _get_device_attr(get_member):\n    device_type = _get_available_device_type()\n    if device_type.lower() == \"cuda\":\n        return get_member(torch.cuda)\n    # add more available device types here\n    return None\n\n\ndef _get_current_device_index():\n    # current device index\n    return _get_device_attr(lambda m: m.current_device())\n\n\ndef _get_all_device_indices():\n    # all device index\n    return _get_device_attr(lambda m: list(range(m.device_count())))\n\n\ndef _get_devices_properties(device_ids):\n    # all device properties\n    return [_get_device_attr(lambda m: m.get_device_properties(i)) for i in device_ids]\n\n"
},
{
    "Id": 59,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/29b702144bf5bb96dfd8fcbd04b6562a27ca5385",
    "Violation": "improper",
    "Bug report": " Fix issue in s_addmm_out_sparse_dense_cpu only supporting CUDA device checking. ## Motivation The at::native::s_addmm_out_sparse_dense_cpu only supports the CPU tensors. But it only checks whether the tensor is on CUDA device which is not enough. ## Solution Change the tensor device type checkging from is_cuda to !is_cpu to protect other backends than the CUDA.",
    "Number of deleted lines": 4,
    "Deleted lines": "      if (col < 0 || col >= dim_j) {\n        AT_ERROR(\"addmm: index out of column bound: \", col, \" not between 1 and \", dim_j);\n      } else {\n        AT_ERROR(\"addmm: index out of row bound: \", row, \" not between 1 and \", dim_i);\n      }\n    }\n  }\n};\n\nTensor& s_addmm_out_sparse_dense_cpu(\n    Tensor& r,\n    const Tensor& t,\n    const SparseTensor& sparse_,\n    const Tensor& dense,\n    const Scalar& beta,\n    const Scalar& alpha\n) {\n  // TODO: This error message seems awfully opaque\n  TORCH_CHECK(!t.is_cuda(),  \"Expected all tensors to be on the same device. addmm expected 't' to be CPU tensor, but got CUDA tensor\");\n  TORCH_CHECK(!r.is_cuda(), \"Expected all tensors to be on the same device. addmm: expected 'out' to be CPU tensor, but got CUDA tensor\");\n  TORCH_CHECK(!sparse_.is_cuda(), \"Expected all tensors to be on the same device. addmm: expected 'mat1' to be a CPU tensor, but got a CUDA tensor\");\n  TORCH_CHECK(!dense.is_cuda(), \"Expected all tensors to be on the same device. addmm: expected 'mat2' to be a CPU tensor, but got a CUDA tensor\");\n\n  TORCH_CHECK(sparse_.sparse_dim() == 2, \"addmm: matrices expected, got \", sparse_.sparse_dim(), \"D tensor\");\n  TORCH_CHECK(sparse_.dense_dim() == 0, \"addmm: scalar values expected, got \", sparse_.dense_dim(), \"D values\");\n  TORCH_CHECK(dense.dim() == 2, \"addmm: matrices expected, got \", dense.dim(), \"D tensor\");\n\n  // ixj * jxk = ixk\n  int64_t dim_i = sparse_.size(0);\n  int64_t dim_j = sparse_.size(1);\n  int64_t dim_k = dense.size(1);\n\n  TORCH_CHECK(dense.size(0) == dim_j,\n      \"addmm: Argument #3 (dense): Expected dim 0 size \", dim_j, \", got \", dense.size(0));\n  TORCH_CHECK(t.size(0) == dim_i,\n      \"addmm: Argument #1 (t): Expected dim 0 size \", dim_i, \", got \", t.size(0));\n  TORCH_CHECK(t.size(1) == dim_k,\n      \"addmm: Argument #1 (t): Expected dim 1 size \", dim_k, \", got \", t.size(1));\n\n  r.resize_({dim_i, dim_k});\n\n  int64_t nnz        = sparse_._nnz();"
},
{
    "Id": 60,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bbc7c79b20e67da450dd9b7de70cc6b68e656714",
    "Violation": "missing",
    "Bug report": "add device checks for sparse csr",
    "Number of deleted lines": 0,
    "Deleted lines": "  }\n  return output;\n}\n\nTensor& add_out_sparse_csr_cuda(\n    const Tensor& self,\n    const SparseCsrTensor& other,\n    const Scalar& alpha,\n    SparseCsrTensor& out) {\n  if (self.layout() == kStrided) {\n    add_out_dense_sparse_csr_cuda(out, self, other, alpha);\n  } else {\n    TORCH_CHECK(\n        self.sizes().equals(other.sizes()),\n        \"torch.add: Expected input tensors to have the same shape, but got tensor `self` with shape \",\n        self.sizes(),\n        \" and tensor `other` with shape \",\n        other.sizes());\n\n    if (only_sparse_compressed_add_trivial_cases(self, other, alpha, out)) {\n      return out;\n    }\n\n    at::native::resize_as_sparse_compressed_(out, self);\n    sparse::impl::cuda::add_out_sparse_csr(self, other, Scalar(1), alpha, out);\n  }\n  return out;\n}\n\nTORCH_IMPL_FUNC(_convert_indices_from_coo_to_csr_structured_cuda) (\n  const Tensor& input, const int64_t size, const bool out_int32, const Tensor& result\n) {\n  if (out_int32) {\n    AT_DISPATCH_INTEGRAL_TYPES(input.scalar_type(), \"convert_indices_from_coo_to_csr_cuda\", [&] {\n      convert_indices_from_coo_to_csr_cuda<scalar_t, int>(result, input, size);\n    });\n  } else {\n    AT_DISPATCH_INTEGRAL_TYPES(input.scalar_type(), \"convert_indices_from_coo_to_csr_cuda\", [&] {"
},
{
    "Id": 61,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/faa7eb81c634492b70fcc0327622bb0aa812cacd",
    "Violation": "misleading",
    "Bug report": "change error_message for XPU Autocast data type check. XPU autocast supports bf16 and fp16 data types, we are going to change the error_message for that.",
    "Number of deleted lines": 1,
    "Deleted lines": "            warnings.warn('User provided device_type of \\'cuda\\', but CUDA is not available. Disabling')\n            enabled = False\n        if dtype is not None:\n            self.fast_dtype = dtype\n        if cache_enabled is not None:\n            self._cache_enabled = cache_enabled\n\n        if self.device == 'cpu':\n            supported_dtype = [torch.bfloat16]\n            if self.fast_dtype not in supported_dtype:\n                error_message = 'In CPU autocast, but the target dtype is not supported. Disabling autocast.\\n'\n                error_message += 'CPU Autocast only supports dtype of torch.bfloat16 currently.'\n                warnings.warn(error_message)\n                enabled = False\n        elif self.device == 'xpu':\n            supported_dtype = [torch.bfloat16, torch.float16]\n            if self.fast_dtype not in supported_dtype:\n                error_message = 'In XPU autocast, but the target dtype is not supported. Disabling autocast.\\n'\n                error_message += 'XPU Autocast only supports dtype of torch.bfloat16 currently.'\n                warnings.warn(error_message)\n                enabled = False\n        elif self.device == 'hpu':\n            supported_dtype = [torch.bfloat16, torch.float16]\n            if self.fast_dtype not in supported_dtype:\n                error_message = 'In HPU autocast, but the target dtype is not supported. Disabling autocast.\\n'\n                error_message += 'HPU Autocast only supports dtypes of torch.bfloat16 and torch.float16 currently.'\n                warnings.warn(error_message)\n                enabled = False\n        elif self.device == self.custom_backend_name:\n            supported_dtype = self.custom_device_mod.get_amp_supported_dtype()\n            if self.fast_dtype not in supported_dtype:\n                error_message = f\"In {self.custom_backend_name} autocast, but the target dtype is not supported. \"\n                error_message += f\"Disabling autocast.\\n {self.custom_backend_name} Autocast only supports dtypes of \"\n                error_message += \", \".join(str(dtype) for dtype in supported_dtype) + \" currently.\"\n                warnings.warn(error_message)\n                enabled = False\n        elif self.device == 'cuda':\n            if enabled and self.fast_dtype == torch.bfloat16 and not torch.cuda.is_bf16_supported():\n                raise RuntimeError('Current CUDA Device does not support bfloat16. Please switch dtype to float16.')"
},
{
    "Id": 62,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/48a49b2683ffa21eb1b472e503c129c043c18f87",
    "Violation": "misleading",
    "Bug report": "use more informative error message for ConstandPad2d/3d.  the current error message for `torch.nn.ConstantPad2d` and `torch.nn.ConstantPad3d` is misleading, this PR fixes the problem.",
    "Number of deleted lines": 1,
    "Deleted lines": "                           out_shape[dim] - pad_l - std::max(pad_r, zero),\n                           out_shape[dim] - std::max(pad_r, zero));\n      out_slice.copy_(in_slice);\n    }\n\n    if (pad_r > 0) {\n      out_slice = out.slice_symint(dim, out_shape[dim] - pad_r, out_shape[dim]);\n      in_slice = out.slice_symint(dim, std::max(pad_l, zero), std::max(pad_l, zero) + pad_r);\n      out_slice.copy_(in_slice);\n    }\n  }\n\n  return out;\n}\n\nTensor _pad_enum_symint(const Tensor &self, c10::SymIntArrayRef pad, int64_t mode_int, c10::optional<double> value) {\n  const auto input_dim = self.dim();\n  TORCH_CHECK(pad.size() % 2 == 0, \"Padding length must be divisible by 2\");\n  TORCH_CHECK(static_cast<int64_t>(pad.size()) <= input_dim * 2, \"Padding length too large\");\n  auto mode = static_cast<at::padding_mode>(mode_int);\n\n  if (mode == at::padding_mode::constant) {\n    return at::constant_pad_nd_symint(self, pad, value.value_or(0.0));\n  }\n  TORCH_CHECK(!value.has_value() || *value == 0,\n              \"Padding mode \\\"\", padding_mode_string(mode),\n              \"\\\" doesn't take in value argument\");\n\n  if (pad.size() == 2 && (input_dim == 2 || input_dim == 3)) {\n    switch (mode) {\n      case at::padding_mode::reflect: return at::reflection_pad1d_symint(self, pad);\n      case at::padding_mode::replicate: return at::replication_pad1d_symint(self, pad);\n      case at::padding_mode::circular: return at::_pad_circular_symint(self, pad);\n      default: {}\n    }\n  } else if(pad.size() == 4 && (input_dim == 3 || input_dim == 4)) {\n    switch (mode) {\n      case at::padding_mode::reflect: return at::reflection_pad2d_symint(self, pad);\n      case at::padding_mode::replicate: return at::replication_pad2d_symint(self, pad);"
},
{
    "Id": 63,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4ab1588d9919bc1a62219a5c2393e0784ddaae70",
    "Violation": "misleading",
    "Bug report": "Enhance error message for dependency check, If python development library is missing when building pytorch from source cmake will raise the error like: CMake Error at cmake/Dependencies.cmake:1079 (if): if given arguments: \"VERSION_LESS\" \"3\"  Unknown arguments specified ```it's quite a misleading information that user would consider it's a syntax error or cmake version problem. This PR add a check to ensure `PYTHONLIBS_VERSION_STRING` exist before using.",
    "Number of deleted lines": 0,
    "Deleted lines": "  if(NOT PYTHON_LIBRARY)\n    pycmd_no_exit(_py_lib _exitcode \"import sysconfig; print(sysconfig.get_path('stdlib'))\")\n    if(\"${_exitcode}\" EQUAL 0 AND EXISTS \"${_py_lib}\" AND EXISTS \"${_py_lib}\")\n      set(PYTHON_LIBRARY \"${_py_lib}\")\n      if(MSVC)\n        string(REPLACE \"Lib\" \"libs\" _py_static_lib ${_py_lib})\n        link_directories(${_py_static_lib})\n      endif()\n      message(STATUS \"Setting Python's library to ${PYTHON_LIBRARY}\")\n    endif()\n  endif(NOT PYTHON_LIBRARY)\n\n  # These should fill in the rest of the variables, like versions, but resepct\n  # the variables we set above\n  set(Python_ADDITIONAL_VERSIONS ${PYTHON_VERSION} 3.8)\n  find_package(PythonInterp 3.0)\n  find_package(PythonLibs 3.0)\n\n  if(${PYTHONLIBS_VERSION_STRING} VERSION_LESS 3)\n    message(FATAL_ERROR\n      \"Found Python libraries version ${PYTHONLIBS_VERSION_STRING}. Python 2 has reached end-of-life and is no longer supported by PyTorch.\")\n  endif()\n  if(${PYTHONLIBS_VERSION_STRING} VERSION_LESS 3.8)\n    message(FATAL_ERROR\n      \"Found Python libraries version ${PYTHONLIBS_VERSION_STRING}. Python < 3.8 is no longer supported by PyTorch.\")\n  endif()\n\n  # When building pytorch, we pass this in directly from setup.py, and\n  # don't want to overwrite it because we trust python more than cmake\n  if(NUMPY_INCLUDE_DIR)\n    set(NUMPY_FOUND ON)\n  elseif(USE_NUMPY)\n    find_package(NumPy)\n    if(NOT NUMPY_FOUND)\n      message(WARNING \"NumPy could not be found. Not building with NumPy. Suppress this warning with -DUSE_NUMPY=OFF\")\n    endif()\n  endif()\n"
},
{
    "Id": 64,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/577e90ae9bf257040acb68da3626d9a64d07bf7a",
    "Violation": "misleading",
    "Bug report": " Improve error message for missing ops. The current error message is ill formed",
    "Number of deleted lines": 2,
    "Deleted lines": "  bool all_ops_supported = true;\n  for (int i = 0; i < code_.op_names_.size(); i++) {\n    const auto& opname = code_.op_names_[i];\n    int num_args = code_.operator_input_sizes_[i];\n    c10::optional<int> num_specified_args =\n        num_args < 0 ? c10::nullopt : c10::optional<int>(num_args);\n    auto func = makeOperatorFunction(opname, num_specified_args);\n    if (!func.has_value()) {\n      unsupported_op_names.insert(operator_str(opname));\n      all_ops_supported = false;\n      break;\n    } else {\n      code_.operators_[i] = *func;\n    }\n  }\n  if (should_check_operators) {\n    TORCH_CHECK(\n        unsupported_op_names.empty(),\n        \"Following ops cannot be found. Please check if the operator library is included in the build. If built with selected ops, check if these ops are in the list. If you are a Meta employee, please see fburl.com/missing_ops for a fix. Or post it in https://discuss.pytorch.org/\",\n        c10::Join(\", \", unsupported_op_names));\n  }\n  code_.initialized = all_ops_supported;\n  return all_ops_supported;\n}\n\nvoid Function::append_constant(const c10::IValue& constant) {\n  code_.constants_.push_back(constant);\n}\n\nvoid Function::append_type(const at::TypePtr& type) {\n  code_.types_.push_back(type);\n}\n\nvoid Function::append_function(mobile::Function& function) {\n  code_.functions_.push_back(&function);\n}\n\nvoid Function::set_register_size(size_t size) {\n  code_.register_size_ = size;\n}"
},
{
    "Id": 65,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/22044c6f7cbdafdd340714bbe220b621e1927826",
    "Violation": "misleading",
    "Bug report": "Use TORCH_CHECK instead of AT_ASSERT in torch::cuda::gather(). The error message produced by AT_ASSERT() in gather() encouraged users to file a bug report (\"please report a bug to PyTorch...\"). The assertion should be a regular argument check since it can be triggered by passing tensors with different dimensionality, e.g. `torch.cuda.comm.gather([torch.rand(1, device='cuda'), torch.rand(1, 1, device='cuda')])`.",
    "Number of deleted lines": 1,
    "Deleted lines": "  }\n  return chunks;\n}\n\nat::Tensor gather(\n    at::TensorList tensors,\n    int64_t dim,\n    c10::optional<int32_t> destination_index) {\n  TORCH_CHECK(!tensors.empty(), \"Expected at least one tensor to gather from\");\n  at::Tensor result;\n  int64_t total_size = 0;\n  auto& first = tensors.front();\n  const auto first_size = first.sizes();\n  std::vector<int64_t> expected_size(first_size.begin(), first_size.end());\n  bool all_channels_last = true;\n  for (const auto& tensor : tensors) {\n    TORCH_CHECK(\n        tensor.is_cuda(), \"Gather expects all inputs to have CUDA type\");\n    AT_ASSERT(tensor.ndimension() == static_cast<int64_t>(expected_size.size()));\n    expected_size[dim] = tensor.size(dim);\n    for (size_t dimension = 0; dimension < expected_size.size(); ++dimension) {\n      TORCH_CHECK(\n          expected_size[dimension] == tensor.size(dimension),\n          \"Gather got an input of invalid size: got \",\n          tensor.sizes(), \", but expected \", at::IntArrayRef(expected_size));\n    }\n    total_size += tensor.size(dim);\n    all_channels_last = all_channels_last &&\n        tensor.suggest_memory_format() == MemoryFormat::ChannelsLast;\n  }\n  expected_size[dim] = total_size;\n  at::Device device(at::DeviceType::CPU);\n  if (!destination_index || *destination_index != -1) {\n    device = at::Device(at::DeviceType::CUDA, destination_index ? *destination_index : -1);\n  }\n\n  auto memory_format = MemoryFormat::Contiguous;\n  if (all_channels_last) {\n    memory_format = MemoryFormat::ChannelsLast;"
},
{
    "Id": 66,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/dc0d68a1ee3800ed4024762d018f85256e80f5ad",
    "Violation": "misleading",
    "Bug report": "Print out interface mismatch for prim::ModuleDictIndex. This commit augments the module interface subtyping check that is done before the emission of the `prim::ModuleDictIndex` operator so that the error message that is printed if the subtyping check fails provides more information on which methods do not match.",
    "Number of deleted lines": 2,
    "Deleted lines": "      auto sd = getSugaredDict(loc, m);\n      auto idx_str = ivalue->toStringRef();\n      auto keys_iter = sd->keys_;\n      auto module_values_iter = sd->modules_;\n      for (size_t i = 0; i < keys_iter->tup_.size(); ++i) {\n        auto key = keys_iter->tup_.at(i);\n        auto key_str = toIValue(key->asValue(loc, m))->toStringRef();\n        if (key_str == idx_str) {\n          return module_values_iter->tup_.at(i);\n        }\n      }\n      throw ErrorReport(loc) << \"Key Error, \" << idx_str;\n    } else if (type_hint) {\n      // Check that all submodules comply with the type hint.\n      const auto& self_type = concreteType_->getJitType()->expect<ClassType>();\n      for (size_t i = 0; i < self_type->numAttributes(); ++i) {\n        const auto& attr_type = self_type->getAttribute(i);\n        if (attr_type->is_module()) {\n          if (!attr_type->isSubtypeOf(type_hint)) {\n            auto loc = self_->node()->sourceRange();\n            throw ErrorReport(loc)\n                << \"Attribute \" << self_type->getAttributeName(i)\n                << \" is not of annotated type \" << type_hint->annotation_str();\n          }\n        }\n      }\n\n      // Emit a prim::ModuleDictIndex operator. This is needed because it's\n      // difficult to construct a dict in the graph representing the ModuleDict\n      // and use aten::__getitem__ ops to index into it because any call to\n      // ModuleDict.setAttr would invalidate that emitted dict.\n      auto graph = m.graph();\n      auto* getitem_node =\n          graph->insertNode(graph->create(prim::ModuleDictIndex, {self_, idx}));\n      getitem_node->output(0)->setType(type_hint);\n      return std::make_shared<SimpleValue>(getitem_node->output(0));\n    }\n    throw ErrorReport(loc)\n        << \"Unable to extract string literal index. \"\n        << \"ModuleDict indexing is only supported with string literals. \"\n        << \"Enumeration of ModuleDict is supported, e.g. 'for k, v in self.items(): ...'\";\n  }\n  throw ErrorReport(loc)"
},
{
    "Id": 67,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c9548176965557a76526ba0db23ff5c9facd3e97",
    "Violation": "misleading",
    "Bug report": "print matrix dims in torch cuda matrix multiply error.  trying to improve the error message for torch matrix multiply dimension mismatch",
    "Number of deleted lines": 1,
    "Deleted lines": "namespace {\n\nTensor& addmm_out_cuda_impl(Tensor& result, const Tensor& self, const Tensor& mat1, const Tensor& mat2, Scalar beta, Scalar alpha) {\n  TORCH_CHECK(mat1.dim() == 2 && mat2.dim() == 2, \"tensors must be 2-D\");\n\n  TensorArg args[]{{result, \"out\", 0}, {self, \"self\", 1}, {mat1, \"mat1\", 2}, {mat2, \"mat2\", 3}};\n  checkAllSameGPU(\"addmm\", args);\n\n  Tensor self_;\n  if (&result != &self) {\n    std::tie(self_) = expand_size(self, {mat1.size(0), mat2.size(1)}, \"addmm\");\n  } else {\n    self_ = self;\n  }\n\n  IntArrayRef mat1_sizes = mat1.sizes();\n  IntArrayRef mat2_sizes = mat2.sizes();\n  IntArrayRef self__sizes = self_.sizes();\n  TORCH_CHECK(mat1_sizes[1] == mat2_sizes[0], \"mat1 dim 1 must match mat2 dim 0\");\n  TORCH_CHECK(self__sizes[0] == mat1_sizes[0], \"self_ dim 0 must match mat1 dim 0\");\n  TORCH_CHECK(self__sizes[1] == mat2_sizes[1], \"self_ dim 1 must match mat2 dim 1\");\n\n  if (&result != &self) {\n    at::native::resize_as_(result, self_);\n    if (beta.toComplexDouble() != 0.0) {\n      at::native::copy_(result, self_);\n    }\n  }\n\n  TORCH_CHECK(result.dim() == 2 && self_.dim() == 2, \"tensors must be 2-D\");\n\n  IntArrayRef result_sizes = result.sizes();\n  if ((result_sizes[0] == 0) || (result_sizes[1] == 0)) {\n    return result;\n  }\n\n  bool transpose_result;\n  Tensor result_ = prepare_matrix_for_cublas(result, transpose_result);\n  bool transpose_mat1;"
},
{
    "Id": 68,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/93256617c8622760181dacf03c41cc0577ac0ea6",
    "Violation": "misleading",
    "Bug report": "corrected messages for check of default options. Modified messages in the check of default options for the Adam optimizer.",
    "Number of deleted lines": 3,
    "Deleted lines": "  TORCH_ARG(torch::Tensor, exp_avg);\n  TORCH_ARG(torch::Tensor, exp_avg_sq);\n  TORCH_ARG(torch::Tensor, max_exp_avg_sq) = {};\n\npublic:\n  void serialize(torch::serialize::InputArchive& archive) override;\n  void serialize(torch::serialize::OutputArchive& archive) const override;\n  TORCH_API friend bool operator==(const AdamParamState& lhs, const AdamParamState& rhs);\n  ~AdamParamState() = default;\n};\n\nclass TORCH_API Adam : public Optimizer {\n public:\n   explicit Adam(std::vector<OptimizerParamGroup> param_groups,\n       AdamOptions defaults = {}) : Optimizer(std::move(param_groups), std::make_unique<AdamOptions>(defaults)) {\n     TORCH_CHECK(defaults.lr() >= 0, \"Invalid learning rate: \", defaults.lr());\n     TORCH_CHECK(defaults.eps() >= 0, \"Invalid epsilon value: \", defaults.eps());\n     auto betas = defaults.betas();\n     TORCH_CHECK(std::get<0>(betas) >= 0, \"Invalid learning rate: \", std::get<0>(betas));\n     TORCH_CHECK(std::get<1>(betas) >= 0, \"Invalid learning rate: \", std::get<1>(betas));\n     TORCH_CHECK(defaults.weight_decay() >= 0, \"Invalid learning rate: \", defaults.weight_decay());\n   }\n   explicit Adam(\n       std::vector<Tensor> params,\n       AdamOptions defaults = {}) : Adam({std::move(OptimizerParamGroup(params))}, defaults) {}\n\n  torch::Tensor step(LossClosure closure = nullptr) override;\n  void save(serialize::OutputArchive& archive) const override;\n  void load(serialize::InputArchive& archive) override;\n\n private:\n  template <typename Self, typename Archive>\n  static void serialize(Self& self, Archive& archive) {\n    _TORCH_OPTIM_SERIALIZE_WITH_TEMPLATE_ARG(Adam);\n  }\n};\n} // namespace optim\n} // namespace torch\n"
},
{
    "Id": 69,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/99f06c0cc2a907d8fbf613768356838548f1f8c0",
    "Violation": "misleading",
    "Bug report": "update errors to be more descriptive we call `_check_single_tensor` and `_check_tensor_list` as validation but don't print out the param types that were invalid",
    "Number of deleted lines": 5,
    "Deleted lines": "\n    Returns:\n        List of global ranks ordered by group rank.\n    \"\"\"\n    return list(_world.pg_group_ranks[group].keys())\n\ndef _get_group_size(group) -> int:\n    \"\"\"Get a given group's world size.\"\"\"\n    if group is GroupMember.WORLD or group is None:\n        default_pg = _get_default_group()\n        return default_pg.size()\n    return group.size()\n\n\ndef _check_single_tensor(param, param_name) -> None:\n    \"\"\"Check that the parameter ``param_name`` is a single tensor.\"\"\"\n    if not isinstance(param, torch.Tensor):\n        raise TypeError(\n            f\"Invalid function argument. Expected parameter `{param_name}` to be of type torch.Tensor.\"\n        )\n\n\ndef _check_tensor_list(param, param_name) -> None:\n    \"\"\"Check that the parameter ``param_name`` is a list of tensors.\"\"\"\n    if not isinstance(param, list) or not all(\n        isinstance(p, torch.Tensor) for p in param\n    ):\n        raise TypeError(\n            f\"Invalid function argument. Expected parameter `{param_name}` to be of type List[torch.Tensor].\"\n        )\n\ndef _as_iterable(obj) -> collections.abc.Iterable:\n    return obj if isinstance(obj, list) else (obj,)\n\ndef _ensure_all_tensors_same_dtype(*tensors) -> None:\n    last_dtype = None\n    for tensor in itertools.chain(*map(_as_iterable, tensors)):\n        tensor_dtype = tensor.dtype\n        # Mixing complex and its element type is allowed\n        if tensor_dtype.is_complex:\n            tensor_dtype = torch.float32 if tensor_dtype == torch.complex64 else torch.complex128\n\n        if last_dtype is None:\n            last_dtype = tensor_dtype\n        else:\n            if last_dtype != tensor_dtype:\n                raise ValueError(\n                    \"Invalid usage of tensors with different dtypes\"\n                    f\"Found {last_dtype} and  {tensor.dtype}\"\n                )\n"
},
{
    "Id": 70,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/9a9eadacc6ac3b734a6d607ae6f63ec1a0d1438d",
    "Violation": "missing",
    "Bug report": "explicitly check device for grid_sampler",
    "Number of deleted lines": 0,
    "Deleted lines": "                               \"processing CUDA inputs, but CuDNN is not enabled\")\n        if not cudnn.is_acceptable(theta.data):\n            raise RuntimeError(\"AffineGridGenerator generator theta not acceptable for CuDNN\")\n        N, C, H, W = size\n        return torch.cudnn_affine_grid_generator(theta, N, C, H, W)\n    else:\n        return AffineGridGenerator.apply(theta, size)\n\n\n# TODO: Port these completely into C++\n\n\nclass GridSampler(Function):\n\n    @staticmethod\n    def forward(ctx, input, grid, padding_mode='zeros'):\n        ctx.save_for_backward(input, grid)\n\n        if padding_mode == 'zeros':\n            ctx.padding_mode = MODE_ZEROS\n        elif padding_mode == 'border':\n            ctx.padding_mode = MODE_BORDER\n        else:\n            raise ValueError(\"padding_mode needs to be 'zeros' or 'border', but got {}\".format(padding_mode))\n\n        grid_sz = grid.size()\n        backend = type2backend[input.type()]\n        if input.dim() == 4:\n            output = input.new(grid_sz[0], input.size(1), grid_sz[1], grid_sz[2])\n            backend.SpatialGridSamplerBilinear_updateOutput(backend.library_state, input, grid,\n                                                            output, ctx.padding_mode)\n        elif input.dim() == 5:\n            output = input.new(grid_sz[0], input.size(1), grid_sz[1], grid_sz[2], grid_sz[3])\n            backend.VolumetricGridSamplerBilinear_updateOutput(backend.library_state, input, grid,\n                                                               output, ctx.padding_mode)\n        else:\n            raise ValueError(\"input has to be 4d or 5d but got input of shape: {}\".format(input.shape))\n        return output"
},
{
    "Id": 71,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/157d478a30f27fd9d866c1235841721a559c8d0b",
    "Violation": "improper",
    "Bug report": "Fix omission of shape in size check in index. ",
    "Number of deleted lines": 1,
    "Deleted lines": "    # checkIndexTensorTypes and expandTensors\n    result: List[Optional[Tensor]] = []\n    for i, index in enumerate(indices):\n        if index is not None:\n            check(\n                index.dtype in [torch.long, torch.int8, torch.bool],\n                lambda: \"tensors used as indices must be long, byte or bool tensors\"\n            )\n            if index.dtype in [torch.int8, torch.bool]:\n                nonzero = index.nonzero()\n                k = len(result)\n                check(\n                    k + index.ndim <= self.ndim,\n                    lambda: f\"too many indices for tensor of dimension {self.ndim}\",\n                    IndexError\n                )\n                for j in range(index.ndim):\n                    check(\n                        index[j] <= self.shape[k + j],\n                        lambda: f\"The shape of the mask {index.shape} at index {i} \"\n                                f\"does not match the shape of the indexed tensor {self.shape} at index {k + j}\",\n                        IndexError\n                    )\n                    result.append(nonzero.select(1, j))\n            else:\n                result.append(index)\n        else:\n            result.append(index)\n    indices = result\n    check(len(indices) <= self.ndim, lambda: f\"too many indices for tensor of dimension {self.ndim} (got {len(indices)})\")\n    # expand_outplace\n    import torch._refs as refs  # avoid import cycle in mypy\n    indices = list(refs._maybe_broadcast(*indices))\n    # add missing null tensors\n    while len(indices) < self.ndim:\n        indices.append(None)\n\n    # hasContiguousSubspace\n    #   true if all non-null tensors are adjacent"
},
{
    "Id": 72,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f14887a63f83b931df9fc5d841c7d3829141ff58",
    "Violation": "missing",
    "Bug report": "check for exact shape match before loading. Use RuntimeError instead of ValueError to keep it consistent with other errors",
    "Number of deleted lines": 0,
    "Deleted lines": "            strict (bool): whether to strictly enforce that the keys in\n                :attr:`state_dict` with :attr:`prefix` match the names of\n                parameters and buffers in this module\n            missing_keys (list of str): if ``strict=False``, add missing keys to\n                this list\n            unexpected_keys (list of str): if ``strict=False``, add unexpected\n                keys to this list\n            error_msgs (list of str): error messages should be added to this\n                list, and will be reported together in\n                :meth:`~torch.nn.Module.load_state_dict`\n        \"\"\"\n        local_name_params = itertools.chain(self._parameters.items(), self._buffers.items())\n        local_state = {k: v.data for k, v in local_name_params if v is not None}\n\n        for name, param in local_state.items():\n            key = prefix + name\n            if key in state_dict:\n                input_param = state_dict[key]\n                if isinstance(input_param, Parameter):\n                    # backwards compatibility for serialized parameters\n                    input_param = input_param.data\n                try:\n                    param.copy_(input_param)\n                except Exception:\n                    error_msgs.append('While copying the parameter named \"{}\", '\n                                      'whose dimensions in the model are {} and '\n                                      'whose dimensions in the checkpoint are {}.'\n                                      .format(key, param.size(), input_param.size()))\n            elif strict:\n                missing_keys.append(key)\n\n        if strict:\n            for key, input_param in state_dict.items():\n                if key.startswith(prefix):\n                    input_name = key[len(prefix):]\n                    input_name = input_name.split('.', 1)[0]  # get the name of param/buffer/child\n                    if input_name not in self._modules and input_name not in local_state:\n                        unexpected_keys.append(key)"
},
{
    "Id": 73,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/02e2158e754bafda46e663052c838aeb6ab6b560",
    "Violation": "missing",
    "Bug report": " Fix for out of bounds read in mobile interpreter INTERFACE_CALL opcode handler. The INTERFACE_CALL opcode for the mobile TorchScript interpreter contained an out of bounds read issue leading to memory corruption. This change adds an explicit check that the number of inputs passed to the format method called when handling the INTERFACE_CALL opcode is a valid and within bounds of the stack.",
    "Number of deleted lines": 0,
    "Deleted lines": "              static_cast<size_t>(inst.X) >= code.operators_.size()) {\n            TORCH_CHECK(false, \"Can't load op with index: \", inst.X);\n          }\n          stack.emplace_back(inst.N);\n          RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS(\n              code.op_names_[inst.X].name, debug_handle, stack);\n          code.operators_[inst.X](stack);\n          frame.step();\n        } break;\n        case CALL: {\n          auto& function = *frame.getCode().functions_.at(inst.X);\n          callFunction(function, stack);\n        } break;\n        case INTERFACE_CALL: {\n          if (inst.X < 0 ||\n              static_cast<size_t>(inst.X) >= code.constants_.size()) {\n            TORCH_CHECK(false, \"Can't load constant with index: \", inst.X);\n          }\n          torch::jit::Function& method =\n              peek(stack, 0, inst.N)\n                  .toObject()\n                  ->type()\n                  ->getMethod(code.constants_[inst.X].toStringRef());\n          RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS(\n              method.name(), debug_handle, stack);\n          callFunction(method, stack);\n        } break;\n        case LOAD:\n          stack.emplace_back(reg(inst.X));\n          frame.step();\n          break;\n        case MOVE:\n          stack.emplace_back(std::move(reg(inst.X)));\n          frame.step();\n          break;\n        case STORE:\n          reg(inst.X) = pop(stack);\n          frame.step();"
},
{
    "Id": 74,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4d07428edee863e7f5920f0672957a9711a9f0b5",
    "Violation": "missing",
    "Bug report": "Fix for out of bounds read in mobile interpreter FORMAT opcode handler. Summary: The FORMAT opcode for the mobile TorchScript interpreter contained an out of bounds read issue leading to memory corruption. This change adds an explicit check that the number of inputs passed to the format method called when handling the FORMAT opcode is a valid and within bounds of the stack.",
    "Number of deleted lines": 0,
    "Deleted lines": "      break;\n    default:\n      TORCH_CHECK(\n          false,\n          \"The specifier %\",\n          key,\n          \" is not supported in TorchScript format strings\");\n  }\n}\n\n} // namespace\n\nvoid tupleUnpack(Stack& stack) {\n  auto tuple = pop(stack).toTuple();\n  stack.insert(stack.end(), tuple->elements().begin(), tuple->elements().end());\n}\n\nvoid format(Stack& stack, size_t num_inputs) {\n  // static const std::regex unsupported_options(\"\\\\{(.*?)\\\\}\");\n  auto format = peek(stack, 0, num_inputs).toStringRef();\n  // // Temporally comment out the warning message because of\n  // // \"StdRegexIsAwful\" internal Lint error, to prevent sev\n  // // of std::regex from PT mobile.\n  // if (std::regex_search(format, unsupported_options)) {\n  //   TORCH_WARN(\"Format options are not supported.\");\n  // }\n\n  auto args = last(stack, num_inputs - 1);\n  std::stringstream ss;\n  for (size_t begin = 0, used_args = 0; true; ++used_args) {\n    size_t loc = format.find(\"{}\", begin);\n    if (loc == std::string::npos) {\n      ss << format.substr(begin);\n      break;\n    }\n    ss << format.substr(begin, loc - begin);\n    if (used_args >= args.size()) {\n      AT_ERROR(\"Too few arguments for format string: \", format);"
},
{
    "Id": 75,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b3ace213f240dc0f0f2a738f825f46e0d0dffca4",
    "Violation": "missing",
    "Bug report": "The error occurs because there is not check in `deserialize_source` that `text_table_` size can be less than `fnameIndex`. To prevent the error the corresponding check must be located.",
    "Number of deleted lines": 0,
    "Deleted lines": "}\n\nstd::shared_ptr<Source> SourceRangeDeserializer::deserialize_source(\n    const c10::IValue& iv) {\n  auto tup = iv.toTuple();\n  auto it = cached_sources.find(tup);\n  if (it != cached_sources.end()) {\n    return it->second;\n  }\n  std::shared_ptr<Source> source;\n  const auto& tup_elems = tup->elements();\n  TORCH_INTERNAL_ASSERT(tup_elems.size() == 3);\n  if (!text_table_.empty()) {\n    const auto& textIndex = tup_elems[0].toIntList();\n    int64_t fnameIndex = tup_elems[1].toInt();\n    int64_t starting_line_no_ = tup_elems[2].toInt();\n    c10::optional<std::string> filename = c10::nullopt;\n\n    filename = *text_table_[fnameIndex];\n\n    std::vector<c10::string_view> pieces;\n    std::vector<std::shared_ptr<std::string>> strs;\n\n    for (int64_t i : textIndex) {\n      pieces.emplace_back(*text_table_[i]);\n      strs.emplace_back(text_table_[i]);\n    }\n\n    StringCordView str_cord(std::move(pieces), std::move(strs));\n\n    source = std::make_shared<Source>(str_cord, filename, starting_line_no_);\n  } else {\n    std::string text_ = tup_elems[0].toStringRef();\n    c10::optional<std::string> filename_ =\n        tup_elems[1].toOptional<std::string>();\n    int64_t starting_line_no_ = tup_elems[2].toInt();\n    source = std::make_shared<Source>(\n        std::move(text_), std::move(filename_), starting_line_no_);"
},
{
    "Id": 76,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/d8466964b348b6172317f70b8e52de02402bad54",
    "Violation": "missing",
    "Bug report": "Add range check to multi margin loss target ",
    "Number of deleted lines": 0,
    "Deleted lines": "#include <ATen/ops/multi_margin_loss_backward_native.h>\n#endif\n\nnamespace at {\nnamespace native {\nnamespace {\nconstexpr int MULTIMARGIN_THREADS = 128;\n\ntemplate <int P, typename scalar_t>\n__global__ void MultiMarginLoss_forward_kernel(\n    scalar_t *output, scalar_t *input, int64_t *target, scalar_t *weights,\n    int nframe, int dim, bool sizeAverage, scalar_t margin) {\n  using acc_t = at::acc_type<scalar_t, true>;\n  __shared__ acc_t buffer[MULTIMARGIN_THREADS];\n  int k = blockIdx.x;\n  scalar_t *input_k = input + k*dim;\n  scalar_t *output_k = output + k;\n  int target_k = static_cast<int>(target[k]);\n  scalar_t input_target_k = input_k[target_k];\n\n  int i_start = threadIdx.x;\n  int i_end = dim;\n  int i_step = blockDim.x;\n\n  buffer[threadIdx.x] = 0;\n  for (int i = i_start; i < i_end; i += i_step) {\n    scalar_t z = margin - input_target_k + input_k[i];\n    if (i == target_k) {\n      continue;\n    }\n\n    if (z > 0) {\n      scalar_t h = (P==1) ? z : z*z;\n      if (weights) {\n        h *= weights[target_k];\n      }\n      buffer[threadIdx.x] += h;\n    }"
},
{
    "Id": 77,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c22ac14969a863a00b5ebb04a3453610c7a27713",
    "Violation": "missing",
    "Bug report": "The diff sets the upper boundary on border element when presenting the error message. This is required in order to avoid unnecessary log contamination",
    "Number of deleted lines": 0,
    "Deleted lines": "        rank = min(self.failures.keys(), key=lambda r: self.failures[r].timestamp)\n        return rank, self.failures[rank]\n\n    def format_msg(self, boarder_delim=\"*\", section_delim=\"=\"):\n        title = f\"  {self.name} FAILED  \"\n        root_rank, root_failure = self.get_first_failure()\n\n        root_failure_fmt: str = \"\"\n        other_failures_fmt: List[str] = []\n        width = len(title)\n        for idx, (rank, failure) in enumerate(self.failures.items()):\n            fmt, w = self._format_failure(idx, rank, failure)\n            width = max(width, w)\n            if rank == root_rank:\n                root_failure_fmt = fmt\n            else:\n                other_failures_fmt.append(fmt)\n\n        return Template(_MSG_FORMAT_TEMPLATE).substitute(\n            boarder=boarder_delim * width,\n            title=title.center(width),\n            section=section_delim * width,\n            root_failure=root_failure_fmt,\n            other_failures=\"\\n\".join(other_failures_fmt or [\"  <NO_OTHER_FAILURES>\"]),\n        )\n\n    def _format_failure(\n        self, idx: int, rank: int, failure: ProcessFailure\n    ) -> Tuple[str, int]:\n        fmt = Template(_FAILURE_FORMAT_TEMPLATE).substitute(\n            idx=idx,\n            time=failure.timestamp_isoformat(),\n            rank=rank,\n            local_rank=failure.local_rank,\n            exitcode=failure.exitcode,\n            pid=failure.pid,\n            error_file=failure.error_file,\n            message=failure.message,"
},
{
    "Id": 78,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b7bb34d7625d95e5088638721dcc07c2bc5e2ade",
    "Violation": "missing",
    "Bug report": "[MPS] Add version check Use `instancesRespondToSelector:` to test the presence of `optimizationLevel` in `MPSGraphCompilationDescriptor`",
    "Number of deleted lines": 0,
    "Deleted lines": "namespace mps {\n\nstatic std::unique_ptr<MPSDevice> mps_device;\nstatic std::once_flag mpsdev_init;\n\nMPSDevice* MPSDevice::getInstance() {\n  std::call_once(mpsdev_init, [] {\n      mps_device = std::unique_ptr<MPSDevice>(new MPSDevice());\n  });\n  return mps_device.get();\n}\n\nMPSDevice::~MPSDevice() {\n  [_mtl_device release];\n  _mtl_device = nil;\n}\n\nMPSDevice::MPSDevice(): _mtl_device(nil) {\n  NSArray* devices = [MTLCopyAllDevices() autorelease];\n  for (unsigned long i = 0 ; i < [devices count] ; i++) {\n    id<MTLDevice>  device = devices[i];\n    if(![device isLowPower]) { // exclude Intel GPUs\n      _mtl_device = [device retain];\n      break;\n    }\n  }\n  assert(_mtl_device);\n}\n\nat::Allocator* getMPSSharedAllocator();\nat::Allocator* GetMPSAllocator(bool useSharedAllocator) {\n  return useSharedAllocator ? getMPSSharedAllocator() : GetAllocator(DeviceType::MPS);\n}\n\nbool is_available() {\n  return MPSDevice::getInstance()->device() != nil;\n}\n"
},
{
    "Id": 79,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b1f08e7426a56a323e6928365918093b65aa4fb6",
    "Violation": "missing",
    "Bug report": " Call uncheckedSetDevice in ~InlineDeviceGuard only when device index are different. Setting device could be expensive, especially when a debugger is present. We should check the device are different before we set.",
    "Number of deleted lines": 2,
    "Deleted lines": "    TORCH_INTERNAL_ASSERT(t == DeviceType::CUDA);\n  }\n  DeviceType type() const override {\n    return DeviceType::CUDA;\n  }\n  Device exchangeDevice(Device d) const override {\n    TORCH_INTERNAL_ASSERT(d.type() == DeviceType::CUDA);\n    Device old_device = getDevice();\n    if (old_device.index() != d.index()) {\n      C10_CUDA_CHECK(cudaSetDevice(d.index()));\n    }\n    return old_device;\n  }\n  Device getDevice() const override {\n    int device;\n    C10_CUDA_CHECK(cudaGetDevice(&device));\n    return Device(DeviceType::CUDA, device);\n  }\n  void setDevice(Device d) const override {\n    TORCH_INTERNAL_ASSERT(d.type() == DeviceType::CUDA);\n    C10_CUDA_CHECK(cudaSetDevice(d.index()));\n  }\n  void uncheckedSetDevice(Device d) const noexcept override {\n    C10_CUDA_CHECK_WARN(cudaSetDevice(d.index()));\n  }\n  Stream getStream(Device d) const noexcept override {\n    return getCurrentCUDAStream(d.index()).unwrap();\n  }\n  Stream getDefaultStream(Device d) const override {\n    return getDefaultCUDAStream(d.index());\n  }\n  // NB: These do NOT set the current device\n  Stream exchangeStream(Stream s) const noexcept override {\n    CUDAStream cs(s);\n    auto old_stream = getCurrentCUDAStream(s.device().index());\n    setCurrentCUDAStream(cs);\n    return old_stream.unwrap();\n  }\n  DeviceIndex deviceCount() const noexcept override {\n    return device_count();\n  }\n\n  // Event-related functions\n  void createEvent("
},
{
    "Id": 80,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/53953316444485c8ee250022988ef87778ae1352",
    "Violation": "missing",
    "Bug report": "Stacks recorded when tensors are being freed during exit could try to acquire the GIL. Py_IsInitialized can be used to check if we are post Python exit and should not attempt to acquire the GIL.",
    "Number of deleted lines": 0,
    "Deleted lines": "// Locking:\n// We need to free PyCodeObjects when ~StackContext runs, but\n// CUDACachingAllocator may hold its device lock when ~StackContext runs.\n\n// Because the thread calling the allocator _may_ hold the GIL,\n// attempting to lock the GIL in ~StackContext can deadlock:\n// T0: GIL Lock -> Call Allocator    ->| Waiting Device Lock\n// T1: Call Allocator -> Device Lock ->| Waiting GIL Lock\n// Instead the destructor defers freeing stack frames by putting them in\n// to_free_frames. We still need a lock to manage this vector, but\n// we can ensure an overall lock ordering of GIL -> device_lock ->\n// to_free_frames_mutex because ::gather is called outside of the device lock.\n\nnamespace {\nstatic std::mutex to_free_frames_mutex;\nstatic std::vector<CapturedTraceback::PyFrame> to_free_frames;\nstruct PythonTraceback : public CapturedTraceback::Python {\n  std::vector<CapturedTraceback::PyFrame> gather() override {\n    std::vector<CapturedTraceback::PyFrame> frames;\n    py::gil_scoped_acquire acquire;\n    {\n      std::lock_guard<std::mutex> lock(to_free_frames_mutex);\n      for (CapturedTraceback::PyFrame f : to_free_frames) {\n        Py_XDECREF(f.code);\n      }\n      to_free_frames.clear();\n    }\n    PyFrameObject* f = PyEval_GetFrame();\n    Py_XINCREF(f);\n    while (f) {\n      frames.emplace_back(\n          CapturedTraceback::PyFrame{PyFrame_GetCode(f), PyFrame_GetLasti(f)});\n      auto f_back = PyFrame_GetBack(f);\n      Py_XDECREF(f);\n      f = f_back;\n    }\n    return frames;\n  }"
},
{
    "Id": 81,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/8269c4f3d30ad950a873d900f7de0880cdd38878",
    "Violation": "missing",
    "Bug report": "Added nullptr check for pthradpool_get_threads_count. We get seg fault without this in using XNNPACK.",
    "Number of deleted lines": 0,
    "Deleted lines": "    size_t range) {\n  if (threadpool == nullptr) {\n    /* No thread pool provided: execute function sequentially on the calling\n     * thread */\n    for (size_t i = 0; i < range; i++) {\n      function(argument, i);\n    }\n    return;\n  }\n  reinterpret_cast<caffe2::ThreadPool*>(threadpool)\n      ->run(\n          [function, argument](int threadId, size_t workId) {\n            function(argument, workId);\n          },\n          range);\n}\n\nsize_t pthreadpool_get_threads_count(pthreadpool_t threadpool) {\n  return reinterpret_cast<caffe2::ThreadPool*>(threadpool)->getNumThreads();\n}\n\npthreadpool_t pthreadpool_create(size_t threads_count) {\n  std::mutex thread_pool_creation_mutex_;\n  std::lock_guard<std::mutex> guard(thread_pool_creation_mutex_);\n\n  return reinterpret_cast<pthreadpool_t>(new caffe2::ThreadPool(threads_count));\n}\n\nvoid pthreadpool_destroy(pthreadpool_t pthreadpool) {\n  if (pthreadpool) {\n    caffe2::ThreadPool* threadpool =\n        reinterpret_cast<caffe2::ThreadPool*>(pthreadpool);\n    delete threadpool;\n  }\n}\n"
},
{
    "Id": 82,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/13121598efc7d86cb7ae6e05322bb95c1d0f16bc",
    "Violation": "missing",
    "Bug report": "Bug fix to update requantization and zp parameters of input. Also sneaking in change to check for realloc failure for packed activation buffer. In dynamic quantization input's quantization scale and zero point can be different on every iterations. Thus requantization scale needs to be recomputed. Earlier bug that calculated those only at op creation time results in wrong results on subsequent runs.",
    "Number of deleted lines": 0,
    "Deleted lines": "          op->sparse_matrix.col_block_size == 1) {\n        mr = pytorch_qnnp_params.q8gemm_sparse_c8x1.mr;\n        log2_mr = pytorch_qnnp_params.q8gemm_sparse_c8x1.log2_mr;\n        log2_row_block_size = 3;\n        nr = pytorch_qnnp_params.q8gemm_sparse_c8x1.nr;\n        kr = pytorch_qnnp_params.q8gemm_sparse_c8x1.kr;\n        compute_kernel =\n          pytorch_qnnp_params.q8gemm_sparse_c8x1.packedA_gemm_dq;\n        prepack_kernel = pytorch_qnnp_params.q8gemm_sparse_c8x1.packA;\n      } else {\n        return pytorch_qnnp_status_invalid_parameter;\n      }\n\n      const size_t output_size = op->output_height * op->output_width;\n      const size_t k_stride = (group_input_channels + (kr - 1)) & -kr;\n      const size_t m_stride = (output_size + (mr - 1)) & -mr;\n      op->prepacked_a =\n        (uint8_t*)realloc((void*)op->prepacked_a, k_stride * m_stride);\n\n      struct q8gemm_prepackA_sparse_dq_context\n        q8gemm_prepack_sparse_dq_context = {\n          .k = group_input_channels,\n          .a = op->input,\n          .a_stride = op->input_pixel_stride,\n          .a_packed = op->prepacked_a,\n          .a_packed_stride = k_stride * mr,\n          .log2_mr = log2_mr,\n          .log2_row_block_size = log2_row_block_size,\n          .kernel_col_indices = op->sparse_matrix.col_indices,\n          .kernel_row_values = op->sparse_matrix.row_values,\n          .kernel_values = op->sparse_matrix.values,\n          .bias = (const float*)op->bias,\n          .c = (float*)op->output,\n          .c_stride = op->output_pixel_stride,\n          .quantization_params = op->dynamic_conv_quantization_params,\n          .ukernel = compute_kernel,\n          .prepack_ukernel = prepack_kernel,\n      };"
},
{
    "Id": 83,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e8e29690ef0306da25b5f191623476001d29a18b",
    "Violation": "missing",
    "Bug report": " Add has_debug_def() check to net's debug_def() ",
    "Number of deleted lines": 2,
    "Deleted lines": "    return external_output_;\n  }\n\n  inline const vector<string>& external_input() const {\n    return external_input_;\n  }\n\n  /* Used to attach Observers to operators of a Net\n   *\n   * Returns pointers to objects owned with unique_ptrs.\n   * Use with caution.\n   */\n  virtual vector<OperatorBase*> GetOperators() const = 0;\n\n  const string& Name() const {\n    return name_;\n  }\n\n  inline const std::shared_ptr<const NetDef> debug_def() const {\n    return net_def_;\n  }\n\n protected:\n  virtual bool DoRunAsync() = 0;\n\n  vector<string> external_input_;\n  vector<string> external_output_;\n  string name_;\n  vector<const Event*> events_;\n  std::shared_ptr<const NetDef> net_def_;\n  DISABLE_COPY_AND_ASSIGN(NetBase);\n};\n\nCAFFE_DECLARE_REGISTRY(\n    NetRegistry,\n    NetBase,\n    const std::shared_ptr<const NetDef>&,\n    Workspace*);\n#define REGISTER_NET_CREATOR(key, ...) \\\n  CAFFE_REGISTER_CREATOR(NetRegistry, key, __VA_ARGS__)"
},
{
    "Id": 84,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/eed22921237eb4c1f4399af177ce912147a885c3",
    "Violation": "missing",
    "Bug report": " check for null commonworld in DestroyCommonWorld. Summary: Check for nullptr before closing a common world.",
    "Number of deleted lines": 0,
    "Deleted lines": "  std::string name_;\n  std::shared_ptr<::gloo::transport::Device> device_;\n\n  Workspace* ws_;\n  std::string status_blob_;\n\n  INPUT_TAGS(STORE_HANDLER, EXISTING_CW);\n  OUTPUT_TAGS(COMM);\n};\n\nclass DestroyCommonWorld final : public Operator<CPUContext> {\n public:\n  DestroyCommonWorld(const OperatorDef& operator_def, Workspace* ws)\n      : Operator<CPUContext>(operator_def, ws) {\n    cw_name_ = operator_def.input(0);\n  }\n\n  bool RunOnDevice() override {\n    const auto& context =\n        OperatorBase::Input<std::shared_ptr<::gloo::Context>>(0);\n\n    if (context) {\n      LOG(INFO) << \"Closing connections: \" << cw_name_;\n      context->closeConnections();\n    }\n    return true;\n  }\n\n private:\n  std::string cw_name_;\n};\n\n} // namespace gloo\n} // namespace caffe2\n"
},
{
    "Id": 85,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/d471eaeb1d2fbc7efcde6408d7d1e513b969af25",
    "Violation": "missing",
    "Bug report": "fix inline_container.cc inplace loading",
    "Number of deleted lines": 1,
    "Deleted lines": "  }\n  size_t key = getRecordID(name);\n  mz_zip_archive_file_stat stat;\n  mz_zip_reader_file_stat(ar_.get(), key, &stat);\n  TORCH_CHECK(\n      n == stat.m_uncomp_size,\n      \"record size \",\n      stat.m_uncomp_size,\n      \" mismatch with dst size \",\n      n);\n  valid(\"retrieving file meta-data for \", name.c_str());\n\n  mz_zip_reader_extract_iter_state* iter =\n      mz_zip_reader_extract_iter_new(ar_.get(), key, 0);\n  TORCH_CHECK(\n      iter != nullptr,\n      \"Failed to create zip reader iter: \",\n      mz_zip_get_error_string(mz_zip_get_last_error(ar_.get())));\n\n  for (size_t offset = 0; offset < stat.m_uncomp_size; offset += chunk_size) {\n    size_t want_size =\n        std::min(chunk_size, (size_t)stat.m_uncomp_size - offset);\n    size_t read_size =\n        mz_zip_reader_extract_iter_read(iter, buf, want_size);\n    TORCH_CHECK(\n        read_size == want_size,\n        \"Failed to advance zip reader iter: \",\n        mz_zip_get_error_string(mz_zip_get_last_error(ar_.get())));\n    memcpy_func((char*)dst + offset, buf, read_size);\n  }\n  valid(\"reading file \", name.c_str());\n  mz_zip_reader_extract_iter_free(iter);\n\n  return stat.m_uncomp_size;\n}\n\nstatic int64_t read_le_16(uint8_t* buf) {\n  return buf[0] + (buf[1] << 8);\n}"
},
{
    "Id": 86,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a5ca445f7953711bc90c111c3cad2ec87f02e74a",
    "Violation": "missing",
    "Bug report": "Check for corrupted ivalues. The error occurs because the `ivalues` field of flatbuffer module can be null, so the corresponding check must be inserted.",
    "Number of deleted lines": 0,
    "Deleted lines": "    auto func_ptr = parseFunction(func);\n    all_functions_[i] = func_ptr.get();\n    mcu_->register_function(std::move(func_ptr));\n  } else {\n    all_ivalues_[i] = parseIValue(ivalue);\n  }\n}\n\nmobile::Module FlatbufferLoader::parseModule(\n    mobile::serialization::Module* module) {\n  module_ = module;\n  all_ivalues_.clear();\n  all_types_.clear();\n  storages_.clear();\n  storage_loaded_.clear();\n  module_parsed_ = false;\n\n  const auto* ivalues = module->ivalues();\n  all_ivalues_.resize(ivalues->size());\n  all_types_.resize(module->object_types()->size());\n  storages_.resize(module->storage_data_size());\n  storage_loaded_.resize(module->storage_data_size(), false);\n\n  mobile_ivalue_size_ = module_->mobile_ivalue_size();\n  if (mobile_ivalue_size_ == 0) {\n    mobile_ivalue_size_ = ivalues->size();\n  }\n\n  for (uint32_t i = 0; i < mobile_ivalue_size_; i++) {\n    const auto* ival = ivalues->Get(i);\n    parseAndPopulate(i, ival);\n  }\n  IValue& module_ivalue = getIValue(module->state_obj());\n\n  // register functions\n  for (const auto& f : all_functions_) {\n    uint32_t class_index =\n        ivalues->Get(f.first)->val_as_Function()->class_type();"
},
{
    "Id": 87,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/6cc0f1c20c2f87a6c7b0e4abd5419e5007920999",
    "Violation": "missing",
    "Bug report": "Checking for nullptr in get_model_bytecode_version . One-liner commit to check that the ptr is not null. Just had `test_jit` that had a segfault there.",
    "Number of deleted lines": 0,
    "Deleted lines": "  size_t size = 0;\n  std::tie(data, size) = get_rai_content(rai.get());\n  return _get_model_bytecode_version_from_bytes(data.get(), size);\n}\n\nstatic uint64_t _get_model_bytecode_version_zip(\n    std::shared_ptr<ReadAdapterInterface> rai) {\n  if (!check_zip_file(rai)) {\n    TORCH_CHECK(\n        false,\n        \"Failed to open .ptl file please ensure the model was exported for mobile\");\n  }\n  PyTorchStreamReader reader(std::move(rai));\n  auto bytecode_values = get_bytecode_ivalues(reader);\n  return _get_model_bytecode_version(bytecode_values);\n}\n\nuint64_t _get_model_bytecode_version_from_bytes(char* data, size_t size) {\n  TORCH_CHECK(size >= kFileFormatHeaderSize, \"Unrecognized data format\");\n  auto format = getFileFormat(data);\n  switch (format) {\n    case FileFormat::FlatbufferFileFormat: {\n      return get_bytecode_version_from_bytes(data);\n    }\n    case FileFormat::ZipFileFormat: {\n      auto rai =\n          std::make_unique<caffe2::serialize::MemoryReadAdapter>(data, size);\n      auto version = _get_model_bytecode_version_zip(std::move(rai));\n      return version;\n    }\n\n    default:\n      TORCH_CHECK(false, \"Unrecognized data format\");\n  }\n}\n\nuint64_t _get_model_bytecode_version(\n    const std::vector<IValue>& bytecode_ivalues) {"
},
{
    "Id": 88,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/61b9d8fccd3361f21e1f3548c2a9538b62cc7525",
    "Violation": "improper",
    "Bug report": "It is apparently undefined behavior to do pointer arithmetic on nullptr. In the case of AppendOnlyList, `next_` will only be null if `end_` is also null and thus the `memcpy` path will only be triggered if `n == 0`. Nonetheless, it is U to `memcpy(0, 0, 0)`. The extra null check is in a `C10_LIKELY` block so the extra cost should be negligible, and indeed after dusting off the component microbenchmarks there's no observable difference.",
    "Number of deleted lines": 2,
    "Deleted lines": "  AppendOnlyList(const AppendOnlyList&) = delete;\n  AppendOnlyList& operator=(const AppendOnlyList&) = delete;\n\n  size_t size() const {\n    return n_blocks_ * ChunkSize + (size_t)(next_ - end_);\n  }\n\n  template <class... Args>\n  T* emplace_back(Args&&... args) {\n    maybe_grow();\n    *next_ = {std::forward<Args>(args)...};\n    return next_++;\n  }\n\n  template <typename T0>\n  typename std::enable_if<\n      std::is_same<T0, T>::value && std::is_trivially_copyable<T>::value>::type\n  copy(c10::ArrayRef<T0> src) {\n    int n = src.size();\n    if (C10_LIKELY(next_ + n <= end_)) {\n      std::memcpy((void*)next_, (void*)src.begin(), n * sizeof(T0));\n      next_ += n;\n    } else {\n      // We could chunk this into several `memcpy`s, but because we expect this\n      // fallback to be infrequent (n << ChunkSize) the performance impact is\n      // negligible.\n      for (auto i : src) {\n        emplace_back(i);\n      }\n    }\n  }\n\n  void clear() {\n    buffer_.clear();\n    buffer_last_ = buffer_.before_begin();\n    n_blocks_ = 0;\n    next_ = nullptr;\n    end_ = nullptr;\n  }\n"
},
{
    "Id": 89,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c06dfd7c26102ac2436ca25609c92fa794e972ca",
    "Violation": "missing",
    "Bug report": "Check input device in TRTModule. Add a check to ensure all the inputs are on cuda device.",
    "Number of deleted lines": 0,
    "Deleted lines": "        engine_bytes = state_dict[prefix + \"engine\"]\n\n        with trt.Logger() as logger, trt.Runtime(logger) as runtime:\n            self.engine = runtime.deserialize_cuda_engine(engine_bytes)\n            self.context = self.engine.create_execution_context()\n\n        self.input_names = state_dict[prefix + \"input_names\"]\n        self.output_names = state_dict[prefix + \"output_names\"]\n\n    def forward(self, *inputs):\n        assert len(inputs) == len(\n            self.input_names\n        ), f\"Wrong number of inputs, expect {len(self.input_names)} get {len(inputs)}.\"\n        batch_size = inputs[0].shape[0]\n        contiguous_inputs: List[torch.Tensor] = [i.contiguous() for i in inputs]\n        bindings: List[Any] = [None] * (len(self.input_names) + len(self.output_names))\n\n        for i, input_name in enumerate(self.input_names):\n            idx = self.engine.get_binding_index(input_name)\n            bindings[idx] = contiguous_inputs[i].data_ptr()\n\n            if not self.engine.has_implicit_batch_dimension:\n                self.context.set_binding_shape(idx, tuple(contiguous_inputs[i].shape))\n\n        # create output tensors\n        outputs: List[torch.Tensor] = []\n        for idx in range(len(inputs), len(inputs) + len(self.output_names)):\n            dtype = torch_dtype_from_trt(self.engine.get_binding_dtype(idx))\n\n            if self.engine.has_implicit_batch_dimension:\n                shape = (batch_size,) + tuple(self.engine.get_binding_shape(idx))\n            else:\n                shape = tuple(self.context.get_binding_shape(idx))\n\n            output = torch.empty(size=shape, dtype=dtype, device=\"cuda\")\n            outputs.append(output)\n            bindings[idx] = output.data_ptr()\n"
},
{
    "Id": 90,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/d3de37609f2f052a7efb098ab69540458ebaaa6c",
    "Violation": "insufficient",
    "Bug report": "Support fused_dropout with XPU backend. ## Motivation Enable the fused dropout optimization on XPU devices. ## Solution Add XPU device in the fused dropout acceptable checking.",
    "Number of deleted lines": 1,
    "Deleted lines": "namespace {\n\ntemplate<bool inplace>\nusing Ctype = typename std::conditional<inplace, Tensor&, Tensor>::type;\n\nTensor make_feature_noise(const Tensor& input) {\n  auto input_sizes = input.sizes();\n  TORCH_CHECK(input.dim() >= 2, \"Feature dropout requires at least 2 dimensions in the input\");\n  std::vector<int64_t> sizes;\n  sizes.reserve(input.dim());\n  sizes.push_back(input_sizes[0]);\n  sizes.push_back(input_sizes[1]);\n  for (int64_t i = 2; i < input.dim(); ++i)\n    sizes.push_back(1);\n  return at::empty(sizes, input.options());\n}\n\nbool is_fused_kernel_acceptable(const Tensor& input, double p) {\n  return input.is_cuda() && p > 0 && p < 1 && input.numel() > 0;\n}\n\n// NB: sure, we could have used different overloads here, but I would feel insecure\n// knowing that this dispatch depends only on the constness of the references\ntemplate<bool inplace>\nTensor& multiply(Tensor& input, const Tensor& noise) {\n  static_assert(inplace, \"Wrong multiply overload triggered in Dropout.cpp\");\n  return input.mul_(noise);\n}\n\ntemplate<bool inplace>\nTensor multiply(const Tensor& input, const Tensor& noise) {\n  static_assert(!inplace, \"Wrong multiply overload triggered in Dropout.cpp\");\n  return input.mul(noise);\n}\n\ntemplate<bool feature_dropout, bool alpha_dropout, bool inplace, typename T>\nCtype<inplace> _dropout_impl(T& input, double p, bool train) {\n  TORCH_CHECK(p >= 0 && p <= 1, \"dropout probability has to be between 0 and 1, but got \", p);\n  if (p == 0 || !train || input.numel() == 0) {"
},
{
    "Id": 91,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/7bf195f3608e0f28c30ffb6e2fecd74a1d4ee50a",
    "Violation": "missing",
    "Bug report": "fix kernel launch check in cross kernel",
    "Number of deleted lines": 1,
    "Deleted lines": "}\n\nvoid launch_cross_kernel(const TensorIteratorBase& iter, int64_t ostride,\n                         int64_t x1stride, int64_t x2stride) {\n  const auto N = iter.numel();\n  auto offset_calculator = make_element_offset_calculator<3>(iter);\n  TORCH_INTERNAL_ASSERT_DEBUG_ONLY(N > 0 && N <= std::numeric_limits<int32_t>::max());\n  int64_t grid = (N + NUM_THREADS - 1) / NUM_THREADS;\n  auto stream = at::cuda::getCurrentCUDAStream();\n\n  AT_DISPATCH_ALL_TYPES_AND_COMPLEX_AND(kHalf, iter.common_dtype(), \"cross_cuda\", [&] {\n    auto out = static_cast<scalar_t*>(iter.data_ptr(0));\n    auto x1 = static_cast<const scalar_t*>(iter.data_ptr(1));\n    auto x2 = static_cast<const scalar_t*>(iter.data_ptr(2));\n    constexpr int64_t int_max = std::numeric_limits<int>::max();\n    if (ostride * 2 > int_max || x1stride * 2 > int_max || x2stride * 2 > int_max) {\n      cross_kernel<<<grid, num_threads, 0, stream>>>(\n          N, out, x1, x2, offset_calculator, ostride, x1stride, x2stride);\n    } else {\n      cross_kernel<<<grid, num_threads, 0, stream>>>(\n          N, out, x1, x2, offset_calculator,\n          static_cast<int>(ostride),\n          static_cast<int>(x1stride),\n          static_cast<int>(x2stride));\n    }\n  });\n  C10_CUDA_KERNEL_LAUNCH_CHECK();\n}\n\nvoid cross_impl(Tensor& result, const Tensor& x1, const Tensor& x2, int64_t dim) {\n  const int64_t ostride = result.stride(dim);\n  const int64_t x1stride = x1.stride(dim);\n  const int64_t x2stride = x2.stride(dim);\n\n  auto iter = TensorIteratorConfig()\n      .add_output(result)\n      .add_input(x1)\n      .add_input(x2)\n      .resize_outputs(false)\n      .declare_static_shape(result.sizes(), /*squash_dims=*/dim)\n      .build();\n\n  if (iter.numel() == 0) {\n    return;\n  }\n\n  if (iter.can_use_32bit_indexing()) {"
},
{
    "Id": 92,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/15dbc566c57eedbd0245e786912e94586eba0fd2",
    "Violation": "missing",
    "Bug report": "Add missing cuda kernel launch check",
    "Number of deleted lines": 0,
    "Deleted lines": "              output_data_ptr,\n              segment_count,\n              offsets_data_ptr,\n              offsets_data_ptr + 1,\n              sum_op,\n              initial_value,\n              at::cuda::getCurrentCUDAStream());\n\n          post_sum_div_kernel<scalar_t>\n              <<<num_blocks,\n                 threads_per_block,\n                 0,\n                 at::cuda::getCurrentCUDAStream()>>>(\n                  output_data_ptr,\n                  lengths_data_ptr,\n                  segment_count,\n                  initial.has_value(),\n                  initial_value);\n        }\n      });\n\n  return output;\n}\n\nREGISTER_DISPATCH(_segment_reduce_stub, &_segment_reduce_cuda_kernel);\n\n} // namespace native\n} // namespace at\n"
},
{
    "Id": 93,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a8653f35de02c7fb038e3c184dda6e67a12a39e2",
    "Violation": "missing",
    "Bug report": "Perf win by check which device tensors are on",
    "Number of deleted lines": 0,
    "Deleted lines": "static Tensor& fill_out_quantized(Tensor& self, const Scalar& value) {\n  at::Tensor out = at::ones(self.sizes()).to(kFloat) * value;\n  out = out.to(self.device()).to(self.suggest_memory_format());\n  // Trust the `copy_` to handle the quantization and the boundary checks.\n  self.copy_(out);\n  return self;\n}\n\nTensor& fill_(Tensor& self, const Scalar& value) {\n  return fill_out(self, value);\n}\n\nTensor& fill_quantized_(Tensor& self, const Scalar& value) {\n  return fill_out_quantized(self, value);\n}\n\nTensor& fill_(Tensor& self, const Tensor& value) {\n  TORCH_CHECK(value.dim() == 0, \"fill_ only supports 0-dimension value tensor but got tensor with \", value.dim(), \" dimensions.\");\n  // Check if value is a view of self and if it is we clone\n  // it to avoid overwriting self prematurely\n  if(self.is_alias_of(value)) {\n    self.copy_(value.clone());\n  } else{\n    self.copy_(value);\n  }\n  return self;\n}\n\nTensor& fill_quantized_(Tensor& self, const Tensor& value) {\n  TORCH_CHECK(value.dim() == 0, \"fill_ only supports 0-dimension value tensor but got tensor with \", value.dim(), \" dimensions.\");\n  return fill_out_quantized(self, value.item());\n}\n\nTensor& fill_meta_(Tensor& self, const Scalar& value) {\n  return self;\n}\n\nTensor& fill_meta_(Tensor& self, const Tensor& value) {"
},
{
    "Id": 94,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/8b37821813b60a3ce2ae92e7a06057183578a450",
    "Violation": "insufficient",
    "Bug report": "if we want to use dp on other device ranther than \"cuda\", this balance  check will raise error, so I make the balance check only effective for `cuda`",
    "Number of deleted lines": 1,
    "Deleted lines": "            self.device_ids = []\n            return\n\n        if device_ids is None:\n            device_ids = _get_all_device_indices()\n\n        if device_ids is None:\n            raise RuntimeError(\"no available devices were found\")\n\n        if output_device is None:\n            output_device = device_ids[0]\n\n        self.dim = dim\n        self.module = module\n        self.device_ids = [_get_device_index(x, True) for x in device_ids]\n        self.output_device = _get_device_index(output_device, True)\n        self.src_device_obj = torch.device(device_type, self.device_ids[0])\n\n        _check_balance(self.device_ids)\n\n        if len(self.device_ids) == 1:\n            self.module.to(self.src_device_obj)\n\n    def forward(self, *inputs: Any, **kwargs: Any) -> Any:\n        with torch.autograd.profiler.record_function(\"DataParallel.forward\"):\n            if not self.device_ids:\n                return self.module(*inputs, **kwargs)\n\n            for t in chain(self.module.parameters(), self.module.buffers()):\n                if t.device != self.src_device_obj:\n                    raise RuntimeError(\"module must have its parameters and buffers \"\n                                       \"on device {} (device_ids[0]) but found one of \"\n                                       \"them on device: {}\".format(self.src_device_obj, t.device))\n\n            inputs, module_kwargs = self.scatter(inputs, kwargs, self.device_ids)\n            # for forward function without any inputs, empty list and dict will be created\n            # so the module can be executed on one device which is the first one in device_ids\n            if not inputs and not module_kwargs:\n                inputs = ((),)"
},
{
    "Id": 95,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/59a3759d9787091e75d939de603981a6d32505c8",
    "Violation": "missing",
    "Bug report": "When we need to link extra libs, we should notice that 64-bit CUDA may be installed in \"lib\", not in \"lib64\".",
    "Number of deleted lines": 1,
    "Deleted lines": "        if not is_standalone:\n            extra_ldflags.append('-ltorch_python')\n\n        if is_standalone and \"TBB\" in torch.__config__.parallel_info():\n            extra_ldflags.append('-ltbb')\n\n        if is_standalone:\n            extra_ldflags.append(f\"-Wl,-rpath,{TORCH_LIB_PATH}\")\n\n    if with_cuda:\n        if verbose:\n            print('Detected CUDA files, patching ldflags', file=sys.stderr)\n        if IS_WINDOWS:\n            extra_ldflags.append(f'/LIBPATH:{_join_cuda_home(\"lib\", \"x64\")}')\n            extra_ldflags.append('cudart.lib')\n            if CUDNN_HOME is not None:\n                extra_ldflags.append(f'/LIBPATH:{os.path.join(CUDNN_HOME, \"lib\", \"x64\")}')\n        elif not IS_HIP_EXTENSION:\n            extra_ldflags.append(f'-L{_join_cuda_home(\"lib64\")}')\n            extra_ldflags.append('-lcudart')\n            if CUDNN_HOME is not None:\n                extra_ldflags.append(f'-L{os.path.join(CUDNN_HOME, \"lib64\")}')\n        elif IS_HIP_EXTENSION:\n            assert ROCM_VERSION is not None\n            extra_ldflags.append(f'-L{_join_rocm_home(\"lib\")}')\n            extra_ldflags.append('-lamdhip64' if ROCM_VERSION >= (3, 5) else '-lhip_hcc')\n    return extra_ldflags\n\n\ndef _get_cuda_arch_flags(cflags: Optional[List[str]] = None) -> List[str]:\n    r'''\n    Determine CUDA arch flags to use.\n\n    For an arch, say \"6.1\", the added compile flag will be\n    ``-gencode=arch=compute_61,code=sm_61``.\n    For an added \"+PTX\", an additional\n    ``-gencode=arch=compute_xx,code=compute_xx`` is added.\n\n    See select_compute_arch.cmake for corresponding named and supported arches"
},
{
    "Id": 96,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e856a4d66bead8997a83f8714547c09fcbcdc263",
    "Violation": "missing",
    "Bug report": " Add an env var to skip cudnn version compatibility check. skip the check by setting `PYTORCH_SKIP_CUDNN_COMPATIBILITY_CHECK=1`",
    "Number of deleted lines": 0,
    "Deleted lines": "    def _init():\n        global __cudnn_version\n        if __cudnn_version is None:\n            __cudnn_version = _cudnn.getVersionInt()\n            runtime_version = _cudnn.getRuntimeVersion()\n            compile_version = _cudnn.getCompileVersion()\n            runtime_major, runtime_minor, _ = runtime_version\n            compile_major, compile_minor, _ = compile_version\n            # Different major versions are always incompatible\n            # Starting with cuDNN 7, minor versions are backwards-compatible\n            # Not sure about MIOpen (ROCm), so always do a strict check\n            if runtime_major != compile_major:\n                cudnn_compatible = False\n            elif runtime_major < 7 or not _cudnn.is_cuda:\n                cudnn_compatible = runtime_minor == compile_minor\n            else:\n                cudnn_compatible = runtime_minor >= compile_minor\n            if not cudnn_compatible:\n                base_error_msg = (f'cuDNN version incompatibility: '\n                                  f'PyTorch was compiled  against {compile_version} '\n                                  f'but found runtime version {runtime_version}. '\n                                  f'PyTorch already comes bundled with cuDNN. '\n                                  f'One option to resolving this error is to ensure PyTorch '\n                                  f'can find the bundled cuDNN.')\n\n                if 'LD_LIBRARY_PATH' in os.environ:\n                    ld_library_path = os.environ.get('LD_LIBRARY_PATH', '')\n                    if any(substring in ld_library_path for substring in ['cuda', 'cudnn']):\n                        raise RuntimeError(f'{base_error_msg}'\n                                           f'Looks like your LD_LIBRARY_PATH contains incompatible version of cudnn'\n                                           f'Please either remove it from the path or install cudnn {compile_version}')\n                    else:\n                        raise RuntimeError(f'{base_error_msg}'\n                                           f'one possibility is that there is a '\n                                           f'conflicting cuDNN in LD_LIBRARY_PATH.')\n                else:\n                    raise RuntimeError(base_error_msg)\n"
},
{
    "Id": 97,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/0fc110cdd19363f2eb5de68b6eeb82dadc933be0",
    "Violation": "missing",
    "Bug report": "The bug in libcuda.so that required is fixed for libcuda.so versions >= 11.4.This PR changes replay() to sync after each launch only if the process's in-use libcuda.so is < 11.4. With all the \"enhanced\" and \"forward\" compatibility promises flying around, and the fact that \"driver\" sometimes means kernel-mode driver and sometimes means user-mode driver (libcuda.so), I wasn't sure if this PR's check suffices to trigger the sync iff the in-use libcuda.so is 11.4, but Cuda people say what I wrote is reasonable.",
    "Number of deleted lines": 5,
    "Deleted lines": "  TORCH_CHECK(has_graph_exec_,\n              \"Called CUDAGraph::replay without a preceding successful capture.\");\n\n  c10::OptionalDeviceGuard device_guard{capture_stream_.device()};\n\n  // Just like any RNG consumer kernel!\n  auto* gen = get_generator_or_default<CUDAGeneratorImpl>(\n      c10::nullopt, cuda::detail::getDefaultCUDAGenerator());\n  PhiloxCudaState rng_engine_inputs;\n  {\n    std::lock_guard<std::mutex> lock(gen->mutex_);\n    rng_engine_inputs = gen->philox_cuda_state(wholegraph_increment_);\n  }\n  offset_extragraph_.fill_(int64_t(rng_engine_inputs.offset_.val));\n\n  // graph_exec_ may be replayed in any stream.\n  AT_CUDA_CHECK(cudaGraphLaunch(graph_exec_, at::cuda::getCurrentCUDAStream()));\n\n  // Temporary workaround for bug in libcuda.so that causes replayed graphs\n  // with certain topologies to be corrupted (kernels elided, internal syncs\n  // ignored) when replayed back to back without a sync in between.\n  // I hate to use a hard sync, but it's the only surefire workaround at the moment.\n  cudaDeviceSynchronize();\n#else\n  TORCH_CHECK(false, \"CUDA graphs may only be used in Pytorch built with CUDA >= 11.0\");\n#endif\n}\n\nvoid CUDAGraph::reset() {\n#if CUDA_VERSION >= 11000\n  // I'd prefer these checks throw exceptions, not print warnings,\n  // but the destructor calls reset(), and at least one CI build\n  // refuses to compile with a throwing destructor.\n  //\n  // Instead of calling reset() in the destructor to clean up, I could\n  // call reset() in the __del__ method of a thin Python wrapper,\n  // in which case reset would be allowed to throw exceptions.\n  // But Stackoverflow does not like user-defined __del__.\n  // __del__ prevents Graph instances from EVER being garbage collected\n  // if they participate in a reference cycle.\n  // And exceptions thrown in __del__ only print a warning anyway.\n  //\n  // Calling reset() in the C++ destructor, with warnings instead of exceptions"
},
{
    "Id": 98,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/ef44faece2cd4045f58cbbac6c74842b84ac6c45",
    "Violation": "insufficient",
    "Bug report": " check attribute existence in torch.legay.nn.SpatialFullConvolution in method type",
    "Number of deleted lines": 2,
    "Deleted lines": "\n        inputTensor, gradOutput = self._makeContiguous(inputTensor, gradOutput)\n        self._backend.SpatialFullConvolution_accGradParameters(\n            self._backend.library_state,\n            inputTensor,\n            gradOutput,\n            self.gradWeight,\n            self.gradBias,\n            self.finput,\n            self.fgradInput,\n            self.kW, self.kH,\n            self.dW, self.dH,\n            self.padW, self.padH,\n            adjW, adjH,\n            scale\n        )\n\n    def type(self, type=None, tensorCache=None):\n        if self.finput is not None:\n            self.finput = torch.Tensor()\n        if self.fgradInput is not None:\n            self.fgradInput = torch.Tensor()\n        return super(SpatialFullConvolution, self).type(type, tensorCache)\n\n    def __repr__(self):\n        s = super(SpatialFullConvolution, self).__repr__()\n        s += '({} -> {}, {}x{}'.format(self.nInputPlane, self.nOutputPlane, self.kW, self.kH)\n        if self.dW != 1 or self.dH != 1 or self.padW != 0 or self.padH != 0:\n            s += ', {}, {}'.format(self.dW, self.dH)\n\n        if (self.padW or self.padH) and (self.padW != 0 or self.padH != 0):\n            s += ', {}, {}'.format(self.padW, self.padH)\n\n        if (self.adjW or self.adjH) and (self.adjW != 0 or self.adjH != 0):\n            s += ', {}, {}'.format(self.adjW, self.adjH)\n\n        s += ')'\n        if self.bias is None:\n            s += ' without bias'\n        return s\n"
},
{
    "Id": 99,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5c93ca258bab7bd74a8ec94d64647e48c8ad8797",
    "Violation": "insufficient",
    "Bug report": "check attribute existence in SpatialFullConvolution",
    "Number of deleted lines": 4,
    "Deleted lines": "\n    def _calculateAdj(self, targetSize, ker, pad, stride):\n        return (targetSize + 2 * pad - ker) % stride\n\n    def updateOutput(self, input):\n        inputTensor = input\n        adjW, adjH = self.adjW, self.adjH\n\n        # The input can be a table where the second element indicates the target\n        # output size, in which case the adj factors are computed automatically\n        if isinstance(input, list):\n            inputTensor = input[0]\n            targetTensor = input[1]\n            tDims = targetTensor.dim()\n            tH = targetTensor.size(tDims - 2)\n            tW = targetTensor.size(tDims - 1)\n            adjW = self._calculateAdj(tW, self.kW, self.padW, self.dW)\n            adjH = self._calculateAdj(tH, self.kH, self.padH, self.dH)\n            if self.finput is None:\n                self.finput = input[0].new()\n            if self.fgradInput is None:\n                self.fgradInput = input[0].new()\n        else:\n            if self.finput is None:\n                self.finput = input.new()\n            if self.fgradInput is None:\n                self.fgradInput = input.new()\n\n        inputTensor = self._makeContiguous(inputTensor)\n        self._backend.SpatialFullConvolution_updateOutput(\n            self._backend.library_state,\n            inputTensor,\n            self.output,\n            self.weight,\n            self.bias,\n            self.finput,\n            self.fgradInput,\n            self.kW, self.kH,\n            self.dW, self.dH,\n            self.padW, self.padH,\n            adjW, adjH\n        )\n        return self.output\n\n    def updateGradInput(self, input, gradOutput):\n        if self.gradInput is None:"
},
{
    "Id": 100,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c5fdcd85c7570b654eec45b6cba7cc75b0cf8f6b",
    "Violation": "insufficient",
    "Bug report": "check pruned attributes before deleting. I copyed a pruned model after deleteing the derived tensors. In order to be able to reparameter the model, we should check the existence of the tensors here.",
    "Number of deleted lines": 1,
    "Deleted lines": "        named ``name+'_orig'`` is removed from the parameter list. Similarly,\n        the buffer named ``name+'_mask'`` is removed from the buffers.\n\n        Note:\n            Pruning itself is NOT undone or reversed!\n        \"\"\"\n        # before removing pruning from a tensor, it has to have been applied\n        assert (\n            self._tensor_name is not None\n        ), \"Module {} has to be pruned\\\n            before pruning can be removed\".format(\n            module\n        )  # this gets set in apply()\n\n        # to update module[name] to latest trained weights\n        weight = self.apply_mask(module)  # masked weights\n\n        # delete and reset\n        delattr(module, self._tensor_name)\n        orig = module._parameters[self._tensor_name + \"_orig\"]\n        orig.data = weight.data\n        del module._parameters[self._tensor_name + \"_orig\"]\n        del module._buffers[self._tensor_name + \"_mask\"]\n        setattr(module, self._tensor_name, orig)\n\n\nclass PruningContainer(BasePruningMethod):\n    \"\"\"Container holding a sequence of pruning methods for iterative pruning.\n    Keeps track of the order in which pruning methods are applied and handles\n    combining successive pruning calls.\n\n    Accepts as argument an instance of a BasePruningMethod or an iterable of\n    them.\n    \"\"\"\n\n    def __init__(self, *args):\n        self._pruning_methods = tuple()\n        if not isinstance(args, Iterable):  # only 1 item\n            self._tensor_name = args._tensor_name"
},
{
    "Id": 101,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/678c08bb55eef0c2e707a17d0cd6e50f5b9bd427",
    "Violation": "missing",
    "Bug report": "_ProcessGroupWrapper check needs to be gated on Gloo availability, this fails when gloo is not avail_ProcessGroupWrapper check needs to be gated on Gloo availability, this fails when gloo is not avail.",
    "Number of deleted lines": 4,
    "Deleted lines": "def _object_to_tensor(obj):\n    f = io.BytesIO()\n    _pickler(f).dump(obj)\n    byte_storage = torch.ByteStorage.from_buffer(f.getvalue())  # type: ignore[attr-defined]\n    # Do not replace `torch.ByteTensor` or `torch.LongTensor` with torch.tensor and specifying dtype.\n    # Otherwise, it will casue 100X slowdown.\n    # See: https://github.com/pytorch/pytorch/issues/65696\n    byte_tensor = torch.ByteTensor(byte_storage)\n    local_size = torch.LongTensor([byte_tensor.numel()])\n    return byte_tensor, local_size\n\n\ndef _tensor_to_object(tensor, tensor_size):\n    buf = tensor.numpy().tobytes()[:tensor_size]\n    return _unpickler(io.BytesIO(buf)).load()\n\ndef _check_for_nccl_backend(group):\n    pg = group or _get_default_group()\n    # It is not expected for PG to be wrapped many times, but support it just\n    # in case\n    while isinstance(pg, _ProcessGroupWrapper):\n        pg = pg.wrapped_pg\n\n    return (\n        is_nccl_available() and\n        isinstance(pg, ProcessGroupNCCL)\n    )\n\ndef all_gather_object(object_list, obj, group=None):\n    \"\"\"\n    Gathers picklable objects from the whole group into a list. Similar to\n    :func:`all_gather`, but Python objects can be passed in. Note that the object\n    must be picklable in order to be gathered.\n\n    Args:\n        object_list (list[Any]): Output list. It should be correctly sized as the\n            size of the group for this collective and will contain the output.\n        object (Any): Pickable Python object to be broadcast from current process.\n        group (ProcessGroup, optional): The process group to work on. If None,\n            the default process group will be used. Default is ``None``.\n\n    Returns:"
},
{
    "Id": 102,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/db1ac4e29b0f557711190c8d49d4afb5da1844e8",
    "Violation": "insufficient",
    "Bug report": "Summary: We should explicitly check for the gloo backend instead of relying on the shard's device, because user might pass a GPU tensor as input and a process group gloo as the pg, and expect that should work.",
    "Number of deleted lines": 1,
    "Deleted lines": "    group = c10d._find_or_create_pg_by_ranks_and_tag(tag, ranks, group_size)\n    assert group is not None\n\n    inplace_tensor_list = [t.clone(memory_format=torch.contiguous_format) for t in self]\n    work = dist.all_reduce_coalesced(inplace_tensor_list, op=op, group=group, async_op=True)\n    _register_tensor_work(inplace_tensor_list, work)\n\n    return inplace_tensor_list\n\ndef _all_gather_into_tensor(shard, tag, ranks, group_size):\n    # TODO add dim support?\n    group = c10d._find_or_create_pg_by_ranks_and_tag(tag, ranks, group_size)\n    assert group is not None\n    out_size = list(shard.size())\n    out_size[0] *= group_size\n    out_tensor = shard.new_empty(out_size)\n    assert out_tensor.is_contiguous()\n    # FIXME gloo doesn't support _allgather_base\n    if shard.is_cpu:\n        tensor_list = list(torch.chunk(out_tensor, group_size))\n        work = dist.all_gather(tensor_list, shard, group=group, async_op=True)\n    else:\n        work = dist.all_gather_into_tensor(out_tensor, shard, group=group, async_op=True)\n    _register_tensor_work(out_tensor, work)\n\n    return out_tensor\n\n\ndef _all_gather_into_tensor_coalesced(self, tag, rankset, group_size):\n    group = c10d._find_or_create_pg_by_ranks_and_tag(tag, rankset, group_size)\n    assert group is not None\n\n    def mk_out_tensor(shard):\n        out_size = list(shard.size())\n        out_size[0] *= group_size\n        out_tensor = shard.new_empty(out_size)\n        assert out_tensor.is_contiguous()\n        return out_tensor\n"
},
{
    "Id": 103,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/3ef4d697df5bfdbd27dfc7a79c0679da2b87e3af",
    "Violation": "missing",
    "Bug report": "default backend need to check for nccl availability. As titled, we can only initialize nccl backend when NCCL is available",
    "Number of deleted lines": 4,
    "Deleted lines": "            )\n            Backend.backend_capability[name.lower()] = [\"cpu\", \"cuda\"]\n        elif isinstance(devices, str):\n            # Single device string specified. Simply convert to list.\n            Backend.backend_capability[name.lower()] = [devices]\n        else:\n            Backend.backend_capability[name.lower()] = devices\n\n        Backend._plugins[name.upper()] = Backend._BackendPlugin(func, extended_api)\n\nclass BackendConfig:\n\n    def __init__(self, backend: Union[str, Backend]):\n        self.device_backend_map: Dict[torch.device, Backend] = {}\n\n        if backend == Backend.UNDEFINED:\n            # default config when backend is not specified\n            # supported since PyTorch 2.0\n            self.device_backend_map = {\n                \"cpu\": Backend.GLOO,\n                \"cuda\": Backend.NCCL,\n            }\n        elif backend.lower() in Backend.backend_list:\n            # Cases for when backend is a single string (without device types)\n            # e.g. \"nccl\", \"gloo\", \"ucc\", \"mpi\"\n            supported_devices = Backend.backend_capability[backend.lower()]\n            backend_val = Backend(backend)\n            self.device_backend_map = {\n                device : backend_val for device in supported_devices\n            }\n        elif \":\" in backend.lower():\n            # Backend specified in \"device:backend\" format\n            # make sure the backend string is in the correct format\n            # \"{device_type1}:{backend1},{device_type2}:{backend2}\"\n            # e.g. \"cpu:gloo,cuda:nccl\"\n            backend_str_error_message = f\"\"\"The custom backend string argument is invalid: {backend}.\n                Custom backend string is an experimental feature where the backend string must be in the format:\n                \"<device_type1>:<backend1>,<device_type2>:<backend2>...\". e.g. 'cpu:gloo,cuda:nccl'\"\"\"\n\n            # parse the backend string and populate the device_backend_map\n            for device_backend_pair_str in backend.lower().split(\",\"):\n                device_backend_pair = device_backend_pair_str.split(\":\")"
},
{
    "Id": 104,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/9bb1371cc20a14907dbc47bc98e3ac5de866e34b",
    "Violation": "missing",
    "Bug report": "Disable RDYNAMIC check with MSVC. Summary: When testing with clang-cl, the flag is added though it is unsupported and that generates a few warnings.",
    "Number of deleted lines": 4,
    "Deleted lines": "  message(STATUS \"Current compiler supports avx512f extension. Will build fbgemm.\")\n  # Also see CMakeLists.txt under caffe2/perfkernels.\n  set(CAFFE2_PERF_WITH_AVX512 1)\nendif()\ncmake_pop_check_state()\n\n# ---[ Checks if compiler supports -fvisibility=hidden\ncheck_cxx_compiler_flag(\"-fvisibility=hidden\" COMPILER_SUPPORTS_HIDDEN_VISIBILITY)\ncheck_cxx_compiler_flag(\"-fvisibility-inlines-hidden\" COMPILER_SUPPORTS_HIDDEN_INLINE_VISIBILITY)\nif(${COMPILER_SUPPORTS_HIDDEN_INLINE_VISIBILITY})\n  set(CAFFE2_VISIBILITY_FLAG \"-fvisibility-inlines-hidden\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CAFFE2_VISIBILITY_FLAG}\")\nendif()\n\n# ---[ Checks if linker supports -rdynamic. `-rdynamic` tells linker\n# -to add all (including unused) symbols into the dynamic symbol\n# -table. We need this to get symbols when generating backtrace at\n# -runtime.\ncheck_cxx_compiler_flag(\"-rdynamic\" COMPILER_SUPPORTS_RDYNAMIC)\nif(${COMPILER_SUPPORTS_RDYNAMIC})\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -rdynamic\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -rdynamic\")\nendif()\n\n# ---[ If we are using msvc, set no warning flags\n# Note(jiayq): if you are going to add a warning flag, check if this is\n# totally necessary, and only add when you see fit. If it is needed due to\n# a third party library (like Protobuf), mention it in the comment as\n# \"THIRD_PARTY_NAME related\"\n# From https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/\nif(${CMAKE_CXX_COMPILER_ID} STREQUAL \"MSVC\")\n  add_compile_options(\n      ##########################################\n      # Protobuf related. Cannot remove.\n      # This is directly copied from\n      #     https://github.com/google/protobuf/blob/master/cmake/README.md\n      ##########################################\n      /wd4018 # 'expression' : signed/unsigned mismatch\n      /wd4065 # (3): switch with default but no case.\n      /wd4146 # unary minus operator applied to unsigned type, result still unsigned\n      /wd4244 # Conversion from 'type1' to 'type2', possible loss of data.\n      /wd4251 # 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'"
},
{
    "Id": 105,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/48e675ac7519666ed5e96d8d49c468dfc15a5d66",
    "Violation": "missing",
    "Bug report": "fx quant: fix subtle bug in BinaryOpQuantizeHanlder logic in matching. When matching a pattern to `BinaryOpQuantizeHandler`, we need to make sure we check for dtype support on the base node, instead of the current node.  This is important in cases such as `add-relu` and `mul-relu`, when the current node is `relu`, but the base node is `add|mul`.",
    "Number of deleted lines": 3,
    "Deleted lines": "                    for subpattern, arg in zip(args, node.args):\n                        record_match(subpattern, arg, matched)\n            else:\n                matched.append(node)\n\n        cache_for_no_tensor_check: Dict[Node, bool] = dict()\n        for node in reversed(graph.nodes):\n            if node.name not in match_map and node.name not in all_matched:\n                for pattern, value in patterns.items():\n                    if is_match(modules, node, pattern):\n                        skip_this_match = False\n                        if value is BinaryOpQuantizeHandler:\n                            use_copy_node = all_node_args_have_no_tensors(node, modules, cache_for_no_tensor_check)\n                            if use_copy_node:\n                                # TODO(future PR): update the pattern to quantize\n                                # handler logic to take this into account.\n                                value = CopyNodeQuantizeHandler  # type: ignore\n\n                            this_node_qconfig = self.qconfig_map[node.name]\n                            if this_node_qconfig:\n                                dtypes = get_qconfig_dtypes(this_node_qconfig)\n                                # TODO(future PR): update the pattern to quantize\n                                # handler logic to take this into account.\n                                skip_this_match = (\n                                    (node.target in binary_op_supported_dtypes) and\n                                    (dtypes not in binary_op_supported_dtypes[node.target])\n                                )\n\n                        if not skip_this_match:\n                            matched: List[Any] = []\n                            record_match(pattern, node, matched)\n                            for n in matched:\n                                match_map[n.name] = (\n                                    node, matched, pattern, value(self, node),  # type: ignore\n                                    self.qconfig_map[n.name])\n                                all_matched.add(n.name)\n                            # break after finding the first match\n                            break\n\n        # add custom module instances to the match result\n        assert self.modules is not None\n        for node in graph.nodes:\n            if node.op == 'call_module' and \\\n               type(self.modules[node.target]) in custom_module_classes:\n                custom_module_qconfig = self.qconfig_map[node.name]\n                match_map[node.name] = ("
},
{
    "Id": 106,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/62732bdcdb8b6112e01366d4ad1c2a50e61da1ed",
    "Violation": "insufficient",
    "Bug report": "quick fix for invalid nodes. Summary: As title.Need to check whether node is valid before fusion",
    "Number of deleted lines": 0,
    "Deleted lines": "            node.replace_all_uses_with(new_node)\n            new_node.meta.update(node.meta)\n            graph.erase_node(node)\n\n\ndef is_node_meta_valid(node):\n    if node is None:\n        return True\n    if \"example_value\" not in node.meta:\n        return False\n    return True\n\n\ndef is_linear_node_can_be_fused(node):\n    input = get_arg_value(node, 0, \"input\")\n    weight = get_arg_value(node, 1, \"weight\")\n    return (\n        is_node_meta_valid(node)\n        and len(input.meta[\"example_value\"].shape) == 2\n        and len(weight.meta[\"example_value\"].shape) == 2\n    )\n\n\nclass BatchLinearFusion(BatchFusion):\n    \"\"\"\n    Batch linear fusion in pre grad pass.\n    Fuse linear with same size with torch.baddmm\n    \"\"\"\n\n    def _getitem_args(self, getitem_node: torch.fx.Node):\n        if getitem_node.target != operator.__getitem__ or (\n            getitem_node.op != \"call_function\"\n        ):\n            return None\n        return getitem_node.args[0]\n\n    def match(self, node):\n        if CallFunctionVarArgs(torch.nn.functional.linear).match("
},
{
    "Id": 107,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/aab55d6d0d7b958e32cfdbb69794e107cfceb6bc",
    "Violation": "missing",
    "Bug report": "Remove all the dequant nodes when the ref module has multi input args. When converting a ref module into a quant module, `_lower_static_weighted_ref_module` pass assumes the `ref_node` only has 1 input node, and only remove the first `dequant` node. We add a check in this PR to ensure this is the case for `_lower_static_weighted_ref_module` pass.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n        # Step 1: Change this pattern to use the corresponding quantized module\n        # For fused modules, we also check whether the inner module is a reference module\n        # If so, we replace the entire fused module with the corresponding quantized module\n        if ref_class in STATIC_LOWER_FUSED_MODULE_MAP:\n            inner_ref_class, q_class = STATIC_LOWER_FUSED_MODULE_MAP[ref_class]\n            if type(ref_module[0]) != inner_ref_class:  # type: ignore[index]\n                continue\n        else:\n            q_class = STATIC_LOWER_MODULE_MAP[ref_class]\n        output_scale = getattr(model, scale_node.target)\n        output_zero_point = getattr(model, zero_point_node.target)\n        q_module = q_class.from_reference(ref_module, output_scale, output_zero_point)\n        # replace reference module with quantized module\n        parent_name, module_name = _parent_name(ref_node.target)\n        setattr(modules[parent_name], module_name, q_module)\n\n        # Step 2: Reroute around dq_node, and remove q_node and its args\n        dq_node = ref_node.args[0]\n        assert(isinstance(dq_node, Node))\n        ref_node.replace_input_with(dq_node, dq_node.args[0])\n        q_node.replace_all_uses_with(ref_node)\n        model.graph.erase_node(q_node)\n        model.graph.erase_node(scale_node)\n        model.graph.erase_node(zero_point_node)\n\ndef _lower_dynamic_weighted_ref_module(model: QuantizedGraphModule):\n    \"\"\"\n    Traverse the graph and find quantize_per_tensor_dynamic - dequantize - ref_module patterns\n    and replace them with the dynamically quantized version of the ref module.\n    \"\"\"\n    named_modules = dict(model.named_modules(remove_duplicate=False))\n    for n in model.graph.nodes:\n        if n.op != \"call_module\" or \\\n           type(named_modules[str(n.target)]) not in \\\n           set(DYNAMIC_LOWER_MODULE_MAP.keys()).union(\n               set(DYNAMIC_LOWER_FUSED_MODULE_MAP.keys())):\n            continue"
},
{
    "Id": 108,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bae895cef0c12df5f64afa155ce5462e06f0e04a",
    "Violation": "missing",
    "Bug report": "Added check for kHIP in ATen/native/Copy.cpp",
    "Number of deleted lines": 0,
    "Deleted lines": "    TORCH_CHECK(false, \"Copying from quantized Tensor to non-quantized Tensor is not allowed, please use dequantize to get a float Tensor from a quantized Tensor\");\n  }\n\n  auto iter = TensorIterator();\n  iter.set_check_mem_overlap(true);\n  iter.add_output(self);\n  iter.add_input(src);\n  iter.dont_resize_outputs();\n  iter.dont_compute_common_dtype();\n  iter.build();\n\n  if (iter.numel() == 0) {\n    return self;\n  }\n\n  DeviceType device_type = iter.device_type(0);\n  if (iter.device_type(1) == kCUDA) {\n    device_type = kCUDA;\n  }\n\n  // TODO: if we need to, we can also enable this path for quantized tensor\n  if (device_type == kCPU && copy_transpose_valid(self, src) && !self.is_quantized()) {\n    copy_same_type_transpose_(self, src);\n    return self;\n  }\n\n  copy_stub(device_type, iter, non_blocking);\n  return self;\n}\n\nTensor& copy_(Tensor& self, const Tensor& src, bool non_blocking) {\n  auto maybe_outnames = namedinference::compute_broadcast_outnames(self, src);\n  {\n    NoNamesGuard guard;\n    copy_impl(self, src, non_blocking);\n  }\n  namedinference::propagate_names_if_nonempty(self, maybe_outnames);\n  return self;"
},
{
    "Id": 109,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/cf348bcdeecfe0b47a2245d95eaa8ef37fb7b53e",
    "Violation": "missing",
    "Bug report": "tighten hasCUDA check",
    "Number of deleted lines": 0,
    "Deleted lines": "  generator_registry[static_cast<int>(Backend::CUDA)]\n    .reset(new CUDAGenerator(this));\n#endif\n}\nContext::~Context() {\n#ifdef AT_CUDA_ENABLED\n  if(thc_state)\n    THCState_free(thc_state);\n#endif\n}\n\nContext & globalContext() {\n  static Context globalContext_;\n  return globalContext_;\n}\n\nbool Context::hasCUDA() const {\n#ifdef AT_CUDA_ENABLED\n  return true;\n#else\n  return false;\n#endif\n}\n\n\n}\n"
},
{
    "Id": 110,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/027c0d7f8e37e583c02b372df5331d73793c06b1",
    "Violation": "missing",
    "Bug report": "fixed compilations on xla tensor prin. This is done to avoid compilations during tensor printing. Torch performs some tensor operations like slicing to make the tensor readable. These operations result in compilations. Hence to avoid the compilations, copying the tensor to cpu before printing. Returning from this function would have resulted in 63 compiles, since PDB prints the value of the return output. In this case it is a xla tensor. Now with the current change, there is no compilation.",
    "Number of deleted lines": 0,
    "Deleted lines": "    suffixes = []\n\n    # This is used to extract the primal value and thus disable the forward AD\n    # within this function.\n    # TODO(albanD) This needs to be updated when more than one level is supported\n    self, tangent = torch.autograd.forward_ad.unpack_dual(inp)\n\n    # Note [Print tensor device]:\n    # A general logic here is we only print device when it doesn't match\n    # the device specified in default tensor type.\n    # Currently torch.set_default_tensor_type() only supports CPU/CUDA, thus\n    # torch._C._get_default_device() only returns either cpu or cuda.\n    # In other cases, we don't have a way to set them as default yet,\n    # and we should always print out device for them.\n    if self.device.type != torch._C._get_default_device()\\\n            or (self.device.type == 'cuda' and torch.cuda.current_device() != self.device.index):\n        suffixes.append('device=\\'' + str(self.device) + '\\'')\n\n    # TODO: add an API to map real -> complex dtypes\n    _default_complex_dtype = torch.cdouble if torch.get_default_dtype() == torch.double else torch.cfloat\n    has_default_dtype = self.dtype in (torch.get_default_dtype(), _default_complex_dtype, torch.int64, torch.bool)\n    if self.is_sparse:\n        suffixes.append('size=' + str(tuple(self.shape)))\n        suffixes.append('nnz=' + str(self._nnz()))\n        if not has_default_dtype:\n            suffixes.append('dtype=' + str(self.dtype))\n        indices_prefix = 'indices=tensor('\n        indices = self._indices().detach()\n        indices_str = _tensor_str(indices, indent + len(indices_prefix))\n        if indices.numel() == 0:\n            indices_str += ', size=' + str(tuple(indices.shape))\n        values_prefix = 'values=tensor('\n        values = self._values().detach()\n        values_str = _tensor_str(values, indent + len(values_prefix))\n        if values.numel() == 0:\n            values_str += ', size=' + str(tuple(values.shape))\n        tensor_str = indices_prefix + indices_str + '),\\n' + ' ' * indent + values_prefix + values_str + ')'\n    elif self.is_sparse_csr:"
},
{
    "Id": 111,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/ee91c328da5739ce03b3127cd7c542ce505212b8",
    "Violation": "improper",
    "Bug report": "Fix cuda/cpu check on NoneType ",
    "Number of deleted lines": 1,
    "Deleted lines": "                                 is not supported with NestedTensor input\"\n        elif torch.is_autocast_enabled():\n            why_not_fast_path = \"autocast is enabled\"\n\n        if not why_not_fast_path:\n            tensor_args = (\n                query,\n                key,\n                value,\n                self.in_proj_weight,\n                self.in_proj_bias,\n                self.out_proj.weight,\n                self.out_proj.bias,\n            )\n            # We have to use list comprehensions below because TorchScript does not support\n            # generator expressions.\n            if torch.overrides.has_torch_function(tensor_args):\n                why_not_fast_path = \"some Tensor argument has_torch_function\"\n            elif not all([(x.is_cuda or 'cpu' in str(x.device)) for x in tensor_args]):\n                why_not_fast_path = \"some Tensor argument is neither CUDA nor CPU\"\n            elif torch.is_grad_enabled() and any([x.requires_grad for x in tensor_args]):\n                why_not_fast_path = (\"grad is enabled and at least one of query or the \"\n                                     \"input/output projection weights or biases requires_grad\")\n            if not why_not_fast_path:\n                merged_mask, mask_type = self.merge_masks(attn_mask, key_padding_mask, query)\n\n                return torch._native_multi_head_attention(\n                    query,\n                    key,\n                    value,\n                    self.embed_dim,\n                    self.num_heads,\n                    self.in_proj_weight,\n                    self.in_proj_bias,\n                    self.out_proj.weight,\n                    self.out_proj.bias,\n                    merged_mask,\n                    need_weights,\n                    average_attn_weights,"
},
{
    "Id": 112,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/cdab6c8df9ff9331126f69ea59c23f06109f03d7",
    "Violation": "missing",
    "Bug report": "Support specifying None for obs_or_fq_ctr in target_dtype_info. It is cleaner for quantizer to say what does not need observation instead of putting fp32 observers. This diff add support for that by checking if target_dtype_info contains none for specific observers and if so skip inserting observers for those.",
    "Number of deleted lines": 0,
    "Deleted lines": "                # except if the second dtype is float, a dequant will be inserted\n                # without an observer in convert\n                # TODO(future PR): change this so a placeholder is inserted for\n                # future dequants, to make the logic easier to understand\n                (arg_as_input_target_dtype != torch.float) and\n                # if arg output dtype is in _DO_NOT_OBS_DTYPE_LIST do not insert observer\n                (arg_as_output_target_dtype not in _DO_NOT_OBS_DTYPE_LIST) and\n                # we won't insert extra observer for input if the nodes configured with\n                # reuse_input_obs_or_fq\n                not reuse_input_obs_or_fq\n            ) or (\n                # need to add input observer for dynamic quantization\n                # only add observer for first input for now, we may need to extend\n                # qconfig_dict and backend_config to support more general configurations\n                # of dynamic quantization, e.g. dynamically quantizing second input, third\n                # input etc.\n                arg_as_input_target_is_dynamic and arg is node.args[0]\n            )\n\n    else:\n        assert qconfig is not None\n        # custom flow for standalone modules\n        _, _, sm_prepare_custom_config, _ = \\\n            _get_standalone_module_configs(\n                node, named_modules, prepare_custom_config, qconfig, backend_config)\n        sm_input_quantized_idxs = sm_prepare_custom_config.input_quantized_indexes\n\n        # for args, this is set to the index of the current arg\n        # for kwargs, this is left at None\n        cur_input_idx = None\n        for arg_idx, arg_to_check in enumerate(node.args):\n            if arg_to_check is arg:\n                cur_input_idx = arg_idx\n                break\n\n        if cur_input_idx is None:\n            needs_obs = False\n        else:"
},
{
    "Id": 113,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/7f5737392d637a22d555a88a8546d8fc7ab31084",
    "Violation": "insufficient",
    "Bug report": "fix for fsdp exec order pre fwd record. When the sharding_strategy is set to SHARD_GRAD_OP and forward_prefetch=True, during direct validation run, self.is_first_iter will always be True (because training=False, iter+1 is not executed). Additionally, the _pre_forward_order_index of the first handle entering the record_pre_forward function is 0. This causes the handle to have a False result in the if condition at line 166 when entering the record_pre_forward function again (the expected value should be True because _pre_forward_order_index has actually been assigned a value). As a result, the first handle is repetitively added to handles_pre_forward_order, leading to incorrect prefetching order.",
    "Number of deleted lines": 1,
    "Deleted lines": "        self.handles_post_forward_order.append(handle)\n\n    def record_pre_forward(\n        self, handle: Optional[FlatParamHandle], is_training: bool\n    ) -> None:\n        \"\"\"\n        Records ``handles`` in the pre-forward order, where ``handles`` should\n        be a group of handles used in the same module's forward. If ``handles``\n        is empty, then it is omitted.\n\n        On the first iteration, this checks the execution order across ranks.\n        See :meth:`_check_order` for details.\n        \"\"\"\n        if not handle:\n            return\n        self._check_order(handle, is_training)\n        # Fix the order after the first iteration and only record the first\n        # usage of a handles key\n        if not self.is_first_iter or handle._pre_forward_order_index:\n            return\n        index = len(self.handles_pre_forward_order)\n        handle._pre_forward_order_index = index\n        self.handles_pre_forward_order.append(handle)\n\n    def _check_order(self, handle: FlatParamHandle, is_training: bool) -> None:\n        \"\"\"\n        Checks the forward execution order as long as ``is_training`` is\n        ``True`` since checking in eval mode is not supported. This only checks\n        if the distributed debug level is DETAIL.\n\n        - On the first iteration, this uses all-gathers to check that all ranks\n        are all-gathering the same handles and hence ``FlatParameter`` s,\n        raising an error if not.\n        - On subsequent iterations, this checks that each rank is locally\n        consistent with its own forward order from the first iteration, issuing\n        a warning if not. This issues a warning on the first deviating\n        iteration and stops warning thereafter.\n        \"\"\"\n        # Do not check order in eval mode since the post-backward callback does"
},
{
    "Id": 114,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/dcac4dd58edefb6951a60266e53d8767dc9be002",
    "Violation": "missing",
    "Bug report": "Add int32_t range check in packed_accessor32 in PyTorch TensorBase.  Summary: As ajtulloch suggested, we can make tensor.packed_accessor32<...>() raise an exception if tensor.numel() > std::numeric_limits<uint32_t>::max(). Trade-off: run-time check overhead (one-time) when doing `packed_accessor32` accessor.",
    "Number of deleted lines": 0,
    "Deleted lines": "  TensorAccessor<T,N> accessor() && = delete;\n\n  // Return a `GenericPackedTensorAccessor` for CUDA `Tensor`s. You have to specify scalar type and\n  // dimension. You can optionally specify RestrictPtrTraits as a template parameter to\n  // cast the data pointer to a __restrict__ pointer.\n  // In order to use this, your CUDA kernel has to take a corresponding GenericPackedTensorAccessor\n  // as an argument.\n  template<typename T, size_t N, template <typename U> class PtrTraits = DefaultPtrTraits, typename index_t = int64_t>\n  GenericPackedTensorAccessor<T,N,PtrTraits,index_t> generic_packed_accessor() const& {\n    static_assert(N > 0, \"accessor is used for indexing tensor, for scalars use *data_ptr<T>()\");\n    TORCH_CHECK(dim() == N, \"TensorAccessor expected \", N, \" dims but tensor has \", dim());\n    return GenericPackedTensorAccessor<T,N,PtrTraits,index_t>(static_cast<typename PtrTraits<T>::PtrType>(data_ptr<T>()),sizes().data(),strides().data());\n  }\n  template<typename T, size_t N, template <typename U> class PtrTraits = DefaultPtrTraits, typename index_t = int64_t>\n  GenericPackedTensorAccessor<T,N> generic_packed_accessor() && = delete;\n\n  template<typename T, size_t N, template <typename U> class PtrTraits = DefaultPtrTraits>\n  PackedTensorAccessor32<T,N,PtrTraits> packed_accessor32() const& {\n    return generic_packed_accessor<T,N,PtrTraits,int32_t>();\n  }\n  template<typename T, size_t N, template <typename U> class PtrTraits = DefaultPtrTraits>\n  PackedTensorAccessor32<T,N,PtrTraits> packed_accessor32() && = delete;\n\n  template<typename T, size_t N, template <typename U> class PtrTraits = DefaultPtrTraits>\n  PackedTensorAccessor64<T,N,PtrTraits> packed_accessor64() const& {\n    return generic_packed_accessor<T,N,PtrTraits,int64_t>();\n  }\n  template<typename T, size_t N, template <typename U> class PtrTraits = DefaultPtrTraits>\n  PackedTensorAccessor64<T,N,PtrTraits> packed_accessor64() && = delete;\n\n  // ~~~~~ Autograd API ~~~~~\n\n  /// \\fn bool is_leaf() const;\n  ///\n  /// All Tensors that have `requires_grad()` which is ``false`` will be leaf Tensors by convention.\n  ///\n  /// For Tensors that have `requires_grad()` which is ``true``, they will be leaf Tensors if they were\n  /// created by the user. This means that they are not the result of an operation and so"
},
{
    "Id": 115,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/027e3b7910fade8950038fb5044a548319510600",
    "Violation": "insufficient",
    "Bug report": "check if source is None when using tensor out variants",
    "Number of deleted lines": 1,
    "Deleted lines": "            if \"out\" in kwargs and not (\n                isinstance(kwargs[\"out\"], variables.ConstantVariable)\n                and kwargs[\"out\"].as_python_constant() is None\n            ):\n                # out variants of torch operators like torch.sort and\n                # torch.sigmoid mutate the tensors in the out field. Track such\n                # tensors and rewrite the symbolic locals.\n                if isinstance(tensor_variable, TupleVariable):\n                    assert isinstance(kwargs[\"out\"], (TupleVariable, ListVariable))\n                    output_tensor_names = [\n                        tx.find_symbolic_locals_name(x) for x in kwargs[\"out\"].items\n                    ]\n                    for idx, name in enumerate(output_tensor_names):\n                        if name in tx.symbolic_locals:\n                            tx.symbolic_locals[name] = tensor_variable.items[idx]\n                elif isinstance(tensor_variable, TensorVariable):\n                    assert isinstance(kwargs[\"out\"], TensorVariable)\n                    if (\n                        kwargs[\"out\"] in tx.output.graphargs\n                        and kwargs[\"out\"].size != tensor_variable.size\n                    ):\n                        # It's hard to get out variants with resizing on graph inputs work\n                        # properly across dynamo/aot/inductor, just fall back.\n                        unimplemented(\"out variants with resizing on graph inputs\")\n                    name = tx.find_symbolic_locals_name(kwargs[\"out\"])\n                    if name in tx.symbolic_locals:\n                        tx.symbolic_locals[name] = tensor_variable\n                else:\n                    unimplemented(f\"out variant of {type(kwargs['out'])}\")\n\n            return tensor_variable\n\n    def _call_cross_entropy_loss(self, tx, args, kwargs, options):\n        \"\"\"\n        functional: input, target, weight=None, size_average=None, ignore_index=- 100, reduce=None, reduction='mean',\n        label_smoothing=0.0\n\n        non functional ctor: weight=None, size_average=None, ignore_index=- 100, reduce=None, reduction='mean',\n        label_smoothing=0.0"
},
{
    "Id": 116,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/91066559a8c8e5978ed4de722317576b222267c5",
    "Violation": "improper",
    "Bug report": "truthy check for empty string in NameScope(). As in name. LATTE translation team moving some code from Python 2 to 3 uncovered a case where comparison between unicode and str types leads NameScope('') to prepend a separator to the beginning of blob names. This fixes it.",
    "Number of deleted lines": 1,
    "Deleted lines": "    if not hasattr(_threadlocal_scope, \"namescope\"):\n        _threadlocal_scope.namescope = ''\n    return _threadlocal_scope.namescope\n\n\ndef CurrentDeviceScope():\n    global _threadlocal_scope\n    if not hasattr(_threadlocal_scope, \"devicescope\"):\n        _threadlocal_scope.devicescope = None\n    return _threadlocal_scope.devicescope\n\n\n@contextlib.contextmanager\ndef NameScope(prefix, reset=False):\n    global _threadlocal_scope\n    assert isinstance(prefix, basestring), \\\n        \"NameScope takes in a string as its argument.\"\n    old_scope = CurrentNameScope()\n    prefix = prefix + _NAMESCOPE_SEPARATOR if prefix is not '' else ''\n    if reset:\n        _threadlocal_scope.namescope = prefix\n    else:\n        _threadlocal_scope.namescope = _threadlocal_scope.namescope + prefix\n\n    try:\n        yield\n    finally:\n        assert _threadlocal_scope.namescope.endswith(prefix), \\\n            \"The namescope variable is changed from outside NameScope() calls.\"\n        _threadlocal_scope.namescope = old_scope\n\n\n@contextlib.contextmanager\ndef DeviceScope(scope, node_name=None):\n    new_scope = caffe2_pb2.DeviceOption()\n    if scope:\n        assert isinstance(scope, caffe2_pb2.DeviceOption), \\\n            \"DeviceScope takes in a caffe2_pb2.DeviceOption as its argument.\"\n        new_scope.CopyFrom(scope)"
},
{
    "Id": 117,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e3542d2c12d8aaaccf8a53873e480c20dc6b7338",
    "Violation": "missing",
    "Bug report": "avoid unnecessary call to empty_tensor_restride in empty(). Our empty benchmark makes this call unconditionally. If MemoryFormat::Contiguous is indeed a common case (or if workloads are likely to use a consistent-ish memory format), then I'd expect checking first to be a win.",
    "Number of deleted lines": 2,
    "Deleted lines": "\n  int64_t nelements = prod_intlist(size);\n  caffe2::TypeMeta dtype = scalarTypeToTypeMeta(dtype_or_default(dtype_opt));\n  int64_t size_bytes = nelements * dtype.itemsize();\n  auto storage_impl = c10::make_intrusive<StorageImpl>(\n      c10::StorageImpl::use_byte_size_t(),\n      size_bytes,\n      allocator->allocate(size_bytes),\n      allocator,\n      /*resizeable=*/true);\n\n  auto tensor = detail::make_tensor<TensorImpl>(\n      std::move(storage_impl), at::DispatchKey::CPU, dtype);\n  // Default TensorImpl has size [0]\n  if (size.size() != 1 || size[0] != 0) {\n    tensor.unsafeGetTensorImpl()->set_sizes_contiguous(size);\n  }\n\n  auto memory_format = memory_format_opt.value_or(MemoryFormat::Contiguous);\n  tensor.unsafeGetTensorImpl()->empty_tensor_restride(memory_format);\n\n  return tensor;\n}\n\ntemplate <typename T>\nTensor tensor_cpu(ArrayRef<T> values, const TensorOptions& options) {\n  auto result = at::empty(values.size(), options);\n  AT_ASSERT(result.is_contiguous());\n  AT_DISPATCH_ALL_TYPES_AND_COMPLEX(result.scalar_type(), \"tensor_cpu\", [&] {\n    std::copy(\n        values.begin(), values.end(), result.template data_ptr<scalar_t>());\n  });\n  return result;\n}\n\ntemplate <typename T>\nTensor tensor_backend(ArrayRef<T> values, const TensorOptions& options) {\n  auto cpu_tensor = tensor_cpu(values, options.device(DeviceType::CPU));\n  return cpu_tensor.to(options.device());\n}"
},
{
    "Id": 118,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/45d5b3248b430aca70111316accd165954464589",
    "Violation": "missing",
    "Bug report": "Fixed C++ BatchNorm pretty_print() with optional momentum. Summary : Inserted a check for the momentum and print  \"None\" in case is not defined.",
    "Number of deleted lines": 1,
    "Deleted lines": "#include <c10/util/Exception.h>\n\n#include <cstddef>\n#include <ostream>\n#include <utility>\n#include <vector>\n\nnamespace F = torch::nn::functional;\n\nnamespace torch {\nnamespace nn {\n\ntemplate <size_t D, typename Derived>\nvoid BatchNormImplBase<D, Derived>::pretty_print(std::ostream& stream) const {\n  stream << std::boolalpha\n         << \"torch::nn::BatchNorm\" << D << \"d(\"\n         << this->options.num_features() << \", \"\n         << \"eps=\" << this->options.eps() << \", \"\n         << \"momentum=\" << this->options.momentum().value() << \", \"\n         << \"affine=\" << this->options.affine() << \", \"\n         << \"track_running_stats=\" << this->options.track_running_stats() << \")\";\n}\n\nvoid BatchNorm1dImpl::_check_input_dim(const Tensor& input) {\n  TORCH_CHECK(\n      input.dim() == 2 || input.dim() == 3,\n      \"expected 2D or 3D input (got \", input.dim(), \"D input)\");\n}\n\nvoid BatchNorm2dImpl::_check_input_dim(const Tensor& input) {\n  TORCH_CHECK(\n      input.dim() == 4,\n      \"expected 4D input (got \", input.dim(), \"D input)\");\n}\n\nvoid BatchNorm3dImpl::_check_input_dim(const Tensor& input) {\n  TORCH_CHECK(\n      input.dim() == 5,\n      \"expected 5D input (got \", input.dim(), \"D input)\");"
},
{
    "Id": 119,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/666ff0ae220e1a5c406b0bc5cd43283e1b18b38e",
    "Violation": "missing",
    "Bug report": "Update _create_c10d_store to check port value. Port number is int in python, but needs to be uint16_t when called for TCPStore constructor.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n\ndef _create_c10d_store(hostname, port, rank, world_size, timeout) -> Store:\n    \"\"\"\n    Smartly creates a c10d Store object on ``rank`` based on whether\n    we need to re-use agent store. The TCPStore server is assumed to be hosted\n    on ``hostname:port``.\n\n    If ``torchelastic_use_agent_store()`` is ``True``, then it is assumed that\n    the agent leader (node rank 0) hosts the TCPStore server (for which the\n    endpoint is specified by the given ``hostname:port``). Hence\n    ALL ranks will create and return a TCPStore client (e.g. ``start_daemon=False``).\n\n    If ``torchelastic_use_agent_store()`` is ``False``, then rank 0 will host\n    the TCPStore (with multi-tenancy) and it is assumed that rank 0's hostname\n    and port are correctly passed via ``hostname`` and ``port``. All\n    non-zero ranks will create and return a TCPStore client.\n    \"\"\"\n\n    if _torchelastic_use_agent_store():\n        attempt = os.environ[\"TORCHELASTIC_RESTART_COUNT\"]\n        tcp_store = TCPStore(hostname, port, world_size, False, timeout)\n        return PrefixStore(f\"/worker/attempt_{attempt}\", tcp_store)\n    else:\n        start_daemon = rank == 0\n        return TCPStore(\n            hostname, port, world_size, start_daemon, timeout, multi_tenant=True\n        )\n\n\ndef _tcp_rendezvous_handler(\n    url: str, timeout: timedelta = default_pg_timeout, **kwargs\n):\n    def _error(msg):\n        return _rendezvous_error(\"tcp:// rendezvous: \" + msg)\n\n    result = urlparse(url)\n    if not result.port:"
},
{
    "Id": 120,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/ba59d720cd5c5c81601b53d2c3397c46c1f87883",
    "Violation": "missing",
    "Bug report": "Change error message for torch.linspace(). Basically moves the error checking from the device-specific function to the native function.",
    "Number of deleted lines": 0,
    "Deleted lines": "\nTensor new_full(\n    const Tensor& self,\n    IntArrayRef size,\n    Scalar fill_value,\n    const TensorOptions& options\n    ) {\n  return at::full(size, fill_value, self.options().merge_in(options));\n}\n\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ linspace ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTensor linspace(\n    Scalar start,\n    Scalar end,\n    int64_t steps,\n    const TensorOptions& options) {\n  Tensor result = at::empty({steps}, options);\n  return at::linspace_out(result, start, end, steps);\n}\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ logspace ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTensor logspace(\n    Scalar start,\n    Scalar end,\n    int64_t steps,\n    double base,\n    const TensorOptions& options) {\n  Tensor result = at::empty({steps}, options);\n  return at::logspace_out(result, start, end, steps, base);\n}\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ones ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTensor ones(IntArrayRef size, const TensorOptions& options) {\n  return native::full(size, /*fill_value=*/1, options);"
},
{
    "Id": 121,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/babb28d2a3a755424f72518bc360d9f511a24463",
    "Violation": "improper",
    "Bug report": "Change DHCECK to CAFFE_ENFORCE in softmax_with_loss_op.cc. Summary: Based on discussion on the post in Caffe2 users. Changing DCHECK that works only in debug mode to CAFFE_ENFORCE that throws exception and is a better option. Update: Also correct the check for label_data >= 0, did not check for all elements previously. Moved it to inner loop.",
    "Number of deleted lines": 5,
    "Deleted lines": "\n    for (int i = 0; i < N; ++i) {\n      CAFFE_ENFORCE(\n          label_data[i] < D && label_data[i] >= 0,\n          \"Label seems incorrect: label value larger than number of classes: \",\n          label_data[i],\n          \" vs \",\n          D);\n      float weight = weights ? weights[i] : 1.0;\n      float l = -Pdata[i * D + label_data[i]] * weight;\n      loss_sum += l;\n      weight_sum += weight;\n    }\n    math::Exp(N * D, Pdata, Pdata, &context_);\n  } else {\n    const float* label_data = T.data<float>();\n\n    for (int i = 0; i < N; ++i) {\n      CAFFE_ENFORCE(\n          label_data[i] >= 0,\n          \"Label prob seems incorrect: label prob value must be nonnegative: \",\n          label_data[i]);\n      float l = 0.0;\n      float total_prob = 0.0;\n      float weight = weights ? weights[i] : 1.0;\n      for (int j = 0; j < D; ++j) {\n        l += -log(std::max(Pdata[i * D + j], 1e-20f)) * label_data[i * D + j] *\n            weight;\n        total_prob += label_data[i * D + j];\n      }\n      loss_sum += l;\n      DCHECK(std::abs(total_prob - 1.) < 1e-5f);\n      weight_sum += weight;\n    }\n  }\n\n  avg_loss->Resize(vector<TIndex>());\n  float* avg_loss_data = avg_loss->mutable_data<float>();\n  if (weight_sum != 0.0) {\n    avg_loss_data[0] = loss_sum * scale_ / weight_sum;\n  } else {\n    avg_loss_data[0] = 0.0;\n  }\n  return true;\n}\n\ntemplate <>\nbool SoftmaxWithLossGradientOp<float, CPUContext>::RunOnDevice() {\n  auto& X = Input(0); // Logits\n  auto& T = Input(1); // Labels / targets\n  // Input(2) is weights if given\n  auto& P = Input(InputSize() - 2); // Probabilities from softmax"
},
{
    "Id": 122,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bc371a2cd03ce573f3ad4f7be141364136028905",
    "Violation": "missing",
    "Bug report": "Add additional checks when tracing back during maybe share output observer function. Summary: Currently in `maybe_make_input_output_share_observers`  we trace back from a node to find the activation_post_process of the input node, we have internal use case which would error out during tracing back, this PR is adding a guard during this process to return False early when the node doesn't have any input",
    "Number of deleted lines": 0,
    "Deleted lines": "        first_arg_arg = trace_back_node\n\n        iteration_guard += 1\n        if iteration_guard > 10000:\n            raise AssertionError('Unable to find observer of previous node')\n\n    assert isinstance(first_arg_arg, Node)\n    target_to_use = first_arg_arg.target\n    assert isinstance(target_to_use, str)\n    obs_mod_to_use = modules[target_to_use]\n\n    if isinstance(first_arg, (list, tuple)):\n        # set all other input observer nodes to use that module\n        for input_idx, input_arg in enumerate(first_arg):\n            if input_idx == 0:\n                continue\n            iteration_guard = 0\n            while not is_activation_post_process_node(input_arg, modules):\n                input_arg = input_arg.args[0]\n                iteration_guard += 1\n                if iteration_guard > 10000:\n                    raise AssertionError('Unable to find observer of previous node')\n\n            parent_name, name = _parent_name(input_arg.target)\n            setattr(modules[parent_name], name, obs_mod_to_use)\n\n    # set the output observer node to use that module\n    for output_obs_node, _ in node.users.items():\n        assert is_activation_post_process_node(output_obs_node, modules)\n        parent_name, name = _parent_name(output_obs_node.target)\n        setattr(modules[parent_name], name, obs_mod_to_use)\n\n    # TODO(future PR): delete the orphaned observer modules\n    return True\n\ndef remove_output_observer(\n        node: Node,\n        model: torch.nn.Module,"
},
{
    "Id": 123,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/3aeaa21eb02953a9cbc62b3e61215572fc28453e",
    "Violation": "missing",
    "Bug report": "Revert \"Remove parent device mesh check",
    "Number of deleted lines": 0,
    "Deleted lines": "    # Create state for allreduce\n    state._inter_node_state = _get_default_comm_hook_state(\n        process_group=state._inter_node_pg,\n    )\n    return state\n\n\n@no_type_check\ndef _is_valid_hybrid_shard_pg_type(process_group: Any) -> bool:\n    return (\n        isinstance(process_group, tuple)\n        and len(process_group) == 2\n        and all(isinstance(pg, dist.ProcessGroup) for pg in process_group)\n    )\n\n\n@no_type_check\ndef _is_valid_hybrid_shard_device_mesh(device_mesh: DeviceMesh) -> bool:\n    return isinstance(device_mesh, DeviceMesh) and device_mesh.ndim == 2\n\n\n@no_type_check\ndef _init_intra_node_process_group(num_devices_per_node: int) -> dist.ProcessGroup:\n    \"\"\"\n    Return a process group across the current node.\n\n    For example, given each row is a distinct node:\n    0 1 2 3 4 5 6 7 8\n    9 10 11 12 13 14 15\n    This API would return an intra-node subgroup across\n    [0, 7] or [8, 15] depending on the process's rank.\n    For example, rank 3 would get [0, 7].\n    \"\"\"\n    intra_node_subgroup, _ = dist.new_subgroups(num_devices_per_node)\n    return intra_node_subgroup\n\n\n@no_type_check"
},
{
    "Id": 124,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5fc122bf3973504e619cd677ad4a7fc1011642cd",
    "Violation": "missing",
    "Bug report": "tensor.numpy() checks that no positional arguments are passed. * tensor.numpy() checks that no arguments are passed.",
    "Number of deleted lines": 0,
    "Deleted lines": "PyObject * THPTensor_(toNumpy)(THPTensor *self, PyObject *args) {\n#if !defined(WITH_NUMPY)\n  THPUtils_setError(\"PyTorch was compiled without numpy support\\n\");\n  return NULL;\n#elif defined(THC_GENERIC_FILE)\n  THPUtils_setError(\"can't convert CUDA tensor to numpy (it doesn't support GPU arrays). \"\n    \"Use .cpu() to move the tensor to host memory first.\");\n  return NULL;\n#elif !defined(NUMPY_TYPE_ENUM)\n  THPUtils_setError(\"numpy conversion for %s is not supported\\n\", THPUtils_typename(self));\n  return NULL;\n#else\n  npy_intp zero = 0;\n  int ndim;\n  npy_intp* sizes_ptr;\n  std::unique_ptr<npy_intp[]> sizes;\n  std::unique_ptr<npy_intp[]> strides;\n\n  // Numpy and Torch disagree on empty tensors. In Torch, an empty tensor\n  // is a tensor with zero dimensions. In Numpy, a tensor with zero dimensions\n  // is a scalar (with one element). So we'll convert an empty Torch tensor\n  // to a 1d Numpy tensor of shape [0]. Also see pushTensor in PythonToLua.cpp.\n  ndim = THTensor_(nDimension)(LIBRARY_STATE self->cdata);\n  if (ndim != 0) {\n\n    sizes.reset(new npy_intp[ndim]);\n    std::copy(self->cdata->size, self->cdata->size + ndim, sizes.get());\n    sizes_ptr = sizes.get();\n\n    if (!THTensor_(isContiguous)(LIBRARY_STATE self->cdata)) {\n      strides.reset(new npy_intp[ndim]);\n      // Numpy strides use bytes; Torch strides use element counts.\n      for (int i = 0; i < ndim; ++i) {\n        strides[i] = self->cdata->stride[i] * sizeof(real);\n      }\n    }\n  } else {\n    ndim = 1;"
},
{
    "Id": 125,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/647154f82ac2c57769f080c41452b3e5960ab94f",
    "Violation": "missing",
    "Bug report": "Assert tensor isn't sparse in enforce_invariants. There's no reason we can't check this, but I'm punting on implementing it for now.  But it currently segfaults, so this is an improvement",
    "Number of deleted lines": 0,
    "Deleted lines": "\n#include <iostream>\n\nnamespace at {\n\nvoid Tensor::enforce_invariants() {\n  if (impl_.get() == nullptr) {\n    throw std::runtime_error(\"TensorImpl with nullptr is not supported\");\n  }\n  // Following line throws if the method is not a POD data type or is not\n  // supported by ATen\n  scalar_type();\n  if (defined()) {\n    // If it's a variable - we definitely not in C2 land\n    if (!is_variable()) {\n      AT_ASSERTM(\n          impl_->dtype_initialized(),\n          \"Partially-initialized tensor not supported by at::Tensor\");\n      AT_ASSERTM(\n          impl_->storage_initialized(),\n          \"Partially-initialized tensor not supported by at::Tensor\");\n    }\n    // Ensure LegacyTypeDispatch is initialized. In ATen it's done in tensor\n    // factory functions, but when we get a tensor from Caffe2 we might bypass\n    // those factory functions.\n    initializeLegacyTypeDispatchFor(*impl_);\n  }\n}\n\nvoid Tensor::print() const {\n  if (defined()) {\n    std::cerr << \"[\" << type().toString() << \" \" << sizes() << \"]\" << std::endl;\n  } else {\n    std::cerr << \"[UndefinedTensor]\" << std::endl;\n  }\n}\n\nconst char * Tensor::toString() const {"
},
{
    "Id": 126,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/2c9dd886afc656a8bfe5d8bbcb601ee5877cee21",
    "Violation": "missing",
    "Bug report": "Modify torch.movedim to handle scalar as no-op. Summary: `torch.movedim` directly handle the case of a scalar tensor (0-dim) in input as a no-op by returning a view of the input tensor (after all the usual checks for the other parameters)",
    "Number of deleted lines": 0,
    "Deleted lines": "  auto wrap_dims = [&self_dim](const IntArrayRef& vec, DimVector& normalized_vec) {\n    for (const auto i : c10::irange(vec.size())) {\n      normalized_vec[i] = maybe_wrap_dim(vec[i], self_dim);\n    }\n  };\n\n  wrap_dims(src, normalized_src);\n  wrap_dims(dst, normalized_dst);\n\n  auto all_unique = [](const DimVector& dims) {\n    DimVector copy = dims;\n    std::sort(copy.begin(), copy.end());\n    auto duplicate = std::adjacent_find(copy.begin(), copy.end());\n    return duplicate == copy.end();\n  };\n  TORCH_CHECK(all_unique(normalized_src), \"movedim: repeated dim in `source` (\", src, \")\");\n  TORCH_CHECK(all_unique(normalized_dst), \"movedim: repeated dim in `destination` (\", dst, \")\");\n\n  // TODO: The algorithm below can probably be optimized.\n  // Reference: https://github.com/pytorch/pytorch/pull/41480#discussion_r456100505\n\n  // Algorithm Walkthrough\n  // Example Input\n  // Variable State:\n  //     normalized_src = 0, 1\n  //     normalized_dst = 2, 4\n  //     self_dim = 5\n  DimVector order(self_dim);\n  DimVector source_dims(self_dim);\n  DimVector destination_dims(self_dim);\n\n  // We initialize two vectors to track update to the dims\n  // `order` contains the final order of the dim positions.\n  // Variable State:\n  //     order = NA, NA, NA, NA, NA\n  //     source_dims = 0, 1, 2, 3, 4\n  //     destination_dims = 0, 1, 2, 3, 4\n  std::iota(source_dims.begin(), source_dims.end(), 0);"
},
{
    "Id": 127,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/52e76a305677dfaf26cd5d59bd1aa239375f833c",
    "Violation": "missing",
    "Bug report": "fix ShardedTensor.gather when shard is empty. current ShardedTensor.gather is not working as expectation when the shard is empty on any rank The root cause is identified that when a sharded tensor has no placement on a specific rank, the metadata doesn't include that rank's placement which introduces KeyError in :```shard_offset = shard_placement[shard. Metadata][1]``` It's fixed by adding an empty tensor check.",
    "Number of deleted lines": 0,
    "Deleted lines": "        if rank == dst:\n            assert out is not None\n            if enforce_dtype:\n                # enforce_dtype is deprecated.  Do it for backward compatibility.\n                dtype = out.dtype\n            # TODO make it as a view of out tensor\n            gather_list = [torch.empty((max_rank_size,), device=out.device, dtype=dtype) for _ in range(world_size)]\n        else:\n            gather_list = None\n\n        with torch.no_grad():\n            if enforce_dtype and len(local_shards) > 0:\n                # enforce_dtype is deprecated.  Do it for backward compatibility.\n                dtype = local_shards[0].tensor.dtype\n            data = torch.empty(max_rank_size, device=self._get_preferred_device(), dtype=dtype)\n\n            for shard in local_shards:\n                src = shard.tensor.flatten()\n                shard_offset = shard_placement[shard.metadata][1]\n                data[shard_offset: shard_offset + src.numel()].copy_(src)\n\n        dist.gather(\n            tensor=data,\n            gather_list=gather_list,\n            dst=dst,\n            group=self._process_group,\n        )\n        if rank != dst:\n            return\n        # In _validate_output_tensor_for_gather, we raise if out == None and rank == dst\n        out = cast(torch.Tensor, out)\n        assert gather_list is not None\n\n        full_size = self.metadata().size\n        dims = len(full_size)\n        for shard_md in self.metadata().shards_metadata:\n            rank, rank_offset = shard_placement[shard_md]\n            tensor = gather_list[rank]"
},
{
    "Id": 128,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4ee179c9528c8c6aae17a01f2b0d7e8235219219",
    "Violation": "insufficient",
    "Bug report": "Fix ConstantVariable init method if NumPy is missing. By adding `np is not None` check before `isinstance(value, np.number)`",
    "Number of deleted lines": 1,
    "Deleted lines": "    # become SetVariables. The solution here is to create a ConstantSetVariable that is more like a ConstantVariable.\n    # As this does not exist, we cannot add sets to this invariant.\n    list: \"List types must use ListVariable.\",\n    dict: \"Dict types must use ConstDictVariable.\",\n    torch.Tensor: \"Tensor types must use TensorVariable.\",\n    torch.SymInt: \"SymInts must use SymNodeVariable. \"\n    \"If the underlying value is static, we will create a ConstantVariable and specialize.\",\n    torch.SymFloat: \"SymInts must use SymNodeVariable\",\n}\n\n\nclass ConstantVariable(VariableTracker):\n    def __init__(self, value, **kwargs):\n        super().__init__(**kwargs)\n        if not ConstantVariable.is_literal(value):\n            for disallowed_type, reason in _type_to_assert_reason.items():\n                assert not isinstance(value, disallowed_type), reason\n\n        if isinstance(value, np.number):\n            self.value = value.item()\n        else:\n            self.value = value\n\n    def as_proxy(self):\n        return self.value\n\n    def __str__(self):\n        # return f\"ConstantVariable({self.value})\"\n        return f\"ConstantVariable({type(self.value).__name__})\"\n\n    def python_type(self):\n        return type(self.value)\n\n    def as_python_constant(self):\n        return self.value\n\n    @property\n    def items(self):\n        \"\"\""
},
{
    "Id": 129,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/ba766ef39a4fff2d8856e17747393d469e409775",
    "Violation": "missing",
    "Bug report": "Fix BN size check in eval mode",
    "Number of deleted lines": 3,
    "Deleted lines": "        Variable containing:\n        (0 ,.,.) =\n          0.0000  0.0000  0.0000\n          0.3452  0.4937 -0.9361\n          0.0000  0.0000  0.0000\n          0.0706 -2.1962 -0.6276\n        [torch.FloatTensor of size 1x4x3]\n\n    \"\"\"\n    return torch.nn.backends.thnn.backend.Embedding.apply(\n        input, embedding_matrix,\n        -1, max_norm, norm_type,\n        scale_grad_by_freq, sparse\n    )\n\n\ndef batch_norm(input, running_mean, running_var, weight=None, bias=None,\n               training=False, momentum=0.1, eps=1e-5):\n    size = list(input.size())\n    if reduce(mul, size[2:], size[0]) == 1:\n        raise ValueError('Expected more than 1 value per channel, got input size {}'.format(size))\n    f = torch._C._functions.BatchNorm(running_mean, running_var, training, momentum, eps, torch.backends.cudnn.enabled)\n    return f(input, weight, bias)\n\n\n# loss\n\ndef nll_loss(input, target, weight=None, size_average=True, ignore_index=-100):\n    r\"\"\"The negative log likelihood loss.\n\n    See :class:`~torch.nn.NLLLoss` for details.\n\n    Args:\n        input: :math:`(N, C)` where `C = number of classes` or `(N, C, H, W)`\n            in case of 2D - Loss\n        target: :math:`(N)` where each value is `0 <= targets[i] <= C-1`\n        weight (Variable, optional): a manual rescaling weight given to each\n            class. If given, has to be a Variable of size \"nclasses\"\n        size_average (bool, optional): By default, the losses are averaged\n            over observations for each minibatch. If size_average\n            is False, the losses are summed for each minibatch. Default: True"
},
{
    "Id": 130,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b287cb816c1ac52165920a121c98643c08d31ff7",
    "Violation": "insufficient",
    "Bug report": " inductor: make the vec_transpose's tiling stride doesn't depend on out_idx and tiling_idex. ",
    "Number of deleted lines": 2,
    "Deleted lines": "            ...\n      for i_outer ... (tail)\n        for ...\n          for ...\n            // generated by CppKernel\n            ...\n    \"\"\"\n\n    def __init__(self, args, num_threads, tiling_factor, tiling_indices, tiling_dtype):\n        super().__init__(\n            args, num_threads, tiling_factor, tiling_indices[1], tiling_dtype\n        )\n        self.tiling_indices = tiling_indices\n\n    def inner_itervar(self):\n        return sympy_symbol(f\"{self.itervars[self.outer_idx]}_inner\")\n\n    def need_vec_transpose(self, index):\n        return stride_at(self.itervars[self.outer_idx], index) == 1 and index.has(\n            self.itervars[self.tiling_idx]\n        )\n\n    def gen_transposed_tile_load_store(self, name, var, index, is_store):\n        # transposed tile load/store outside the kernel inner loop\n        dtype = V.graph.get_dtype(name)\n        factor = self.tiling_factor\n        src = f\"{var} + {cexpr_index(index)}\"\n        dst = \"__place_holder__\"\n        ld_src = f\"{cexpr_index(stride_at(self.itervars[self.tiling_idx], index))}\"\n        ld_dst = f\"{factor}\"\n        if is_store:\n            src, dst = dst, src\n            ld_src, ld_dst = ld_dst, ld_src\n\n        need_define = True\n        load_or_store = f\"at::vec::transpose_mxn<{DTYPE_TO_CPP[dtype]},{factor},{factor}>({src}, {ld_src}, {dst}, {ld_dst});\"\n        if is_store:\n            tile_var = self.cse.newvar()\n        elif load_or_store not in self.cse.cache:\n            tile_var = self.cse.generate(self.preloads, load_or_store, write=False)"
},
{
    "Id": 131,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/999bae0f54108ffc5b7cf2524a02a83901554b16",
    "Violation": "insufficient",
    "Bug report": "Add padding check for use_nnpack. nnp_convolution_output doesn't support the case of input padding > = kernel_size.",
    "Number of deleted lines": 1,
    "Deleted lines": "       (groups > 1\n        || (at::symint::size<T>(weight, -1) > 3 && at::symint::size<T>(weight, -2) > 3)\n        || at::symint::size<T>(input, 0) > 1\n        || at::symint::size<T>(input, 0)*at::symint::size<T>(input, 1)*at::symint::size<T>(input, 2)*at::symint::size<T>(input, 3) > 20480) // for some case, native is faster\n        );\n\n#endif\n    return false;\n  }\n  bool use_nnpack(const at::Tensor& input, const at::Tensor& weight) const  {\n#if AT_NNPACK_ENABLED()\n    return at::_nnpack_available() &&\n           input.device().is_cpu() &&\n           input.scalar_type() == kFloat && // only on CPU Float Tensors\n           !is_dilated() && // or dilation\n           !transposed &&   // or transposed tensors\n           input.ndimension() == 4 && // must be in NCHW format\n           weight.ndimension() == 4 &&\n           (at::symint::size<T>(weight, 2) < 17) && (at::symint::size<T>(weight, 3) < 17) // NNPACK only supports kernels up to 16x16\n#if !defined(C10_MOBILE)\n           && at::symint::size<T>(input, 0) >= 16 // ensure large enough batch size to ensure perf, tuneable\n#endif\n       ;\n#endif\n    return false;\n  }\n  bool use_xnnpack(const at::Tensor& input, const at::Tensor& weight,\n                   const at::OptionalArrayRef<T> bias_sizes_opt) const {\n#if defined(C10_MOBILE)\n    if (!transposed) {\n      // NB: for the call here, it MATTERS that we are templated. If you\n      // untemplate this to always use SymInt, the function\n      // xnnpack_use_convolution2d will always return false\n      return (at::symint::size<T>(input, 1) == groups) &&\n              xnnpack_use_convolution2d(\n                  input,\n                  weight,\n                  bias_sizes_opt,\n                  padding,"
},
{
    "Id": 132,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/66b04e3cb707d30c4698b269c83cb6221848f17a",
    "Violation": "missing",
    "Bug report": "nullptr profiling name. Sometimes profiling name can be a nullptr, which throws on conversion to std::string. This adds a check.",
    "Number of deleted lines": 1,
    "Deleted lines": "      size_t pg_id,\n      size_t seq_id,\n      const char* profiling_name,\n      const std::vector<at::Tensor>& inputs,\n      const std::vector<at::Tensor>& outputs,\n      EventList* start,\n      EventList* end) {\n    if (!enabled_) {\n      return c10::nullopt;\n    }\n    auto traceback =\n        torch::CapturedTraceback::gather(true, true, capture_cpp_stack_);\n    std::lock_guard<std::mutex> guard(mutex_);\n\n    auto te = Entry{\n        id_,\n        pg_id,\n        seq_id,\n        profiling_name,\n        std::move(traceback),\n        std::move(start),\n        std::move(end),\n        c10::getTime()};\n\n    for (const auto& input : inputs) {\n      c10::IntArrayRef sizes = input.sizes();\n      te.input_dims_.push_back(sizes.size());\n      te.sizes_.insert(te.sizes_.end(), sizes.begin(), sizes.end());\n    }\n\n    for (const auto& output : outputs) {\n      c10::IntArrayRef sizes = output.sizes();\n      te.output_dims_.push_back(sizes.size());\n      te.sizes_.insert(te.sizes_.end(), sizes.begin(), sizes.end());\n    }\n\n    if (entries_.size() < max_entries_) {\n      entries_.emplace_back(std::move(te));\n    } else {"
},
{
    "Id": 133,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/14c47fb211bc929ae4e505e7e13411faa2339f00",
    "Violation": "missing",
    "Bug report": " fix invalid-null-argument UBSAN error in math_cpu.cc. Add an if statement to check if the destination buffer is not nullptr.",
    "Number of deleted lines": 0,
    "Deleted lines": "    }\n#endif // __ARM_NEON__\n\n    image += image_size;\n  }\n}\n\ntemplate <>\nvoid CopyMatrix<CPUContext>(\n    const size_t itemsize,\n    const int M,\n    const int N,\n    const void* A,\n    const int lda,\n    void* B,\n    const int ldb,\n    CPUContext* /*context*/,\n    TypeMeta::TypedCopy copy) {\n  if (lda == N && ldb == N) {\n    // can coalese to a single memcpy of size M * N\n    if (copy) {\n      copy(static_cast<const char*>(A), static_cast<char*>(B), N * M);\n    } else {\n      memcpy(\n          static_cast<char*>(B), static_cast<const char*>(A), itemsize * N * M);\n    }\n    return;\n  }\n\n  for (int i = 0; i < M; ++i) {\n    if (copy) {\n      copy(\n          static_cast<const char*>(A) + lda * i * itemsize,\n          static_cast<char*>(B) + ldb * i * itemsize,\n          N);\n    } else {\n      memcpy(\n          static_cast<char*>(B) + ldb * i * itemsize,"
},
{
    "Id": 134,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f77f88fbc7511b405c4e493bdd74634b633f63d1",
    "Violation": "missing",
    "Bug report": "X86 qengine always uses fbgemm kernels on OS other than Linux. X86 quantization backend (qengine) with oneDNN kernels has not been validated on OS other than Linux. So, let it fall back to fbgemm if OS is not Linux. This makes sure the behavior is the same on Windows/Mac as the previous default fbgemm qengine on x86 CPUs.",
    "Number of deleted lines": 1,
    "Deleted lines": "      // This case is currently not supported in PyTorch\n      // but we do not want to raise an error in this util function.\n      is_symmetric = false;\n    } else {\n      auto output_channels = weight.size(0);\n      for (int i = 0; i < output_channels; ++i) {\n        auto zp = weight.q_per_channel_zero_points()[i].item<int32_t>();\n        is_symmetric &= (zp == 0);\n      }\n    }\n  } else {\n    // This case is currently not supported in PyTorch\n      // but we do not want to raise an error in this util function.\n    is_symmetric = false;\n  }\n  return is_symmetric;\n}\n\n// Check if onednn should be used w.r.t fbgemm\nstatic bool should_use_onednn_quant(\n    const at::Tensor& weight,\n    bool is_transposed_conv,\n    int groups,\n    torch::List<int64_t> output_padding) {\n  bool vnni_available = cpuinfo_has_x86_avx512vnni();\n  bool w_sym_quant =\n      is_weight_symmetric_quant(weight, is_transposed_conv);\n  bool opad_all_zero =\n      std::all_of(output_padding.begin(), output_padding.end(), [](int i) { return i==0; });\n  return vnni_available && (groups <= 100) && w_sym_quant && opad_all_zero;\n}\n\n} // onednn_utils\n\n#endif // #if AT_MKLDNN_ENABLED()\n"
},
{
    "Id": 135,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/acd51e13f727af22e6c9e579518362898f1b12e6",
    "Violation": "missing",
    "Bug report": "TorchScript add check if quantized",
    "Number of deleted lines": 0,
    "Deleted lines": "\n        def maybe_warn_nondeterministic():\n            if has_warned[0]:\n                return\n            has_warned[0] = True\n            nondeterm_ops = [op for op in traced_func.graph.nodes() if op.isNondeterministic()]\n            if len(nondeterm_ops) > 0:\n                nondeterministic_ops_warning = \"Trace had nondeterministic nodes. \"\n                nondeterministic_ops_warning += \"Did you forget call .eval() on your model? Nodes:\\n\"\n                nondeterministic_ops_warning += \"\\n\".join([indent(str(op)) for op in nondeterm_ops][:20])\n                nondeterministic_ops_warning += \"\\nThis may cause errors in trace checking. To disable trace checking,\"\\\n                                                \" pass check_trace=False to torch.jit.trace()\"\n                warnings.warn(nondeterministic_ops_warning, category=TracerWarning, stacklevel=5)\n\n        def compare_outputs(original, reference, match_what):\n            all_ok = True\n            for i, (orig, ref) in enumerate(zip(original, reference)):\n                try:\n                    torch.testing.assert_allclose(orig.double(), ref.double(), rtol=check_tolerance,\n                                                  atol=torch.testing._get_default_tolerance(orig, ref)[1])\n                except AssertionError as e:\n                    maybe_warn_nondeterministic()\n                    warnings.warn('Output nr ' + str(i + 1) + '. of the traced function does not match '\n                                  'the corresponding output of the ' + match_what + '. Detailed error:\\n' + str(e),\n                                  category=TracerWarning, stacklevel=4)\n                    all_ok = False\n\n            return all_ok\n\n        traced_outs = run_mod_and_filter_tensor_outputs(traced_func, inputs, 'trace')\n        fn_outs = run_mod_and_filter_tensor_outputs(func, inputs, 'Python function')\n        if compare_outputs(traced_outs, fn_outs, 'Python function'):\n            check_outs = run_mod_and_filter_tensor_outputs(check_mod_func, inputs, 'repeated trace')\n            compare_outputs(traced_outs, check_outs, 'repeated trace')\n\n        diag_info = graph_diagnostic_info()\n        if any(info is not None for info in diag_info):\n            raise TracingCheckError(*diag_info)"
},
{
    "Id": 136,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/0584fd9339af7c939ab7d955db05743ba58ff86d",
    "Violation": "improper",
    "Bug report": "Only insert observers for fixed qparam ops. Fixed a condition check for fixed qparam ops, previously we were including CopyNodes as well",
    "Number of deleted lines": 1,
    "Deleted lines": "        elif (isinstance(quantize_handler,\n                         FixedQParamsOpQuantizeHandler) and\n              not model.training) or \\\n                isinstance(quantize_handler, CopyNode):\n            # inserting observers for output of observed module, or\n            # mark the output as observed\n            assert node.op in [\n                'call_module',\n                'call_function',\n                'call_method'], \\\n                'CopyNode of type ' + node.op + ' is not handled'\n\n            def is_observed(input_arg):\n                if isinstance(input_arg, Node):\n                    return input_arg.name in observed_node_names_set\n                elif isinstance(input_arg, list):\n                    return all(map(is_observed, input_arg))\n\n            if activation_dtype(qconfig) == torch.float16:\n                insert_observer(\n                    node, qconfig.activation(),\n                    model, activation_post_process_map, env, observed_graph,\n                    load_arg, observed_node_names_set)\n            else:\n                # propagate observed property from input\n                if is_observed(node.args[0]):\n                    observed_node_names_set.add(node.name)\n        elif (isinstance(quantize_handler, BinaryOp) and\n              quantize_handler.num_node_args == 1):\n            assert matched_nodes is not None\n            input_node = matched_nodes[-1]  # first node in the sequence\n\n            def input_is_observed(arg):\n                return (isinstance(arg, Node) and\n                        arg.name in observed_node_names_set)\n            # This is checking if one of the argument of add/mul\n            # is an observed node\n            # If both of the inputs are number,\n            # we will not consider the output to be observed"
},
{
    "Id": 137,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/97245a06e14a5b87a0bca1908d7200603aff2c8c",
    "Violation": "missing",
    "Bug report": "TORCH_INTERNAL_ASSERT_DEBUG_ONLY won't be enabled during non-debug builds, but for 1 dimension Tensors the check is cheap enough and not catching this can slow down development a lot.",
    "Number of deleted lines": 5,
    "Deleted lines": "#include <ATen/ops/cat.h>\n#include <ATen/ops/empty.h>\n#include <ATen/ops/ones_native.h>\n#include <ATen/ops/prod.h>\n#include <ATen/ops/stack_native.h>\n#include <ATen/ops/tensor.h>\n#endif\n\n#include <utility>\n#include <vector>\n\nnamespace at {\nnamespace native {\nstruct NestedTensorImpl;\n\n// The following functions are used to construct nested tensors from buffers and\n// metadata.\n\ninline at::Tensor wrap_buffer(\n    at::Tensor buffer,\n    at::Tensor nested_sizes) {\n  TORCH_INTERNAL_ASSERT_DEBUG_ONLY(\n      buffer.is_contiguous(), \"Given buffer must be contiguous.\");\n  return at::detail::make_tensor<NestedTensorImpl>(\n      std::move(buffer), std::move(nested_sizes));\n}\n\n// TODO: Figure out if we need a non-moving wrap_buffer()\ninline at::Tensor wrap_buffer(\n    at::Tensor buffer,\n    at::Tensor nested_sizes,\n    at::Tensor nested_strides,\n    at::Tensor storage_offsets) {\n  TORCH_INTERNAL_ASSERT_DEBUG_ONLY(\n      buffer.is_contiguous(), \"Given buffer must be contiguous.\");\n  return at::detail::make_tensor<NestedTensorImpl>(\n      std::move(buffer),\n      std::move(nested_sizes),\n      std::move(nested_strides),\n      std::move(storage_offsets));\n}\n\ninline at::Tensor get_buffer(const at::Tensor& tensor) {"
},
{
    "Id": 138,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/9bcb4de16878073896d8743fbd70d5abe28b595a",
    "Violation": "insufficient",
    "Bug report": "check parameter k and l ",
    "Number of deleted lines": 1,
    "Deleted lines": "  for (const auto i : c10::irange(k, dims.size())) {\n    r *= dims[i];\n  }\n  return r;\n}\n\n// Product of all dims up to k (not including dims[k])\ninline int64_t size_to_dim_(int k, IntArrayRef dims) {\n  TORCH_CHECK((unsigned)k <= dims.size());\n  int64_t r = 1;\n  for (const auto i : c10::irange(k)) {\n    r *= dims[i];\n  }\n  return r;\n}\n\n// Product of all dims between k and l (not including dims[k] and dims[l])\ninline int64_t size_between_dim_(int k, int l, IntArrayRef dims) {\n  TORCH_CHECK((unsigned)l < dims.size());\n  int64_t r = 1;\n  if (k < l) {\n    for (int i = k + 1; i < l; ++i) {\n      r *= dims[i];\n    }\n  } else {\n    for (int i = l + 1; i < k; ++i) {\n      r *= dims[i];\n    }\n  }\n  return r;\n}\n\n// Wrap around axis_index if it is negative, s.t., -1 is the last dim\ninline int canonical_axis_index_(int axis_index, int ndims) {\n  TORCH_CHECK(axis_index >= -ndims);\n  TORCH_CHECK(axis_index < ndims);\n  if (axis_index < 0) {\n    return axis_index + ndims;\n  }"
},
{
    "Id": 139,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/65496e4e67b42e52b3428b0cf2d994e0aa1a9902",
    "Violation": "missing",
    "Bug report": "Bug fix in bound shape inferencer. Accessing dims() without boundary check is not good.",
    "Number of deleted lines": 1,
    "Deleted lines": "  } else if (op.output_size() == 0 || !shape_info_.count(op.output(0))) {\n    return;\n  }\n\n  const auto axis = helper.HasArgument(\"axis\")\n      ? helper.GetSingleArgument<int32_t>(\"axis\", -1)\n      : GetDimFromOrderString(\n            helper.GetSingleArgument<string>(\"order\", \"NCHW\"));\n\n  const auto& shape_info = shape_info_.at(op.output(0));\n  int output_channel = shape_info.shape.dims(axis);\n  int missing_shape_infos = 0;\n  int channel_acc = 0;\n  std::string input_to_infer;\n  for (const auto& i : op.input()) {\n    const auto it = shape_info_.find(i);\n    if (it != shape_info_.end()) {\n      const auto& current_input_shape = it->second;\n      channel_acc += current_input_shape.shape.dims(axis);\n    } else if (missing_shape_infos) {\n      LOG(INFO) << \"More than one missing shapes, previous one: \"\n                << input_to_infer;\n      // We can only infer one missing input shape info\n      return;\n    } else {\n      ++missing_shape_infos;\n      input_to_infer = i;\n    }\n  }\n\n  if (missing_shape_infos && !input_to_infer.empty()) {\n    auto input_shape_info = shape_info;\n    input_shape_info.shape.set_dims(axis, output_channel - channel_acc);\n    shape_info_.emplace(input_to_infer, std::move(input_shape_info));\n\n    // Infer the shape of the second output of Concat\n    InferCommonOp(op);\n    if (op.output_size() > 1 && shape_info_.count(op.output(1))) {\n      shape_info_[op.output(1)].dim_type = ShapeInfo::DimType::CONSTANT;"
},
{
    "Id": 140,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/260f66c3165ce0c48dd1514a916da6971d981578",
    "Violation": "missing",
    "Bug report": "Fix concat dimension check bug",
    "Number of deleted lines": 1,
    "Deleted lines": "    .Arg(\"axis\", \"*(type: int; default: -1)* Axis to concatenate on.\")\n    .Arg(\n        \"order\",\n        \"*(type: string; default='NCHW')* Order of blob dimensions. Concats on the C dimension.\")\n    .Arg(\n        \"add_axis\",\n        \"*(type: int)* Pass non-zero integer to add the axis specified in `axis` to all input tensors.\")\n    .TensorInferenceFunction(OpSchema::NeedsAllInputShapes([](const OperatorDef&\n                                                                  def,\n                                                              const vector<\n                                                                  TensorShape>&\n                                                                  in) {\n      ArgumentHelper helper(def);\n      const int axis = helper.HasArgument(\"axis\")\n          ? helper.GetSingleArgument<int>(\"axis\", -1)\n          : GetDimFromOrderString(\n                helper.GetSingleArgument<string>(\"order\", \"NCHW\"));\n      bool add_axis = helper.GetSingleArgument<int>(\"add_axis\", 0) != 0;\n      const int canonical_axis = canonical_axis_index_(axis, in[0].dims_size());\n      CAFFE_ENFORCE_GT(in.size(), 0);\n      vector<int> split_shape(1, in.size());\n      vector<int> out_shape(in[0].dims().begin(), in[0].dims().end());\n      if (add_axis) {\n        for (int i = 1; i < in.size(); ++i) {\n          CAFFE_ENFORCE_EQ(\n              in[0].dims().size(),\n              in[i].dims().size(),\n              \"All inputs of Concat should have same dims when add_axis = 1. \"\n              \"Got different sizes for inputs 0 and \",\n              i);\n          for (int j = 0; j < in[0].dims().size(); ++j) {\n            CAFFE_ENFORCE_EQ(\n                in[0].dims(j),\n                in[i].dims(j),\n                \"All inputs of Concat should have same dims when add_axis = 1. \"\n                \"Got different dims for inputs 0 and \",\n                i,\n                \". At dim: \",\n                j);"
},
{
    "Id": 141,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/dc07102b17915f21170fae9a9d52c6f2d59726ca",
    "Violation": "missing",
    "Bug report": "Check dim size preventively when doing shape inference for BatchMatMul. We check input(0) but not input(1) in BatchMatMul. This may result in a protobuf exception which won't be caught by upstream and causing termination of the program. Check that with `CAFFE_ENFORCE` will be caught by upstream inference function. Plus, it will print out clean stack tracing showing where went wrong.",
    "Number of deleted lines": 0,
    "Deleted lines": ""
},
{
    "Id": 142,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/77523df413ff7f8a336b6481cfa47967c234a149",
    "Violation": "missing",
    "Bug report": "Add more check on softmax ONNX exporting logic. * Add more check on softmax exporting logic * Add more comments about axis and dim",
    "Number of deleted lines": 0,
    "Deleted lines": "        return _unimplemented(\"threshold\", \"non-zero value\")\n    return g.op(\"Relu\", self)\n\n\ndef leaky_relu(g, input, negative_slope, inplace=False):\n    # See Note [Export inplace]\n    # TODO: Talk to ONNX about unconditional cast of scalar to float\n    return g.op(\"LeakyRelu\", input, alpha_f=_scalar(negative_slope))\n\n\ndef glu(g, input, dim):\n    assert input.type().sizes()[dim] % 2 == 0\n\n    first, second = g.op('Split', input, axis_i=dim, outputs=2)\n    return g.op('Mul', first, g.op('Sigmoid', second))\n\n\ndef softmax(g, input, dim=None):\n    return g.op('Softmax', input, axis_i=dim)\n\n\ndef softplus(g, self, beta, threshold):\n    if beta != 1:\n        return _unimplemented(\"beta\", \"has to be 1\")\n    return g.op('Softplus', self)\n\n\ndef max_pool1d(g, input, kernel_size, stride, padding, dilation, ceil_mode):\n    if ceil_mode:\n        return _unimplemented(\"max_pool1d\", \"ceil_mode\")\n    if set(_single(dilation)) != {1}:\n        return _unimplemented(\"max_pool1d\", \"dilation\")\n    if stride is None:\n        stride = kernel_size\n    r = g.op(\"MaxPool\", input,\n             kernel_shape_i=_single(kernel_size),\n             pads_i=_single(padding) * 2,\n             strides_i=_single(stride))"
},
{
    "Id": 143,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a53f4b0f9bbc007c0a92e4fd28dd22af027e24a8",
    "Violation": "missing",
    "Bug report": " add dimension check to NHWC2NCHW shape inference. Summary: To prevent assertion from protobuffer when accessing the dims.",
    "Number of deleted lines": 0,
    "Deleted lines": "        for (int w = 0; w < W; ++w) {\n          Ydata[((n * H + h) * W + w) * C + c] = *(Xdata++);\n        }\n      }\n    }\n  }\n  return true;\n}\n\n\nREGISTER_CPU_OPERATOR(NHWC2NCHW, NHWC2NCHWOp<float, CPUContext>);\nREGISTER_CPU_OPERATOR(NCHW2NHWC, NCHW2NHWCOp<float, CPUContext>);\n\nOPERATOR_SCHEMA(NHWC2NCHW)\n    .NumInputs(1)\n    .NumOutputs(1)\n    .TensorInferenceFunction([](const OperatorDef& /*unused*/ /*def*/,\n                                const vector<TensorShape>& in) {\n      vector<TensorShape> out(1);\n      out[0].add_dims(in[0].dims(0));\n      out[0].add_dims(in[0].dims(3));\n      out[0].add_dims(in[0].dims(1));\n      out[0].add_dims(in[0].dims(2));\n      return out;\n    })\n    .SetDoc(R\"DOC(\nThe operator switches the order of data in a tensor from NHWC- sample index N,\nheight H, width H and channels C, to the NCHW order.\n)DOC\")\n    .Input(0, \"data\", \"The input data (Tensor<float>) in the NHWC order.\")\n    .Output(\n        0,\n        \"output\",\n        \"The output tensor (Tensor<float>) in the NCHW order.\");\n\nOPERATOR_SCHEMA(NCHW2NHWC).NumInputs(1).NumOutputs(1)\n  .SetDoc(R\"DOC(\nThe operator switches the order of data in a tensor from NCHW- sample index N,"
},
{
    "Id": 144,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/ecd3c252b4da3056797f8a505c9ebe8d68db55c4",
    "Violation": "missing",
    "Bug report": "Suport all length one SLS op lowering: C2 part. We check the input shape of lengths and indices of SLS and add an attribute if they are the same.",
    "Number of deleted lines": 0,
    "Deleted lines": "  }\n  if (opts_.min_ops > net.op_size()) {\n    return net;\n  }\n  // We already have all the ops and external inputs and outputs!\n  NetDef onnxifi_net(net);\n\n  // Remove the second output of Concat/Reshape from external_output. In\n  // addition, we remove those outputs from the Onnxifi op too.\n  // TODO: This approach is a bit hacky as we assume that the second output is\n  // never used. A more appropriate approach can be learned from the ONNX path,\n  // where we statically computes the split_info given input shape and insert a\n  // GivenTensorIntFill op\n  std::unordered_set<std::string> split_infos;\n  for (auto& op : *onnxifi_net.mutable_op()) {\n    if ((op.type() == \"Concat\" || op.type() == \"Reshape\") &&\n        op.output_size() == 2) {\n      split_infos.emplace(op.output(1));\n    }\n  }\n  onnxifi_net.clear_external_output();\n  for (const auto& o : net.external_output()) {\n    if (!split_infos.count(o)) {\n      onnxifi_net.add_external_output(o);\n    }\n  }\n\n  // Figure out weights and add it to external_inputs too\n  std::unordered_set<std::string> initialization_list;\n  std::vector<std::string> total_inputs_vec;\n  getWeightsAndInputs(\n      net,\n      weights_in_ws,\n      std::vector<std::string>(),\n      &initialization_list,\n      &total_inputs_vec);\n  auto* shape_arg = onnxifi_net.add_arg();\n  auto* qshape_arg = onnxifi_net.add_arg();"
},
{
    "Id": 145,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/55092b1cc604fad3d70d31e71bbdd3a43a279423",
    "Violation": "missing",
    "Bug report": "Validate matching input shapes in Int8Add operator. Default engine doesn't support broadcast semantics in Int8Add operator. This patch adds a check that shapes are equivalent.",
    "Number of deleted lines": 0,
    "Deleted lines": " public:\n  Int8AddOp(const OperatorDef& operator_def, Workspace* ws)\n      : Operator<CPUContext>(operator_def, ws),\n        ws_(ws) {}\n\n  ~Int8AddOp() {\n    if (this->qnnpackOperator_ != nullptr) {\n      qnnp_delete_operator(this->qnnpackOperator_);\n      this->qnnpackOperator_ = nullptr;\n    }\n  }\n\n  bool RunOnDevice() override {\n    CAFFE_ENFORCE_EQ(Inputs().size(), 2);\n    const auto& A = Inputs()[0]->template Get<Int8TensorCPU>();\n    const auto& B = Inputs()[1]->template Get<Int8TensorCPU>();\n    auto* Y = Outputs()[0]->template GetMutable<Int8TensorCPU>();\n\n    /*\n     * Record quantization parameters for A and B inputs, because if the op is\n     * in-place, we may overwrite these parameters later, when we set\n     * quantization parameters for Y tensor.\n     */\n    const uint8_t A_zero_point = A.zero_point;\n    const uint8_t B_zero_point = B.zero_point;\n    const float A_scale = A.scale;\n    const float B_scale = B.scale;\n\n    const int32_t Y_zero_point =\n      this->template GetSingleArgument<int>(\"Y_zero_point\", 0);\n    const float Y_scale =\n      this->template GetSingleArgument<float>(\"Y_scale\", 1);\n    Y->t.ResizeLike(A.t);\n    Y->zero_point = Y_zero_point;\n    Y->scale = Y_scale;\n\n    initQNNPACK();\n"
},
{
    "Id": 146,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/1f819ee965894b8332cb364a67c91855c91c9dcc",
    "Violation": "missing",
    "Bug report": "Add check for no grad in transformer encoder nestedtensor conversion.  Before, we allowed inputs with grad to be converted to NestedTensors. Autograd attempts to find the size of the NestedTensor, but NestedTensor throws an exception for its size function. This causes all calls to nn.TransformerEncoder with grad enabled to fail. Fix: we add a check for no grad in transformer encoder so we do not convert tensor with grad to nestedtensor.",
    "Number of deleted lines": 3,
    "Deleted lines": "                    src.dim() == 3 and self.enable_nested_tensor) :\n                if src_key_padding_mask is not None and not output.is_nested and mask is None:\n                    tensor_args = (\n                        src,\n                        first_layer.self_attn.in_proj_weight,\n                        first_layer.self_attn.in_proj_bias,\n                        first_layer.self_attn.out_proj.weight,\n                        first_layer.self_attn.out_proj.bias,\n                        first_layer.norm1.weight,\n                        first_layer.norm1.bias,\n                        first_layer.norm2.weight,\n                        first_layer.norm2.bias,\n                        first_layer.linear1.weight,\n                        first_layer.linear1.bias,\n                        first_layer.linear2.weight,\n                        first_layer.linear2.bias,\n                    )\n                    if not torch.overrides.has_torch_function(tensor_args):\n                        if output.is_cuda or 'cpu' in str(output.device):\n                            convert_to_nested = True\n                            output = torch._nested_tensor_from_mask(output, src_key_padding_mask.logical_not())\n\n        for mod in self.layers:\n            if convert_to_nested:\n                output = mod(output, src_mask=mask)\n            else:\n                output = mod(output, src_mask=mask, src_key_padding_mask=src_key_padding_mask)\n\n        if convert_to_nested:\n            output = output.to_padded_tensor(0.)\n\n        if self.norm is not None:\n            output = self.norm(output)\n\n        return output\n\n\nclass TransformerDecoder(Module):\n    r\"\"\"TransformerDecoder is a stack of N decoder layers\n\n    Args:"
},
{
    "Id": 147,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/dc43ad428603539a2051940c09b191825f66203d",
    "Violation": "missing",
    "Bug report": " add is_grad_enabled check in runtime_wrapper before running with torch.no_grad. We observed that `with torch.no_grad()` in runtime_wrapper introduced ~10% (0.06ms->0.066ms) inference performance regression on lennard_jones on cpu. For inference tasks in benchmark, grad has been disabled, but in the current runtime_wrapper, no_grad is set again and its time is counted into the running time. Therefore, we add `is_grad_enabled` check in runtime_wrapper before running with torch.no_grad. If grad has been disabled, there is no need to set no_grad. ",
    "Number of deleted lines": 1,
    "Deleted lines": "    def runtime_wrapper(*args):\n        if trace_joint:\n            args_ = list(args)\n            # See Note [Detaching inputs that never need gradients]\n            for idx in indices_of_inps_to_detach:\n                if isinstance(args_[idx], torch.Tensor):\n                    args_[idx] = args_[idx].detach()\n            with torch.autograd._force_original_view_tracking(True):\n                all_outs = call_func_at_runtime_with_args(\n                    compiled_fn,\n                    args_,\n                    disable_amp=disable_amp,\n                )\n        else:\n            # When we have an inference graph, we run with torch.no_grad.\n            # It's possible to get an inference graph with inputs that require grad,\n            # in which case we want to make sure autograd is disabled\n            # (since e.g., inductor will generate aten.addmm.out calls which autograd will complain on)\n            with torch.no_grad():\n                all_outs = call_func_at_runtime_with_args(\n                    compiled_fn,\n                    args,\n                    disable_amp=disable_amp,\n                )\n\n        num_mutated_runtime_inps = runtime_metadata.num_mutated_inp_runtime_indices\n        num_intermediate_bases = runtime_metadata.num_intermediate_bases\n\n        if keep_input_mutations and trace_joint:\n            num_input_mutations_handled_by_autograd = (\n                runtime_metadata.num_mutated_graph_handled_indices_seen_by_autograd\n            )\n            # autograd.Function requires us to return the mutated inputs as extra outputs to the autograd.Function.forward\n            if num_input_mutations_handled_by_autograd > 0:\n                all_outs = all_outs[:-num_input_mutations_handled_by_autograd]\n\n        assert (\n            len(all_outs)\n            == num_mutated_runtime_inps"
},
{
    "Id": 148,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/c1c4882367c592d49e15268a0b99631c207d662e",
    "Violation": "insufficient",
    "Bug report": "Based on discussions with Sherlock + Zhengxu in D51118067, updated the internal thrift schema to match the OSS schema.. So to bypass these failures I did the following hacks(?): Before creating the exported program in deserialization, populate nodes w/o meta[\"val\"] with meta[\"val\"] = None * Add torch.autograd.grad_mode.set_grad_enabled to the skip opset * Duplicated ExportGraphSignature into aot_export.py so that the graph signature checks will be skipped",
    "Number of deleted lines": 1,
    "Deleted lines": "    @final\n    def _check_graph_module(self, gm: torch.fx.GraphModule) -> None:\n        def _allowed_getattr_types() -> Tuple[Type[Any], ...]:\n            ret = self.allowed_getattr_types()\n            assert not any(t is object for t in ret)\n            return ret\n\n        def _check_valid_op(op) -> None:\n            def _allowed_builtin_ops() -> List:\n                ret = self.allowed_builtin_ops()\n                assert all(inspect.isbuiltin(op) for op in ret)\n                return ret\n\n            def _allowed_op_types() -> Tuple[Type[Any], ...]:\n                ret = self.allowed_op_types()\n                assert not any(t is object for t in ret)\n                return ret\n\n            if not isinstance(op, _allowed_op_types()):\n                if op not in _allowed_builtin_ops():\n                    raise SpecViolationError(\n                        f\"Operator '{op}' is not an allowed operator type: {_allowed_op_types()}\\n\"\n                        f\"Valid builtin ops: {_allowed_builtin_ops()}\"\n                    )\n\n            if isinstance(op, OpOverload):\n                # All ops functional\n                if not is_functional(op):\n                    raise SpecViolationError(\n                        f\"operator '{op}' is not functional\"\n                    )\n            self.check_valid_op(op)\n\n        for mod in gm.modules():\n            if not isinstance(mod, torch.fx.GraphModule):\n                continue\n\n            mod.graph.lint()\n            for node in mod.graph.nodes:\n                # TODO(T140410192): should have fake tensor for all dialects\n                if node.op in {\"call_module\", \"call_method\"}:\n                    raise SpecViolationError(\n                        f\"call_module is not valid: got a class '{node.target}' \","
},
{
    "Id": 149,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f3a2094065c8b4b7bae426e71c923a8a8abb74b5",
    "Violation": "insufficient",
    "Bug report": "Mitigate legacy issue that aten op as export entrance function. This is not supported any more, now the top level ```torch.export``` only support ```nn.Module```, but there are still some tests using the internal APIs and caused the ```trace_rules.check``` assertion error. This PR is going to mitigate such cases.",
    "Number of deleted lines": 0,
    "Deleted lines": "                hooks=Hooks(\n                    guard_export_fn=guard_export_print,\n                    guard_fail_fn=None,\n                ),\n                export=True,\n                export_constraints=constraints,\n            )(f)\n            # TODO(voz): We may have instances of `f` that mutate inputs, we should track sideeffects and reject.\n            try:\n                result_traced = opt_f(*args, **kwargs)\n            except ConstraintViolationError as e:\n                constraint_violation_error = e\n        remove_from_cache(f)\n\n        if (\n            not disable_constraint_solver\n            and (shape_env := getattr(fake_mode, \"shape_env\", None)) is not None\n            and (dim_constraints := shape_env.dim_constraints) is not None\n            and not trace_rules.check(call_to_inspect)\n        ):\n            dim_constraints.solve()\n            dim_constraints.remove_redundant_dynamic_results()\n            forced_specializations = dim_constraints.forced_specializations()\n            msg = dim_constraints.prettify_results(\n                original_signature, constraint_violation_error, forced_specializations\n            )\n            if constraint_violation_error:\n                constraint_violation_error.args = (\n                    constraint_violation_error.args[0] + msg,\n                )\n            else:\n                if forced_specializations:\n                    constraint_violation_error = ConstraintViolationError(msg)\n                else:\n                    log.info(\n                        \"Summary of dimension constraints:%s\",\n                        msg,\n                    )"
},
{
    "Id": 150,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/cc6a51c9f3ee97a06ff9c0b84477e88e33e31137",
    "Violation": "missing",
    "Bug report": "added shape checking to WeightedRandomSampler",
    "Number of deleted lines": 1,
    "Deleted lines": "        >>> list(WeightedRandomSampler([0.1, 0.9, 0.4, 0.7, 3.0, 0.6], 5, replacement=True))\n        [4, 4, 1, 4, 5]\n        >>> list(WeightedRandomSampler([0.9, 0.4, 0.05, 0.2, 0.3, 0.1], 5, replacement=False))\n        [0, 1, 4, 3, 2]\n    \"\"\"\n    weights: Tensor\n    num_samples: int\n    replacement: bool\n\n    def __init__(self, weights: Sequence[float], num_samples: int,\n                 replacement: bool = True, generator=None) -> None:\n        if not isinstance(num_samples, int) or isinstance(num_samples, bool) or \\\n                num_samples <= 0:\n            raise ValueError(\"num_samples should be a positive integer \"\n                             \"value, but got num_samples={}\".format(num_samples))\n        if not isinstance(replacement, bool):\n            raise ValueError(\"replacement should be a boolean value, but got \"\n                             \"replacement={}\".format(replacement))\n        self.weights = torch.as_tensor(weights, dtype=torch.double)\n        self.num_samples = num_samples\n        self.replacement = replacement\n        self.generator = generator\n\n    def __iter__(self) -> Iterator[int]:\n        rand_tensor = torch.multinomial(self.weights, self.num_samples, self.replacement, generator=self.generator)\n        yield from iter(rand_tensor.tolist())\n\n    def __len__(self) -> int:\n        return self.num_samples\n\n\nclass BatchSampler(Sampler[List[int]]):\n    r\"\"\"Wraps another sampler to yield a mini-batch of indices.\n\n    Args:\n        sampler (Sampler or Iterable): Base sampler. Can be any iterable object\n        batch_size (int): Size of mini-batch.\n        drop_last (bool): If ``True``, the sampler will drop the last batch if\n            its size would be less than ``batch_size``"
},
{
    "Id": 151,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/8ee59280d78a4fefc4de0da04b287e067c28de0d",
    "Violation": "insufficient",
    "Bug report": "Bug - check config for dynamic",
    "Number of deleted lines": 2,
    "Deleted lines": "                            vr=constraint.constraint_range.vr\n                            & dim2constraint[constraint.dim].vr,\n                            warn_only=False,\n                        )\n                    else:\n                        dim2constraint[constraint.dim] = constraint.constraint_range\n\n        dynamic_dims = None\n        constraint_dims = None\n        if tx.fake_mode.shape_env is not None:\n            dynamic_dims = []\n            constraint_dims = []\n            for i in range(e.dim()):\n                # NB: mark dynamic has precedence over static\n                marked_dynamic = i in getattr(e, \"_dynamo_dynamic_indices\", set())\n                marked_static = i in getattr(e, \"_dynamo_static_indices\", set())\n\n                # NB: both static and dynamic have precedence over\n                automatic_dynamic = curr_sizes is None or curr_sizes[i] is None\n\n                # We will process constraints first, as they will imply that we\n                # have a dynamic dimension\n                # Precedence: export constraints > eager constraints\n                constraint = dim2constraint.get(i)\n                if constraint is None:\n                    if marked_dynamic and not config.allow_ignore_mark_dynamic:\n                        constraint = RelaxedUnspecConstraint(warn_only=False)\n                    elif not marked_static and automatic_dynamic:\n                        constraint = RelaxedUnspecConstraint(warn_only=True)\n                constraint_dims.append(constraint)\n\n                # Now, figure out if the dim is dynamic/duck/static\n                if constraint is not None or marked_dynamic:\n                    # NB: We could assert static_shapes is False here, but it\n                    # seems better to allow the user to override policy in this\n                    # case\n                    dynamic = DimDynamic.DYNAMIC\n                elif static_shapes or config.assume_static_by_default or marked_static:\n                    dynamic = DimDynamic.STATIC\n                else:"
},
{
    "Id": 152,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e9e125475e94aabfb34ee239fadc760615eef429",
    "Violation": "missing",
    "Bug report": "Add schema check to aten::repeat and fb::fast_gather",
    "Number of deleted lines": 0,
    "Deleted lines": "\n        at::native::_embedding_bag_cpu_impl_out(\n            output,\n            offset2bag,\n            bag_size,\n            max_indices,\n            weight,\n            indices,\n            offsets,\n            mode,\n            per_sample_weights,\n            include_last_offset,\n            padding_idx.value_or(-1));\n      };\n    });\n\n// NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)\nREGISTER_OPERATOR_FUNCTOR(aten::repeat, aten_repeat, [](Node* n) -> SROperator {\n  return [](ProcessedNode* p_node) {\n    const auto& self = p_node->Input(0).toTensor();\n    const auto repeats = p_node->Input(1).toIntVector();\n\n    if (p_node->Output(0).isNone()) {\n      p_node->Output(0) = create_empty_from(self);\n    }\n    at::Tensor& output = p_node->Output(0).toTensor();\n    at::native::repeat_out(output, self, repeats);\n  };\n});\n\nREGISTER_OPERATOR_FUNCTOR(aten::div, aten_div, [](Node* n) -> SROperator {\n  if (n->inputs().size() != 2 && n->inputs().size() != 3) {\n    return nullptr;\n  }\n  return [](ProcessedNode* p_node) {\n    const auto& in0_t = p_node->Input(0).toTensor();\n    c10::optional<std::string> rounding_mode = c10::nullopt;\n    if (p_node->inputs().size() > 2) {"
},
{
    "Id": 153,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/7ea6559658a6f650363f8b96f462bbc047e29124",
    "Violation": "missing",
    "Bug report": "Add size checks to torch.stack. Checks the size of each tensor passed to `torch.stack` before calling `cat` to address #29510. This is done in the `get_stack_input` function as that is a common path. The function now compares the size of each tensor in the TensorList to the size of the first tensor and throws an exception when the sizes are not equal.",
    "Number of deleted lines": 1,
    "Deleted lines": "  std::vector<Tensor> splits(num_splits);\n  int64_t start_idx = 0;\n  int64_t i;\n\n  for (i = 0; i < num_splits; ++i) {\n    auto length = split_sizes[i];\n    TORCH_CHECK(length >= 0,\n             \"split_with_sizes expects split_sizes have only non-negative \",\n             \"entries, but got split_sizes=\", split_sizes);\n    splits[i] = self.narrow(dim, start_idx, length);\n    start_idx += length;\n  }\n  TORCH_CHECK(start_idx == dim_size,\n           \"split_with_sizes expects split_sizes to sum exactly to \", dim_size,\n           \" (input tensor's size at dimension \", dim, \"), \", \"but got split_sizes=\", split_sizes);\n  return splits;\n}\n\nstatic inline std::vector<Tensor> get_stack_inputs(TensorList tensors, int64_t dim) {\n  std::vector<Tensor> inputs(tensors.size());\n  for (size_t i = 0; i < tensors.size(); ++i) {\n    inputs[i] = tensors[i].unsqueeze(dim);\n  }\n  return inputs;\n}\n\nTensor stack(TensorList tensors, int64_t dim) {\n  TORCH_CHECK(tensors.size() > 0,\n           \"stack expects a non-empty TensorList\");\n  dim = maybe_wrap_dim(dim, tensors[0].dim() + 1);\n  return at::cat(get_stack_inputs(tensors, dim), dim);\n}\n\nTensor& stack_out(Tensor& result, TensorList tensors, int64_t dim) {\n  TORCH_CHECK(tensors.size() > 0,\n           \"stack expects a non-empty TensorList\");\n  dim = maybe_wrap_dim(dim, tensors[0].dim() + 1);\n  return at::cat_out(result, get_stack_inputs(tensors, dim), dim);\n}\n\nstatic inline Tensor & sparse_transpose_(Tensor & self, int64_t dim0, int64_t dim1) {"
},
{
    "Id": 154,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/bbb5e106ad6228953df6c7f5c8916b26dc0cb457",
    "Violation": "improper",
    "Bug report": "Improve error checking of CUDALoops. Same change as was applied to CPU loops -- separate out checking of the inputs and outputs.",
    "Number of deleted lines": 1,
    "Deleted lines": "static inline void launch_unrolled_kernel(int64_t N, const func_t& f, array_t data, inp_calc_t ic, out_calc_t oc) {\n  TORCH_INTERNAL_ASSERT(N > 0 && N <= std::numeric_limits<int32_t>::max());\n  int64_t grid = (N + block_work_size - 1) / block_work_size;\n  auto stream = at::cuda::getCurrentCUDAStream();\n  unrolled_elementwise_kernel<func_t, array_t><<<grid, num_threads, 0, stream>>>(N, f, data, ic, oc);\n  AT_CUDA_CHECK(cudaGetLastError());\n}\n\n} // namespace modern\n\n\ntemplate <typename func_t>\nvoid gpu_kernel_impl(TensorIterator& iter, const func_t& f) {\n  using traits = function_traits<func_t>;\n  using arg0_t = typename traits::result_type;\n  constexpr int ntensors = traits::arity + 1;\n\n  TORCH_INTERNAL_ASSERT(iter.can_use_32bit_indexing());\n  TORCH_INTERNAL_ASSERT(iter.ntensors() == traits::arity + 1);\n\n  at::detail::Array<char*, ntensors> data;\n  for (int i = 0; i < ntensors; i++) {\n    data[i] = (char*)iter.data_ptr(i);\n  }\n\n  int64_t numel = iter.numel();\n\n  bool contiguous = iter.is_contiguous();\n  bool dynamic_casting = needs_dynamic_casting<func_t>::check(iter);\n\n  if (contiguous && !dynamic_casting) {\n    modern::launch_vectorized_kernel(numel, f, data);\n    return;\n  }\n\n  if (!dynamic_casting) {\n    // !contiguous\n    auto input_offset_calculator = make_input_offset_calculator<traits::arity>(iter);\n    auto output_offset_calculator = make_output_offset_calculator(iter);"
},
{
    "Id": 155,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/d3bf6803b62c79f1dafd1eec49b4bd65d5a27697",
    "Violation": "missing",
    "Bug report": "add sanity check that we do not wrap tracked tensors ",
    "Number of deleted lines": 0,
    "Deleted lines": "            else:\n                return self.wrap_unspecialized_primitive(value)\n        else:\n            return ConstantVariable.create(\n                value=value,\n                guards=self.make_guards(GuardBuilder.CONSTANT_MATCH),\n            )\n\n    def assert_not_wrapped_by_this_graph(self, value: torch.Tensor):\n        if is_fake(value) and maybe_get_fake_mode(value) is self.tx.fake_mode:\n            raise InternalTorchDynamoError(\n                \"Cannot wrap a Tensor that has already been\",\n                \"wrapped by this instance of Dynamo\",\n            )\n\n    def wrap_tensor(self, value: torch.Tensor):\n        source = self.get_source()\n\n        if (\n            source.guard_source().is_nn_module()\n            or get_static_address_type(value) is not None\n        ) and not source.guard_source().is_fsdp_module():\n            self.assert_not_wrapped_by_this_graph(value)\n            return self.tx.output.register_attr_or_module(\n                value,\n                self.name,\n                source=source,\n                # Guards are done inside register_attr_or_module\n                # guards=self.make_guards(GuardBuilder.TENSOR_MATCH),\n            )\n\n        if is_constant_source(source):\n            self.assert_not_wrapped_by_this_graph(value)\n            return self.tx.output.register_attr_or_module(\n                value,\n                re.sub(r\"[^a-zA-Z0-9]+\", \"_\", self.name),\n                source=source,\n                # Guards are added inside register_attr_or_module"
},
{
    "Id": 156,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/794e3971ab90611b4a63166589368a737843c8bc",
    "Violation": "missing",
    "Bug report": "Add size check before calling stack_.at(dict_pos) in unpickler.cpp",
    "Number of deleted lines": 0,
    "Deleted lines": "          device.is_hpu() || device.is_privateuseone()) {\n        tensor = tensor.to(device, tensor.scalar_type());\n      } else if (device.type() != DeviceType::CPU) {\n        AT_ERROR(\n            \"supported devices include CPU, CUDA, HPU and \",\n            c10::get_privateuse1_backend(),\n            \" however got \",\n            DeviceTypeName(device.type(), false));\n      }\n      stack_.emplace_back(std::move(tensor));\n    } break;\n    case PickleOpCode::SETITEM: {\n      // At this OpCode, stack looks like\n      // | Stack Bottom |\n      // | ......       |\n      // | Dict         | -> (stack_size - 3)\n      // | Key          | -> (stack_size - 2)\n      // | Value        | -> (stack_size - 1)\n      auto stack_size = stack_.size();\n      auto dict_pos = stack_size - 3;\n      auto key_pos = stack_size - 2;\n      auto val_pos = stack_size - 1;\n      auto dict = stack_.at(dict_pos).toGenericDict();\n      dict.insert_or_assign(stack_.at(key_pos), stack_.at(val_pos));\n      stack_.erase(stack_.begin() + (key_pos), stack_.end());\n    } break;\n    default: {\n      AT_ERROR(\n          \"Unknown opcode for unpickling at \",\n          reinterpret_cast<void*>(opcode),\n          \": \",\n          int(static_cast<uint8_t>(opcode)));\n    } break;\n  }\n  return opcode;\n}\n\nvoid Unpickler::readGlobal(\n    const std::string& module_name,\n    const std::string& class_name) {\n  if (this->skip_next_read_global) {\n    // See [NOTE] skip_next_read_global"
},
{
    "Id": 157,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/7684044b713761abd4f51225dc5d83ce5869562a",
    "Violation": "missing",
    "Bug report": "Add size check before calling .back() in rpc/script_call.cpp",
    "Number of deleted lines": 0,
    "Deleted lines": "    // aten::add -> torch.ops.aten.add\n    opName.replace(0, ATEN_PREFIX_.length(), BUILTIN_OP_NAMESPACE_);\n    ivalues.emplace_back(std::move(opName));\n  } else if (hasQualifiedName()) {\n    ivalues.emplace_back(isAsyncExecution());\n    TORCH_CHECK(\n        !hasOp(),\n        \"It is TorchScript function call, operator should not be set.\");\n    ivalues.emplace_back((*qualifiedName_).qualifiedName());\n  } else {\n    TORCH_INTERNAL_ASSERT(\n        false,\n        \"Either builtin operator or TorchScript function name should be set.\");\n  }\n}\n\nstd::unique_ptr<ScriptCall> ScriptCall::fromIValues(\n    std::vector<at::IValue>& ivalues) {\n  // Last element in the vector is always qualifiedName for both\n  // builitin operator and TorchScript function\n  // If the qualifiedName is not a builtin operator name, then treat it\n  // as TorchScript function name\n  const std::string& qualifiedName = ivalues.back().toStringRef();\n\n  if (qualifiedName.rfind(BUILTIN_OP_NAMESPACE_) == 0) {\n    ivalues.pop_back();\n    const std::string& str_schema = ivalues.back().toStringRef();\n    auto op = matchOperator(str_schema);\n\n    ivalues.pop_back();\n    // remove str_schema from ivalues\n    return std::make_unique<ScriptCall>(op, std::move(ivalues));\n  } else {\n    ivalues.pop_back();\n    bool isAsyncExecution = ivalues.back().toBool();\n    ivalues.pop_back();\n    return std::make_unique<ScriptCall>(\n        c10::QualifiedName(qualifiedName),"
},
{
    "Id": 158,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/fb25fd6f865ed0532caf710ca130b6cc23a772a8",
    "Violation": "missing",
    "Bug report": "Replaced neg dim normalization with assert in helper. I think we can still leave the check for negative shard dimension in `compute_local_shape_and_global_offset` and replace the normalization logic with an assert. This should provide us a stack trace to see which user-facing API did not normalize the dim as expected.",
    "Number of deleted lines": 2,
    "Deleted lines": "            Object which describes the mesh topology\n            of devices for the DTensor.\n        placements (Sequence[:class:`Placement`]]):\n            The attribute of the DTensor that describes its layout\n            on the mesh topology.\n\n    Return:\n        tensor_shape: A List of int which specifies the size of DTensor which build\n            on top of the local tensor.\n        tensor_stride: A List of int which specifies the stride of DTensor.\n    \"\"\"\n    tensor_shape = list(tensor.size())\n    tensor_stride = list(tensor.stride())\n    for idx, placement in enumerate(placements):\n        mesh_dim_size = mesh.size(idx)\n        if placement.is_shard():\n            shard_placement = cast(Shard, placement)\n            if shard_placement.dim < 0:\n                # normalize shard dim to be positive\n                shard_placement.dim += len(tensor_shape)\n            shard_dim = shard_placement.dim\n\n            assert (\n                shard_dim < tensor.ndim\n            ), f\"Sharding dim {shard_dim} greater than tensor ndim {tensor.ndim} for placement number {idx}.\"\n\n            local_dim_size = tensor_shape[shard_dim]\n            tensor_shape[shard_dim] = local_dim_size * mesh_dim_size\n\n            # recover tensor stride by modifying the stride that larger than\n            # the current stride on the shard_dim\n            for i in range(len(tensor_stride)):\n                if i != shard_dim and tensor_stride[i] >= tensor_stride[shard_dim]:\n                    # rescale the stride by the shard size\n                    tensor_stride[i] = tensor_stride[i] * mesh_dim_size\n        elif not isinstance(placement, (Replicate, _Partial)):\n            raise RuntimeError(f\"placement type {type(placement)} not supported!\")\n    return tensor_shape, tensor_stride\n"
},
{
    "Id": 159,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/55c19a3c6d38a49fe34e008c4c566445c43810f0",
    "Violation": "missing",
    "Bug report": "Increase multiplier to 3 for Inductor AMP benchmark correctness check. we find some of the models have failed the benchmark's correctness check. However, the end-to-end model's accuracy. when comparing AMP with FP32 is within a difference of less than 0.1%. Thus, it's possible that the correctness check failures for these models are false alarms. We use multiplier of 3 instead of 2 in this PR to avoid these false alarms.",
    "Number of deleted lines": 1,
    "Deleted lines": "        else:\n            if not exact_dtype:\n                ref = ref.to(res.dtype)\n\n            # First try usual allclose\n            if torch.allclose(ref, res, atol=tol, rtol=tol, equal_nan=equal_nan):\n                return True\n\n            # Check error from fp64 version\n            if fp64_ref.dtype == torch.float64:\n                ref_error = rmse(fp64_ref, ref).item()\n                # ref unable to produce this with stable numerics in this precision, ignore\n                if math.isnan(ref_error):\n                    log.warning(\n                        \"Found nan in reference. Consider running in higher precision.\"\n                    )\n\n                res_error = rmse(fp64_ref, res).item()\n                multiplier = 2.0\n\n                if (\n                    fp64_ref.numel() < 1000\n                    or (ref.ndim == 4 and ref.shape[-1] == ref.shape[-2] == 1)\n                    # large tol means a benchmark has been specified as REQUIRE_HIGHER_TOLERANCE\n                    or tol >= 2 * 1e-2\n                ):\n                    # In the presence of noise, noise might dominate our error\n                    # metric for smaller tensors.\n                    # Similary, for 1x1 kernels, there seems to be high noise with amp.\n                    multiplier = 3.0\n\n                passes_test = res_error <= (multiplier * ref_error + tol / 10.0)\n                if not passes_test:\n                    log_error(\n                        \"RMSE (res-fp64): %.5f, (ref-fp64): %.5f and shape=%s\",\n                        res_error,\n                        ref_error,\n                        res.size(),\n                    )"
},
{
    "Id": 160,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/6e78592cbb81138ce13ad65a5f549d65b191526c",
    "Violation": "missing",
    "Bug report": "Added type checking for ExportedProgram. Added type checking for ExportedProgram in save function. ",
    "Number of deleted lines": 0,
    "Deleted lines": "                return x + 10\n\n        ep = torch.export.export(MyModule(), (torch.randn(5),))\n\n        # Save to file\n        torch.export.save(ep, 'exported_program.pt2')\n\n        # Save to io.BytesIO buffer\n        buffer = io.BytesIO()\n        torch.export.save(ep, buffer)\n\n        # Save with extra files\n        extra_files = {'foo.txt': b'bar'.decode('utf-8')}\n        torch.export.save(ep, 'exported_program.pt2', extra_files=extra_files)\n\n    \"\"\"\n    from torch._export import save\n\n    save(ep, f, extra_files=extra_files, opset_version=opset_version)\n\n\ndef load(\n    f: Union[str, os.PathLike, io.BytesIO],\n    *,\n    extra_files: Optional[Dict[str, Any]] = None,\n    expected_opset_version: Optional[Dict[str, int]] = None,\n) -> ExportedProgram:\n    \"\"\"\n\n    .. warning::\n        Under active development, saved files may not be usable in newer versions\n        of PyTorch.\n\n    Loads an :class:`ExportedProgram` previously saved with\n    :func:`torch.export.save <torch.export.save>`.\n\n    Args:\n        ep (ExportedProgram): The exported program to save."
},
{
    "Id": 161,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/828a6a3b3943a0a0701ecacacd2bcc34fc03fe03",
    "Violation": "missing",
    "Bug report": "Use proper isnan check ",
    "Number of deleted lines": 1,
    "Deleted lines": "#define M_SMALL 10 /* Limit for small subfiles */\n\n#define ARR(III) arr[(III)*stride]\n#define IDX(III) idx[(III)*stride]\n\n#define LONG_SWAP(AAA, BBB) swap = AAA; AAA = BBB; BBB = swap\n#define REAL_SWAP(AAA, BBB) rswap = AAA; AAA = BBB; BBB = rswap\n\n#define ARR_SWAP(III, JJJ) \\\n  REAL_SWAP(ARR(III), ARR(JJJ));\n\n#define BOTH_SWAP(III, JJJ) \\\n  REAL_SWAP(ARR(III), ARR(JJJ)); \\\n  LONG_SWAP(IDX(III), IDX(JJJ))\n\n/* Emulate NumPy behavior of putting NaNs\n * at the end of an ascending list. */\n#define GT_OR_NAN(x, y) \\\n  ((x != x && y == y) || (x > y))\n\nstatic void THTensor_(quicksortascend)(scalar_t *arr, int64_t *idx, int64_t elements, int64_t stride)\n{\n  int64_t beg[MAX_LEVELS], end[MAX_LEVELS], i, j, L, R, P, swap, pid, stack = 0, sz_right, sz_left;\n  scalar_t rswap, piv;\n  unsigned char done = 0;\n\n  /* beg[0]=0; end[0]=elements; */\n  stack = 0;\n  L = 0; R = elements-1;\n  done = elements-1 <= M_SMALL;\n\n  while(!done) {\n      /* Use median of three for pivot choice */\n    P=(L+R)>>1;\n    BOTH_SWAP(P, L+1);\n    if (GT_OR_NAN(ARR(L+1), ARR(R))) { BOTH_SWAP(L+1, R); }\n    if (GT_OR_NAN(ARR(L), ARR(R))) { BOTH_SWAP(L, R); }\n    if (GT_OR_NAN(ARR(L+1), ARR(L))) { BOTH_SWAP(L+1, L); }\n"
},
{
    "Id": 162,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/47c531b6e80e36282dbaec60d239ae1b9f816f43",
    "Violation": "missing",
    "Bug report": "Compare object identity first in ClassType::operator==. This check is much cheaper than anything involving actually inspecting object fields (i.e., the cost is low), and if it succeeds we can skip the expensive (e.g., it involves locking a weak_ptr and then destroying the resulting shared_ptr)  function body. It almost entirely eliminates time spent in this function during model loading according to perf.",
    "Number of deleted lines": 0,
    "Deleted lines": "struct TORCH_API ClassType : public NamedType {\n  // This represents an attribute of a class; a name associated with an attribute, and a\n  // getter and (optional) setter for that attribute.\n  struct Property {\n    std::string name;\n    torch::jit::Function* getter;\n    torch::jit::Function* setter;\n  };\n\n  // Create a class type with name `name` and its methods stored in `cu`.\n  static ClassTypePtr create(\n      c10::optional<QualifiedName> qualifiedName,\n      std::weak_ptr<CompilationUnit> cu,\n      bool is_module = false,\n      std::string doc_string = \"\",\n      std::vector<std::string> unresolved_class_attributes = {});\n\n  bool operator==(const Type& rhs) const override {\n    if (auto user_rhs = rhs.castRaw<ClassType>()) {\n      const auto& lhs_name = name().value();\n      const auto& rhs_name = user_rhs->name().value();\n\n      return lhs_name == rhs_name &&\n          this->compilation_unit() == user_rhs->compilation_unit();\n    }\n    return false;\n  }\n\n  std::string str() const override {\n     return annotation_str();\n  }\n\n  std::string repr_str() const override {\n    std::stringstream ss;\n    ss << str()\n       << \" (of Python compilation unit at: \" << compilation_unit().get() << \")\";\n    return ss.str();\n  }"
},
{
    "Id": 163,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/3611d26a25bd889627403a808ea667ac99c09904",
    "Violation": "missing",
    "Bug report": "Optimize FunctionSchema::checkArg for the Tensor case. The Tensor case is one of the most common and the existing check can be made faster. This results in a ~21% improvement on DeepAndWide model and would improve other models as well.",
    "Number of deleted lines": 0,
    "Deleted lines": "      if (why_not) {\n        *why_not\n            << \"Function schema not backward compatible since the new argument '\"\n            << arguments().at(i).name() << \"' of type \"\n            << arguments().at(i).type()->str()\n            << \" did not provide a default value.\";\n      }\n      return false;\n    }\n  }\n\n  return true;\n}\n\ninline void FunctionSchema::checkArg(\n    const IValue& value,\n    const Argument& argument,\n    optional<size_t> pos) const {\n  if (!value.type()->isSubtypeOf(argument.type())) {\n    TORCH_CHECK(\n        false,\n        formatTypeMismatchMsg(\n            argument, value.type()->repr_str(), pos));\n  }\n}\n\ninline std::string FunctionSchema::findErrorInKwargs(const std::vector<std::string>& kwargs) const {\n  // First check if any of the kwargs are unknown, i.e. don't match the name of\n  // any argument in the schema.\n  for (const auto& kwarg : kwargs) {\n    if (!std::count_if(\n            arguments().begin(),\n            arguments().end(),\n            [&kwarg](const Argument& argument) {\n              return argument.name() == kwarg;\n            })) {\n      return c10::str(\n          \"Unknown keyword argument '\","
},
{
    "Id": 164,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/324dc1623e2f91892038fb1b151450a7c6529dd9",
    "Violation": "missing",
    "Bug report": "add dtype checking for gather and scatter. in the `cpu_scatter_gather_base_kernel`, it interpret a pointer as `int64_t` regardless the actual dtype. add a index dtype checking will avoid the nasty index out of bound error. As using `int64_t` is convention in ATen code (a.k.a, a limitation), no further fix is needed at the moment.",
    "Number of deleted lines": 0,
    "Deleted lines": "  return index_select_out_cpu_(result, self, dim, index);\n}\n\nTensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n  TORCH_CHECK(source.dim() == 0, \"index_fill_ only supports a 0-dimensional value tensor, but got tensor \"\n      \"with \", source.dim(), \" dimension(s).\");\n  return self.index_fill_(dim, index, source.item());\n}\n\nTensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar source) {\n  return self.clone(at::MemoryFormat::Preserve).index_fill_(dim, index, source);\n}\n\nTensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n  return self.clone(at::MemoryFormat::Preserve).index_fill_(dim, index, source);\n}\n\nTensor & gather_out_cpu(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {\n  result.resize_(index.sizes());\n  gather_stub(result.device().type(), result, self, dim, index);\n  return result;\n}\n\nTensor gather_cpu(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {\n  Tensor result = at::empty({0}, self.options());\n  return gather_out_cpu(result, self, dim, index, sparse_grad);\n}\n\nTensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {\n  scatter_stub(self.device().type(), self, dim, index, src);\n  return self;\n}\n\nTensor & scatter_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar src) {\n  scatter_fill_stub(self.device().type(), self, dim, index, src);\n  return self;\n}\n\nTensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n  return self.clone(at::MemoryFormat::Preserve).scatter_(dim, index, source);\n}\n\nTensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar source) {\n  return self.clone(at::MemoryFormat::Preserve).scatter_(dim, index, source);\n}\n\nTensor & scatter_add_cpu_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {\n  scatter_add_stub(self.device().type(), self, dim, index, src);\n  return self;\n}\n\nTensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n  return self.clone(at::MemoryFormat::Preserve).scatter_add_(dim, index, source);\n}\n\nTensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {\n  Tensor _mask, _self;\n  std::tie(_mask, _self) = expand_outplace(mask, self);\n  return _self.clone(at::MemoryFormat::Contiguous).masked_scatter_(_mask, source);\n}\n\nstatic Tensor & masked_fill_impl_cpu(Tensor & self, const Tensor & mask, Scalar value) {\n  NoNamesGuard guard;\n  if (mask.dtype() == ScalarType::Byte) {\n    TORCH_WARN(\"masked_fill_ received a mask with dtype torch.uint8, this behavior is now deprecated,\" \\\n            \"please use a mask with dtype torch.bool instead.\");\n  }\n\n  auto iter = TensorIterator();\n  iter.dont_compute_common_dtype();\n  iter.dont_resize_outputs();\n  iter.add_output(self);"
},
{
    "Id": 165,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5e50993be72bec4ad939993328dd02691ef7777d",
    "Violation": "missing",
    "Bug report": "Better type checking for pack_padded_sequence symbolic",
    "Number of deleted lines": 0,
    "Deleted lines": "        a :class:`PackedSequence` object\n    \"\"\"\n    if isinstance(lengths, list):\n        lengths = torch.LongTensor(lengths)\n\n    data, batch_sizes = PackPadded.apply(input, lengths, batch_first)\n\n    return PackedSequence(data, batch_sizes)\n\n\ndef _symbolic_pack_padded_sequence(g, input, lengths, batch_first=False, padding_value=0.0):\n    # There currently is no PackPadded operator in ONNX. We rely on an\n    # optimization pass to remove this later. It is an error if all\n    # PackPadded operators cannot be optimized out.\n\n    def _onnx_symbolic_pack_padded_sequence(g, input, lengths):\n        if batch_first:\n            input = g.op('Transpose', input, perm_i=[1, 0, 2])\n        return g.op(\"prim::PackPadded\", input, lengths, outputs=2)\n\n    def pack_padded_sequence_trace_wrapper(input, lengths):\n        return pack_padded_sequence(input, lengths, batch_first=batch_first)\n\n    outputs = g.wrapPyFuncWithSymbolic(\n        pack_padded_sequence_trace_wrapper, [input, lengths], 2,\n        _onnx_symbolic_pack_padded_sequence)\n    return tuple(o for o in outputs)\n\n\npack_padded_sequence = torch.onnx.symbolic_override_first_arg_based(\n    _symbolic_pack_padded_sequence)(pack_padded_sequence)\n\n\ndef pad_packed_sequence(sequence, batch_first=False, padding_value=0.0, total_length=None):\n    r\"\"\"Pads a packed batch of variable length sequences.\n\n    It is an inverse operation to :func:`pack_padded_sequence`.\n"
},
{
    "Id": 166,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/df475aa1dc4310abc273cf26b14b6ac1cdb7dfa4",
    "Violation": "missing",
    "Bug report": "Update Vulkan runner in benchmark binary to handle non-tensor inputs. Some models may take in a list of tensors as inputs, thus the bundled inputs will contain `IValues` that are of the type `c10::List`. For Vulkan models, every tensor in the `IValue` list has to be converted to a vulkan tensor first, and this case is not currently handled by the Vulkan model wrapper in the benchmark binary. This diff introduces `IValue` type checking to the input processor of the Vulkan model wrapper, and adds support for Tensor and List types.",
    "Number of deleted lines": 1,
    "Deleted lines": "  virtual c10::IValue run(\n      T& module,\n      const std::vector<c10::IValue>& inputs) {\n    return module.forward(inputs);\n  }\n};\n\ntemplate<class T>\nclass vkRunner final : public Runner<T> {\n public:\n  virtual ~vkRunner() = default;\n  virtual c10::IValue run(\n      T& module,\n      const std::vector<c10::IValue>& inputs) override {\n    // Upload the input tensor(s) to GPU memory.\n    inputs_.clear();\n    inputs_.reserve(inputs.size());\n    for (const auto& input : inputs) {\n      inputs_.emplace_back(input.toTensor().vulkan());\n    }\n\n    // Run, and download the output tensor to system memory.\n    return module.forward(inputs_).toTensor().cpu();\n  }\n\n private:\n  std::vector<c10::IValue> inputs_;\n};\n\n} // namespace\n\nint main(int argc, char** argv) {\n  c10::SetUsageMessage(\n    \"Run speed benchmark for pytorch model.\\n\"\n    \"Example usage:\\n\"\n    \"./speed_benchmark_torch\"\n    \" --model=<model_file>\"\n    \" --use_bundled_input=0\"\n    \" --warmup=5\""
},
{
    "Id": 167,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e31038d574712d383fdc4c2f1bb63fc82f256ed0",
    "Violation": "missing",
    "Bug report": "Check results dtype in index_out. This logic exists for index_put and index_add, but for some reason not for `index.out` Skip testing, as this function is not technically exposed on the Python level.",
    "Number of deleted lines": 0,
    "Deleted lines": "}\n\nTORCH_PRECOMPUTE_META_FUNC2(index, Tensor)\n(const Tensor& self, at::IOptTensorListRef indices) {\n  auto materialized = indices.materialize();\n\n  TORCH_CHECK_INDEX(\n      materialized.size() <= (size_t)self.dim(),\n      \"too many indices for tensor of dimension \",\n      self.dim(), \" (got \", materialized.size(), \")\");\n\n  // Only allow: `dev_tensor[{cpu,dev}_tensor]`.\n  // See: https://github.com/pytorch/pytorch/pull/69607\n  check_indices_on_cpu_or_selfdevice(self, materialized);\n\n  const auto& result = maybe_get_output();\n\n  if (result.defined()) {\n    at::assert_no_internal_overlap(result);\n    at::assert_no_overlap(result, self);\n    for (const at::OptionalTensorRef& index : materialized) {\n      if (index.has_value()) {\n        at::assert_no_overlap(result, *index);\n      }\n    }\n  }\n\n  auto info = at::native::make_info(self, std::move(indices));\n  build_index_op(*this, info, result);\n  return TORCH_PRECOMPUTE_STRUCT2(index, Tensor)()\n      .set_sizes(std::move(info.indexed_sizes))\n      .set_strides(std::move(info.indexed_strides));\n}\n\n} // namespace meta\n\nnamespace native {\n"
},
{
    "Id": 168,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a69f427f957a37eee9c1dd5df681f30ab38ed3e4",
    "Violation": "improper",
    "Bug report": "aten: Ensure dim is size_t",
    "Number of deleted lines": 1,
    "Deleted lines": "#include <ATen/native/vulkan/ops/Utils.h>\n\nnamespace at {\nnamespace native {\nnamespace vulkan {\nnamespace ops {\nnamespace {\n\nusing namespace api::utils;\n\nTensor expand(\n    const at::Tensor& self,\n    const IntArrayRef output_size,\n    bool implicit = false) {\n  TORCH_CHECK(\n      self.dim() > 0 && self.dim() <= 4,\n      \"Vulkan expand supports up to 4d tensors\");\n  TORCH_CHECK(\n      self.dim() <= output_size.size(),\n      \"Vulkan expand: the number of sizes provided (\",\n      output_size.size(),\n      \") must be greater or equal to the number of dimensions in the tensor (\",\n      self.dim(),\n      \").\");\n\n  std::vector<int64_t> repeat_size = std::vector<int64_t>(output_size.size());\n  std::vector<int64_t> input_size = self.sizes().vec();\n\n  int in_idx = input_size.size() - 1;\n  for (int i = output_size.size() - 1; i >= 0; --i) {\n    if (in_idx >= 0) {\n      TORCH_CHECK(\n          input_size[in_idx] == output_size[i] || input_size[in_idx] == 1 ||\n              output_size[i] == -1,\n          \"Vulkan expand: the expanded size of the tensor (\",\n          output_size[i],\n          \") must match the existing size (\",\n          input_size[in_idx],\n          \") at non-singleton dimension \","
},
{
    "Id": 169,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/8340762211e3b55caa178bac748bd902249f6fc0",
    "Violation": "missing",
    "Bug report": "Update lr_scheduler.py to check the type of eta_min. Add float assertion to `eta_min` parameter in `CosineAnnealingWarmRestarts`.",
    "Number of deleted lines": 0,
    "Deleted lines": "    Args:\n        optimizer (Optimizer): Wrapped optimizer.\n        T_0 (int): Number of iterations for the first restart.\n        T_mult (int, optional): A factor increases :math:`T_{i}` after a restart. Default: 1.\n        eta_min (float, optional): Minimum learning rate. Default: 0.\n        last_epoch (int, optional): The index of last epoch. Default: -1.\n        verbose (bool): If ``True``, prints a message to stdout for\n            each update. Default: ``False``.\n\n    .. _SGDR\\: Stochastic Gradient Descent with Warm Restarts:\n        https://arxiv.org/abs/1608.03983\n    \"\"\"\n\n    def __init__(self, optimizer, T_0, T_mult=1, eta_min=0, last_epoch=-1, verbose=False):\n        if T_0 <= 0 or not isinstance(T_0, int):\n            raise ValueError(\"Expected positive integer T_0, but got {}\".format(T_0))\n        if T_mult < 1 or not isinstance(T_mult, int):\n            raise ValueError(\"Expected integer T_mult >= 1, but got {}\".format(T_mult))\n        self.T_0 = T_0\n        self.T_i = T_0\n        self.T_mult = T_mult\n        self.eta_min = eta_min\n        self.T_cur = last_epoch\n        super().__init__(optimizer, last_epoch, verbose)\n\n    def get_lr(self):\n        if not self._get_lr_called_within_step:\n            warnings.warn(\"To get the last learning rate computed by the scheduler, \"\n                          \"please use `get_last_lr()`.\", UserWarning)\n\n        return [self.eta_min + (base_lr - self.eta_min) * (1 + math.cos(math.pi * self.T_cur / self.T_i)) / 2\n                for base_lr in self.base_lrs]\n\n    def step(self, epoch=None):\n        \"\"\"Step could be called after every batch update\n\n        Example:\n            >>> # xdoctest: +SKIP(\"Undefined vars\")"
},
{
    "Id": 170,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/ae55619a2bb73ebcdc80b02a6ccd72275a9ce23e",
    "Violation": "missing",
    "Bug report": "Add check for same dtype in tensordot implementation",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  std::vector<int64_t> output_size;\n  auto size1 = input1.sizes();\n  output_size.insert(output_size.end(), size1.begin(), size1.end() - 1);\n  output_size.push_back(weight.size(0));\n  auto input1_flattened = input1.reshape({-1, input1.size(-1)});\n  auto input2_flattened = input2.reshape({-1, input2.size(-1)});\n  Tensor output = at::_trilinear(input1_flattened, weight, input2_flattened, {1,3}, {0}, {1,2}, {2,3}).reshape(output_size);\n  if (bias.defined()) {\n    output = output + bias;\n  }\n  return output;\n}\n\n// implements tensordot, a matrix-multiplication-like contraction, but the dimensions given\n// in the two dimension lists\nTensor tensordot(const Tensor& input1, const Tensor& input2, IntArrayRef dims1, IntArrayRef dims2) {\n  TORCH_CHECK(dims1.size() == dims2.size(), \"both dimension lists should have same length\");\n  int64_t csize = 1;  // total size of the contracted dimensions\n  Tensor t1 = input1;\n  Tensor t2 = input2;\n  for (const auto i : c10::irange(dims1.size())) {\n    int s1 = input1.size(dims1[i]);\n    int s2 = input2.size(dims2[i]);\n    if (s2 == 1) { // broadcasted dimensions can be summed right away\n      t1 = t1.sum(dims1[i], true);\n    } else if (s1 == 1) {\n      t2 = t2.sum(dims2[i], true);\n    } else {\n      TORCH_CHECK(s1 == s2, \"contracted dimensions need to match, but first has size \", s1, \" in dim \", dims1[i],\n               \" and second has size \", s2, \" in dim \", dims2[i]);\n      csize *= s1;\n    }\n  }\n\n  auto cdims1 = at::dim_list_to_bitset(dims1, input1.dim());\n  auto cdims2 = at::dim_list_to_bitset(dims2, input2.dim());\n  std::vector<int64_t> p1, p2, rsizes;  // p1, p2: input permutations, rsizes: sizes of the result"
},
{
    "Id": 171,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/b6920405da340bbd3397b80bf16d9c360b0c48d2",
    "Violation": "improper",
    "Bug report": "reorder checks to shave 1 us off no-op dispatch time ",
    "Number of deleted lines": 5,
    "Deleted lines": "}\n\nPyObject *THPVariableClass = nullptr;\n\nPyObject *ParameterClass = nullptr;\n\nstatic PyObject* THPVariable_NewWithVar(\n    PyTypeObject* type,\n    Variable _var,\n    c10::impl::PyInterpreterStatus status);\n\n// clang-tidy gets confused by static const\nstatic const char* VOLATILE_WARNING =\n    \"volatile was removed and now has no effect. Use \"\n    \"`with torch.no_grad():` instead.\";\n\nstatic bool check_has_torch_dispatch(PyObject *obj) {\n  PyTypeObject *tp = Py_TYPE(obj);\n  py::object attr = PyObject_FastGetAttrString(obj, \"__torch_dispatch__\");\n  return (\n    !THPVariable_CheckTypeExact(tp) &&\n    // TODO: test if Python key is disabled\n    attr.ptr() != nullptr &&\n    attr.ptr() != torch::disabled_torch_dispatch_impl()\n  );\n}\n\n// NOLINTNEXTLINE\nstatic PyObject* device_to_py_class_ [static_cast<size_t>(c10::DeviceType::COMPILE_TIME_MAX_DEVICE_TYPES)];\n\nvoid registerPythonTensorClass(const std::string& device, PyObject* python_tensor_class) {\n  c10::Device dev(device);\n\n  TORCH_CHECK(dev.type() == kXLA, \"Only the python class for XLA can be overriden\");\n  if (device_to_py_class_[static_cast<size_t>(dev.type())] != nullptr) {\n    TORCH_WARN(\"Overriding a previously registered python class for \", dev.str());\n  }\n\n  device_to_py_class_[static_cast<size_t>(dev.type())] = python_tensor_class;\n}\n\nstatic PyObject* getPythonTensorClass(c10::Device d) {\n  return device_to_py_class_[static_cast<size_t>(d.type())];\n}"
},
{
    "Id": 172,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/18eeccc7e8cba16d71efdd2eca831983c4abde15",
    "Violation": "missing",
    "Bug report": "Fix Optional type check",
    "Number of deleted lines": 0,
    "Deleted lines": "        engine = self.builder.build_engine(self.network, builder_config)\n        assert(engine)\n        return engine, self._input_names, self._output_names\n\n    def run_node(self, n):\n        self._cur_node_name = str(n)\n        return super().run_node(n)\n\n    def placeholder(self, target, args, kwargs):\n        self._input_names.append(target)\n        shape, dtype, _, shape_ranges, has_batch_dim = self.input_specs[self.input_specs_iter]\n        self.input_specs_iter += 1\n\n        if self.network.has_implicit_batch_dimension:\n            if has_batch_dim:\n                shape = shape[1:]\n        else:\n            for i, shape_range in enumerate(shape_ranges):\n                self.optimization_profiles[i].set_shape(target, *shape_range)\n\n        return self.network.add_input(name=target, shape=tuple(shape), dtype=torch_dtype_to_trt(dtype))\n\n    def call_module(self, target, args, kwargs):\n        assert isinstance(target, str)\n        submod = self.fetch_attr(target)\n        converter = CONVERTERS.get(type(submod))\n\n        if not converter:\n            raise RuntimeError(f'Conversion of module of type {type(submod)} not currently supported!')\n\n        return converter(self.network, submod, args, kwargs, self._cur_node_name)\n\n    def call_function(self, target, args, kwargs):\n        converter = CONVERTERS.get(target)\n\n        if not converter:\n            raise RuntimeError(f'Conversion of function {torch.typename(target)} not currently supported!')\n"
},
{
    "Id": 173,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4dad00b64b396ef81f16bdb896175688fc629f4d",
    "Violation": "missing",
    "Bug report": "special case tensor type check when getting RRef ",
    "Number of deleted lines": 1,
    "Deleted lines": "    auto fm = agent_->send(\n        agent_->getWorkerInfo(owner),\n        RRefUserDelete(rrefId, forkId).toMessage());\n\n    fm->addCallback([](const Message& /* unused */,\n                       const c10::optional<utils::FutureError>& futErr) {\n      RRefContext::handleException(futErr);\n    });\n  }\n}\n\nc10::intrusive_ptr<RRef> RRefContext::getOrCreateRRef(\n    const RRefForkData& rrefForkData,\n    const TypePtr& type) {\n  auto& ownerId = rrefForkData.ownerId_;\n  auto& rrefId = rrefForkData.rrefId_;\n  auto& forkId = rrefForkData.forkId_;\n  if (ownerId == getWorkerId()) {\n    auto ownerRRef = getOwnerRRef(rrefId);\n    TORCH_INTERNAL_ASSERT(ownerRRef->type() == type);\n    return ownerRRef;\n  } else {\n    return createUserRRef(ownerId, rrefId, forkId, type);\n  }\n}\n\nc10::intrusive_ptr<OwnerRRef> RRefContext::getOrCreateOwnerRRef(\n    const RRefId& rrefId,\n    const TypePtr& type) {\n  std::lock_guard<std::mutex> lock(mutex_);\n  const auto iter = owners_.find(rrefId);\n  if (iter == owners_.end()) {\n    // Scenario (1) the first time this owner knows about this RRef\n    //\n    // NB: cannot use make_shared here as the constructor of OwnerRRef is\n    // private.\n    auto rref =\n        c10::make_intrusive<OwnerRRef>(getWorkerId(), rrefId, type);\n    owners_[rref->rrefId()] = rref;\n    ownerCV_.notify_all();"
},
{
    "Id": 174,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4cc6e6bbbe1fb114e7d7fb207ef2deb567950102",
    "Violation": "missing",
    "Bug report": "Adding scalar to the c10 registration type check",
    "Number of deleted lines": 0,
    "Deleted lines": "            }\n          }\n          if (type->isSubtypeOf(TensorType::get())) {\n            AT_ASSERT(iter->isTensor());\n            tracer::addInputs(node, args[i].name().c_str(), iter->toTensor());\n          } else if (type->kind() == TypeKind::FloatType) {\n            AT_ASSERT(iter->isDouble());\n            tracer::addInputs(node, args[i].name().c_str(), iter->toDouble());\n          } else if (type->kind() == TypeKind::IntType) {\n            AT_ASSERT(iter->isInt());\n            tracer::addInputs(node, args[i].name().c_str(), iter->toInt());\n          } else if (type->kind() == TypeKind::BoolType) {\n            AT_ASSERT(iter->isBool());\n            tracer::addInputs(node, args[i].name().c_str(), iter->toBool());\n          } else if (type->kind() == TypeKind::StringType) {\n            AT_ASSERT(iter->isString());\n            tracer::addInputs(\n                node, args[i].name().c_str(), iter->toStringRef());\n          } else if (type->kind() == TypeKind::ListType) {\n            const auto& elem_type = type->expect<ListType>()->getElementType();\n            if (elem_type->isSubtypeOf(TensorType::get())) {\n              AT_ASSERT(iter->isTensorList());\n              auto list = iter->toTensorVector();\n              tracer::addInputs(node, args[i].name().c_str(), list);\n            } else if (elem_type->kind() == TypeKind::FloatType) {\n              AT_ASSERT(iter->isDoubleList());\n              // NB: now, tracer doesn't support tracing double list. We add special\n              // handling here, since in our case, we assume that all the doubles\n              // in the list are constants\n              auto value = iter->toDoubleVector();\n              std::vector<Value*> info(value.size());\n              for (size_t value_index = 0; value_index < value.size(); ++value_index) {\n                info[value_index] = graph->insertConstant(value[value_index]);\n                tracer::recordSourceLocation(info[value_index]->node());\n              }\n              node->addInput(\n                  graph->insertNode(graph->createList(jit::FloatType::get(), info))->output());\n            } else if (elem_type->kind() == TypeKind::IntType) {"
},
{
    "Id": 175,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4b1ebd2f65e49d251ac2cfdb635794c7c6eb362f",
    "Violation": "missing",
    "Bug report": "Fast path for serializing large floating-point tensors to protobuf. Summary: Our existing serialization routines take a significant amount of time for large numpy arrays in order to verify the type of each element in the array as well as converting each element to a canonical type.  For large floating-point tensors, such as model parameters, this checking and converting takes a significant amount of time.  Adding a fast track path for just float32 arrays as this is the most common use case to worry about.",
    "Number of deleted lines": 0,
    "Deleted lines": "        tensor.data_type = caffe2_pb2.TensorProto.DOUBLE\n        tensor.double_data.extend(list(arr.flatten().astype(np.float64)))\n    elif arr.dtype == np.int:\n        tensor.data_type = caffe2_pb2.TensorProto.INT32\n        tensor.int32_data.extend(list(arr.flatten().astype(np.int)))\n    else:\n        # TODO: complete the data type.\n        raise RuntimeError(\n            \"Numpy data type not supported yet: \" + str(arr.dtype))\n    return tensor\n\n\ndef MakeArgument(key, value):\n    \"\"\"Makes an argument based on the value type.\"\"\"\n    argument = caffe2_pb2.Argument()\n    argument.name = key\n    iterable = isinstance(value, collections.Iterable)\n\n    if isinstance(value, np.ndarray):\n        value = value.flatten().tolist()\n    elif isinstance(value, np.generic):\n        # convert numpy scalar to native python type\n        value = np.asscalar(value)\n\n    if type(value) is float:\n        argument.f = value\n    elif type(value) in integer_types or type(value) is bool:\n        # We make a relaxation that a boolean variable will also be stored as\n        # int.\n        argument.i = value\n    elif isinstance(value, binary_type):\n        argument.s = value\n    elif isinstance(value, text_type):\n        argument.s = value.encode('utf-8')\n    elif isinstance(value, Message):\n        argument.s = value.SerializeToString()\n    elif iterable and all(type(v) in [float, np.float_] for v in value):\n        argument.floats.extend("
},
{
    "Id": 176,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/65dfe1203ffab064d4e32fa8f76833042369d2f5",
    "Violation": "missing",
    "Bug report": "add an assertion to check the param num. Introduce this check to see whether it will break any existing workflow",
    "Number of deleted lines": 0,
    "Deleted lines": "            graph_inputs = list(graph.inputs())\n            user_input_num = len(graph_inputs) - len(state_dict)\n            param_names = list(state_dict.keys())\n            for i, inp in enumerate(graph_inputs):\n                if i >= user_input_num:\n                    inp.setUniqueName(param_names[i - user_input_num])\n\n    graph = _optimize_graph(graph, operator_export_type)\n\n    # NB: ONNX requires complete information about output types, which might be\n    # erased by some optimizations, so we need to set it explicitly again.\n    if torch_out is not None:\n        output_tensors, _ = torch._C._jit_flatten(torch_out)\n        for output, tensor in zip(graph.outputs(), output_tensors):\n            output.inferTypeFrom(tensor)\n\n    _set_input_and_output_names(graph, input_names, output_names)\n\n    input_and_param_names = [val.uniqueName() for val in graph.inputs()]\n    param_names = input_and_param_names[len(input_and_param_names) - len(params):]\n    params_dict = dict(zip(param_names, params))\n\n    if verbose:\n        print(graph)\n\n    return graph, params_dict, torch_out\n\n\ndef export_to_pretty_string(model, args, f, export_params=True, verbose=False, training=False,\n                            input_names=None, output_names=None, aten=False, export_raw_ir=False,\n                            operator_export_type=None, export_type=ExportTypes.PROTOBUF_FILE,\n                            example_outputs=None, propagate=False, google_printer=False,\n                            opset_version=None, _retain_param_name=True):\n    if aten or export_raw_ir:\n        assert operator_export_type is None\n        assert aten ^ export_raw_ir\n        operator_export_type = OperatorExportTypes.ATEN if aten else OperatorExportTypes.RAW\n    elif operator_export_type is None:"
},
{
    "Id": 177,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/4fd98dfe69287914fd29b38fbccaf7ac4d7261ee",
    "Violation": "unnecessary",
    "Bug report": "Don't only apply DDP optimizer on forward frames. Previously a check would only apply DDP optimizer on frames named \"forward\".",
    "Number of deleted lines": 1,
    "Deleted lines": "        super().__init__(callback=None)\n\n\ndef catch_errors_wrapper(callback):\n    @functools.wraps(callback)\n    def catch_errors(frame, cache_size):\n        try:\n            if frame.f_lasti >= 0 or skipfiles.check(frame.f_code.co_filename):\n                log.debug(f\"skipping {frame.f_code.co_name} {frame.f_code.co_filename}\")\n                return None\n            if (\n                frame.f_code.co_filename == \"<string>\"\n                and frame.f_code.co_name == \"__new__\"\n            ):\n                # nametuple constructor\n                return None\n            if config.optimize_ddp:\n                ddp_module = DistributedDataParallel._get_active_ddp_module()\n                if ddp_module and frame.f_code.co_name == \"forward\":\n                    with compile_lock:\n                        ddp_optimizer = DDPOptimizer(\n                            bucket_bytes_cap=ddp_module.bucket_bytes_cap,\n                            parameters_to_ignore=ddp_module.parameters_to_ignore,\n                            backend_compile_fn=callback._torchdynamo_orig_callable,\n                        )\n                        hijacked_callback = convert_frame.convert_frame(\n                            ddp_optimizer.compile_fn, guard_export_fn=None\n                        )\n                        return hijacked_callback(frame, cache_size)\n\n            with compile_lock:\n                return callback(frame, cache_size)\n        except Exception:\n            log.exception(\"Error while processing frame\")\n            raise\n\n    catch_errors._torchdynamo_orig_callable = callback\n    return catch_errors\n"
},
{
    "Id": 178,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/8a644f0c136cb12cf200050c2ae6875ec487d174",
    "Violation": "improper",
    "Bug report": "Summary: Sometimes first dim of X in FC is BATCH_OF_FEATURE_MAX instead of BATCH. This caused an issue in f207899183 (when first dim of X is 64 but is set to 1 in inferFC). Change the check from `!= BATCH` to `== UNKNOWN`",
    "Number of deleted lines": 1,
    "Deleted lines": "    dimTypes.push_back(TensorBoundShape_DimType_BATCH);\n    dims.push_back(K);\n    dimTypes.push_back(TensorBoundShape_DimType_CONSTANT);\n    current_dim_type_ = TensorBoundShape_DimType_BATCH;\n    current_max_batch_size_ = spec_.max_batch_size;\n    TensorProto::DataType w_data_type;\n    if (fp16) {\n      w_data_type = TensorProto_DataType_FLOAT;\n    } else if (int8_fc) {\n      w_data_type = TensorProto_DataType_UINT8;\n    } else {\n      w_data_type = w_shape.data_type();\n    }\n    // Note: for FbFCPacked, weight is fp16 but activations are in fp32\n    CheckAndSetTensorBoundShape(\n        op.input(0), dimTypes, dims, w_data_type, int8_fc ? true : false);\n  } else {\n    ShapeInfo& x_shape_info = x_it->second;\n    if (x_shape_info.getDimType(0) != TensorBoundShape_DimType_BATCH) {\n      CAFFE_ENFORCE_GE(x_shape_info.shape.dims_size(), 1);\n      x_shape_info.shape.set_dims(0, spec_.max_batch_size);\n      x_shape_info.setDimType(0, TensorBoundShape_DimType_BATCH);\n    }\n  }\n\n  // Standard shape inference for outputs\n  std::vector<TensorShape> input_shapes{\n      shape_info_[op.input(0)].shape, w_shape_info.shape, b_shape_info.shape};\n  std::vector<TensorShape> output_shapes = InferOutput(op, input_shapes);\n  CAFFE_ENFORCE_EQ(output_shapes.size(), 1);\n  TensorProto::DataType output_data_type;\n  if (fp16) {\n    output_data_type = TensorProto_DataType_FLOAT;\n  } else if (int8_fc) {\n    output_data_type = TensorProto_DataType_UINT8;\n  } else {\n    output_data_type = output_shapes.front().data_type();\n  }\n  CheckAndSetTensorBoundShape("
},
{
    "Id": 179,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5023995292f5119c447de15c20a375b7e3aa2d0b",
    "Violation": "improper",
    "Bug report": " fix output size adjustment for onnxifi_op. Summary: this breaks if we cut the net at certain int8 ops boundary.",
    "Number of deleted lines": 1,
    "Deleted lines": "    auto& end = output_reshape_info.ends[i];\n    end.Resize(dim_size);\n    int32_t* end_ptr = end.template mutable_data<int32_t>();\n    int32_t mismatch = 0;\n    for (int j = 0; j < dim_size; ++j) {\n      CAFFE_ENFORCE_GE(\n          max_shape[j],\n          real_shape.dims(j),\n          \"It is weird that max shape of \",\n          output_names_[i],\n          \" is smaller than real shape at dim \",\n          j,\n          \" (\",\n          max_shape[j],\n          \" vs \",\n          real_shape.dims(j),\n          \")\");\n      begin_ptr[j] = 0;\n      if (max_shape[j] > real_shape.dims(j)) {\n        end_ptr[j] = real_shape.dims(j);\n        mismatch += j;\n      } else {\n        end_ptr[j] = -1;\n      }\n    }\n    output_reshape_info.fast_path[i] = !mismatch;\n  }\n  return current_batch_size;\n}\n\ntemplate <>\nvoid OnnxifiOp<CPUContext>::adjustOutputBatchSizes(int current_batch_size) {\n  auto it = output_reshape_info_.find(current_batch_size);\n  CAFFE_ENFORCE(\n      it != output_reshape_info_.end(),\n      \"Cannot find current_batch_size \",\n      current_batch_size,\n      \" in output_reshape_info_\");\n  const auto& output_reshape_info = it->second;"
},
{
    "Id": 180,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a1edf5f63c62d88230d1f7feb26edb059551ae71",
    "Violation": "improper",
    "Bug report": "Do hook sizes check with SymInt. I don't think this matters for any uses right now, but I found it during an audit; might as well fix it.",
    "Number of deleted lines": 1,
    "Deleted lines": "    std::stringstream ss;\n    ss << \"hook '\" << hook_name << \"' has changed the type of value (\";\n    ss << \"was \" << original.toString() << \" got \";\n    ss << result.toString() << \")\";\n    throw std::runtime_error(ss.str());\n  }\n\n  if (original.is_cuda() != result.is_cuda()) {\n    std::stringstream ss;\n    ss << \"hook '\" << hook_name << \"' has changed the type of value\";\n    if (original.is_cuda()) {\n      ss << \" (was CUDA tensor got CPU tensor)\";\n    } else {\n      ss << \" (was CPU tensor got CUDA tensor)\";\n    }\n    throw std::runtime_error(ss.str());\n  }\n\n  if (original.sizes().vec() != result.sizes().vec()) {\n    std::stringstream ss;\n    ss << \"hook '\" << hook_name << \"' has changed the size of value\";\n    throw std::runtime_error(ss.str());\n  }\n}\n\nvoid AutogradContext::save_for_backward(variable_list to_save) {\n  to_save_ = std::move(to_save);\n}\n\n// The logic for handling saved variables here is the same as\n// python_function.cpp See _save_variables() and unpack_saved_variables()\nvoid AutogradContext::save_variables() {\n  saved_variables_.clear();\n  auto ptr = grad_fn_.lock();\n\n  for (const auto& var : to_save_) {\n    // Allow empty variables to be saved\n    if (var.defined()) {\n      bool is_output = var.grad_fn().get() == ptr.get();"
},
{
    "Id": 181,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f6e137598ddf0b990c423b1d6412502b62e095b2",
    "Violation": "unnecessary",
    "Bug report": "ns for fx: fix nit in default qlinear weight extraction function. Removes the assert for node type in default qlinear weight extraction function. Without the assert, user defined functions can now use this util function without failing this check.",
    "Number of deleted lines": 1,
    "Deleted lines": "        dequant_node = node.args[1]\n        assert isinstance(dequant_node, Node)\n        to_fp16_node = dequant_node.args[0]\n        assert isinstance(to_fp16_node, Node)\n        # extract the dtype, so we can cast to it before returning\n        target_dtype = to_fp16_node.args[1]\n        weight_node = to_fp16_node.args[0]\n        assert isinstance(weight_node, Node)\n        assert weight_node.op == 'get_attr'\n        weight = getattr_from_fqn(gm, weight_node.target)  # type: ignore[arg-type]\n        # return the weight with fp16 cast\n        return weight.detach().to(target_dtype)\n    else:\n        assert linear_second_arg.op == 'get_attr'\n        weight = getattr_from_fqn(gm, linear_second_arg.target)  # type: ignore[arg-type]\n        return weight.detach()\n\ndef get_qlinear_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor:\n    assert node.target in (toq.linear, toq.linear_relu)\n    # packed weight is arg 1\n    packed_weight_node = node.args[1]\n    assert isinstance(packed_weight_node, Node)\n    assert packed_weight_node.op == 'get_attr'\n    packed_weight = getattr_from_fqn(gm, packed_weight_node.target)  # type: ignore[arg-type]\n    # TODO(future PR): why does packed_weight.unpack() not work?\n    (weight, _bias), _name = packed_weight.__getstate__()\n    return weight\n\ndef get_op_to_type_to_weight_extraction_fn() -> Dict[str, Dict[Callable, Callable]]:\n\n    op_to_type_to_weight_extraction_fn: Dict[str, Dict[Callable, Callable]] = {\n        'call_module': {\n            # Conv\n            nn.Conv1d: mod_weight_detach,\n            nn.Conv2d: mod_weight_detach,\n            nn.Conv3d: mod_weight_detach,\n            nni.ConvReLU1d: mod_0_weight_detach,\n            nni.ConvReLU2d: mod_0_weight_detach,\n            nni.ConvReLU3d: mod_0_weight_detach,"
},
{
    "Id": 182,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5a20c56ebce3426397210e91693fbbeade8b46ba",
    "Violation": "unnecessary",
    "Bug report": "emove hasOperation() check. by removing the hasOperation() check, the Operation gets successfully materialized, and static runtime enables successfully and runs ok. Will check that the outputs match with jit interpreter",
    "Number of deleted lines": 1,
    "Deleted lines": "ProcessedNode::ProcessedNode(\n    Node* node,\n    std::vector<const IValue*>&& inputs,\n    bool enable_out_variant)\n    : node_(node), inputs_(std::move(inputs)) {\n  // TODO leverage type information\n  outputs_.resize(node->outputs().size());\n\n  if (enable_out_variant && (fn_ = getOutOfPlaceOperation(node))) {\n    VLOG(1) << \"Switch to out variant for node: \" << PrintNode(node);\n    return;\n  }\n  if (!fn_ && (native_fn_ = getNativeOperation(node))) {\n    VLOG(1) << \"Switch to native impl for node: \" << PrintNode(node);\n    return;\n  }\n  {\n    const Operator& op = node->getOperator();\n    TORCH_CHECK(op.hasOperation());\n    op_ = op.getOperation(node);\n    VLOG(1) << \"Fallback interpreter for node: \" << PrintNode(node);\n  }\n}\n\nvoid ProcessedNode::run() {\n  if (fn_) {\n    fn_(this);\n  } else if (native_fn_) {\n    native_fn_(this);\n  } else {\n    std::vector<IValue> stack;\n    const size_t size = node_->inputs().size();\n    stack.reserve(size);\n    for (const auto i : c10::irange(size)) {\n      stack.emplace_back(Input(i));\n    }\n\n    DCHECK(op_);\n    op_->operator()(&stack);"
},
{
    "Id": 183,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/012829eb3657aff2d58cead0bd166089c6e90c7f",
    "Violation": "unnecessary",
    "Bug report": "Do not crash when target device is unsupported by fuser. The `canFuseOnDevice` function now crashes when the device is not covered (i.e., CPU, GPU, XPU). However, now we have some devices, such as XLA and Lazy, that could perform fusion by themselves. This checker then prevents these devices from working on the models partially implemented in `jit.script`. This PR proposes to remove this checker and simply return false for all uncovered cases.",
    "Number of deleted lines": 2,
    "Deleted lines": "    return true;\n  }\n\n  bool canFuseOnDevice(Value* v) {\n    auto type = v->type()->cast<TensorType>();\n    if (!type) {\n      return true;\n    }\n    auto device = type->device();\n    if (!device) {\n      return false;\n    }\n    if (device->is_cpu()) {\n      return canFuseOnCPU();\n    } else if (device->is_cuda()) {\n      return canFuseOnGPU();\n    } else if (device->is_xpu()) {\n      return false;\n    } else {\n      TORCH_CHECK_NOT_IMPLEMENTED(false, \"Unknown device for tensorexpr fuser\")\n    }\n  }\n\n  bool isFusableOnDevice(Node* node) {\n    for (const auto& input : node->inputs()) {\n      if (input->node()->kind() == prim::ListConstruct) {\n        if (!isFusableOnDevice(input->node())) {\n          return false;\n        }\n      }\n      if (!canFuseOnDevice(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  bool typesAreSupported(Node* node) {\n    // clang-format off\n    // breaks up the schema strings so they are no longer discoverable with ctrl-F\n    static const OperatorSet float_only_operator_set{"
},
{
    "Id": 184,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/f386312ec936a94bfb1abe44acdd61d498f4272b",
    "Violation": "improper",
    "Bug report": "Don't do extra numel() check in TensorImpl::data(). `is_empty()` checks `numel() == 0`, but we don't need to access `numel_` at all (or the policy that `numel()` checks) in our happy path -- we just need the data pointer from `storage_`. Let's do the check we need to do using only the data we strictly need, rather than adding instructions loading other pieces of data.",
    "Number of deleted lines": 4,
    "Deleted lines": "   * It is invalid to call data() on a dtype-uninitialized tensor, even if the\n   * size is 0.\n   *\n   * WARNING: The data pointed to by this tensor may not contiguous; do NOT\n   * assume that itemsize() * numel() is sufficient to compute the bytes that\n   * can be validly read from this tensor.\n   */\n  inline void* data() const {\n    TORCH_CHECK(\n        has_storage(),\n        \"Cannot access data pointer of Tensor that doesn't have storage\");\n    TORCH_CHECK(\n        dtype_initialized(),\n        \"Cannot access data pointer of Tensor that doesn't have initialized dtype \"\n        \"(e.g., caffe2::Tensor x(CPU), prior to calling mutable_data<T>() on x)\");\n    // Computing an offset into an empty tensor would be UB, since an empty\n    // tensor's storage will be nullptr, and adding a nonzero offset to nullptr\n    // is UB.  So we skip the offset computation in this case.\n    if (is_empty()) {\n      return nullptr;\n    }\n    return static_cast<void*>(\n        static_cast<char*>(storage_.data()) +\n        data_type_.itemsize() * storage_offset_);\n  }\n\n  /**\n   * Like data<T>(), but performs no checks.  You are responsible for ensuring\n   * that all invariants required by data() are upheld here.\n   */\n  template <typename T>\n  inline T* unsafe_data() const {\n    return storage_.unsafe_data<T>() + storage_offset_;\n  }\n\n  /**\n   * Returns the TypeMeta of a tensor, which describes what data type\n   * it is (e.g., int, float, ...)\n   */\n  const caffe2::TypeMeta dtype() const {\n    return data_type_;\n  }\n\n  /**"
},
{
    "Id": 185,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/fc304bec9f550075d4c899aa0fc5b1a0a573c1e5",
    "Violation": "unnecessary",
    "Bug report": "Remove redundant checks from canHandle in TE fuser",
    "Number of deleted lines": 3,
    "Deleted lines": "    }\n  }\n  for (torch::jit::Value* input : node->inputs()) {\n    if (!allShapesAreKnown(input)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nbool canHandle(Node* node) {\n  if (node->kind() == prim::Constant) {\n    if (node->output()->type()->cast<TensorType>()) {\n      // TODO: add support for tensor constants.\n      return false;\n    }\n    return true;\n  }\n  if (node->kind() == prim::Loop) {\n    return false; // TODO\n  }\n  if (!allShapesAreKnown(node)) {\n    return false;\n  }\n\n  // Don't include nodes whose inputs are tensor constants - we cannot handle\n  // them at the moment.\n  // TODO: actually support tensor constants and remove this.\n  for (torch::jit::Value* input : node->inputs()) {\n    if (input->node()->kind() == prim::Constant &&\n        input->type()->cast<TensorType>()) {\n      return false;\n    }\n  }\n  return tensorexpr::isSupported(node);\n}\n\nNode* getOrCreateTensorExprSubgraph(Node* n) {\n  if (n->hasAttribute(attr::Subgraph) && n->kind() == getTensorExprSymbol()) {\n    return n;\n  }"
},
{
    "Id": 186,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/5b7c72101ca8e9d4edba1d16b6121ad900ca3936",
    "Violation": "unnecessary",
    "Bug report": "Removed check for is_quantized in dequantize_cpu_or_cuda. This particular PR isn't dispatcher related but does remove the extraneous torch check for a quant tensor since the dispatcher already handles a quantized backend for this particular function",
    "Number of deleted lines": 1,
    "Deleted lines": "        scales[i].item<double>(),\n        zero_points[i].item<int64_t>(),\n        dtype));\n  }\n  return quantized_tensors;\n}\n\nTensor quantize_per_channel(\n    const Tensor& self,\n    const Tensor& scales,\n    const Tensor& zero_points,\n    int64_t axis,\n    ScalarType dtype) {\n  auto quantizer = make_per_channel_affine_quantizer(scales, zero_points, axis, dtype);\n  return quantizer->quantize(self);\n}\n\nTensor dequantize_cpu_or_cuda(const Tensor& self) {\n  TORCH_CHECK(!self.is_quantized());\n  return self.to(at::kFloat);\n}\n\nTensor dequantize_quantized(const Tensor& self) {\n  return get_qtensorimpl(self)->quantizer()->dequantize(self);\n}\n\nstd::vector<Tensor> dequantize_tensors_quantized_cpu(TensorList tensors) {\n  std::vector<Tensor> dequantized_tensors;\n  for (const auto & tensor : tensors) {\n    dequantized_tensors.push_back(tensor.dequantize());\n  }\n  return dequantized_tensors;\n}\n\ndouble q_scale_quant(const Tensor& self) {\n  auto quantizer = get_qtensorimpl(self)->quantizer();\n  TORCH_CHECK(quantizer->qscheme() == kPerTensorAffine);\n  return static_cast<PerTensorAffineQuantizer*>(quantizer.get())->scale();\n}"
},
{
    "Id": 187,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/2597d5d72272d196b4cb5442ffc8cde376d1f785",
    "Violation": "insufficient",
    "Bug report": " TorchDynamo: always convert flexiblelayout to be FixedLayout when given a stride_order. For convolution, we always call **require_stride_order** to convert the input to the target stride order,  if the original input's layout is flexiblelayout, there always have a memory copy because the **is_stride_order_storage_and_layout** only checks the init stride order,  I think for flexiblelayout, means it's layout can be changed, if the user gives a stride order, I think we always need to convert the flexiblelayout to be FixedLayout using given strider order.",
    "Number of deleted lines": 3,
    "Deleted lines": "\n    @classmethod\n    def require_stride1(cls, x):\n        if is_storage_and_layout(x):\n            if len(x.get_stride()) == 0:\n                return x\n            for stride in x.get_stride():\n                if stride == 1:\n                    return x\n        return cls.copy_input(x)\n\n    @classmethod\n    def require_stride_order(cls, x, order):\n        if x.get_numel() == 0:  # Layout doesn't matter\n            return x\n\n        # require x to have the layout as strided_ordered as order\n        if is_storage_and_layout(x):\n            if isinstance(\n                x.get_layout(), FlexibleLayout\n            ) and is_stride_order_storage_and_layout(x, order):\n                # fix flexiblelayout to be FixedLayout with stride_order\n                as_storage_and_layout(\n                    x, freeze=True, want_contiguous=False, stride_order=order\n                )\n                return x\n            elif isinstance(\n                x.get_layout(), FixedLayout\n            ) and x.get_layout().is_stride_ordered(order):\n                return x\n            elif isinstance(x.get_layout(), MutationLayout):\n                if isinstance(x.get_layout().real_layout(), FlexibleLayout):\n                    raise AssertionError(\n                        \"the MutationLayout's real layout shouldn't be FlexibleLayout\"\n                    )\n                elif isinstance(\n                    x.get_layout().real_layout(), FixedLayout\n                ) and x.get_layout().real_layout().is_stride_ordered(order):\n                    return x\n\n        # TODO - Storage to InputBuffer"
},
{
    "Id": 188,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/201f7d330ac8c33a7bedb8f0a66954415d1d27db",
    "Violation": "unnecessary",
    "Bug report": "Remove duplicate check in distributions arg validation ",
    "Number of deleted lines": 2,
    "Deleted lines": "                warnings.warn(f'{self.__class__} does not define `arg_constraints`. ' +\n                              'Please set `arg_constraints = {}` or initialize the distribution ' +\n                              'with `validate_args=False` to turn off validation.')\n            for param, constraint in arg_constraints.items():\n                if constraints.is_dependent(constraint):\n                    continue  # skip constraints that cannot be checked\n                if param not in self.__dict__ and isinstance(getattr(type(self), param), lazy_property):\n                    continue  # skip checking lazily-constructed args\n                value = getattr(self, param)\n                valid = constraint.check(value)\n                if not valid.all():\n                    raise ValueError(\n                        f\"Expected parameter {param} \"\n                        f\"({type(value).__name__} of shape {tuple(value.shape)}) \"\n                        f\"of distribution {repr(self)} \"\n                        f\"to satisfy the constraint {repr(constraint)}, \"\n                        f\"but found invalid values:\\n{value}\"\n                    )\n                if not constraint.check(getattr(self, param)).all():\n                    raise ValueError(\"The parameter {} has invalid values\".format(param))\n        super(Distribution, self).__init__()\n\n    def expand(self, batch_shape, _instance=None):\n        \"\"\"\n        Returns a new distribution instance (or populates an existing instance\n        provided by a derived class) with batch dimensions expanded to\n        `batch_shape`. This method calls :class:`~torch.Tensor.expand` on\n        the distribution's parameters. As such, this does not allocate new\n        memory for the expanded distribution instance. Additionally,\n        this does not repeat any args checking or parameter broadcasting in\n        `__init__.py`, when an instance is first created.\n\n        Args:\n            batch_shape (torch.Size): the desired expanded size.\n            _instance: new instance provided by subclasses that\n                need to override `.expand`.\n\n        Returns:\n            New distribution instance with batch dimensions expanded to\n            `batch_size`."
},
{
    "Id": 189,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/a47cc18254ade6dee1fe4a3c4eb5aca7ba40c77c",
    "Violation": "unnecessary",
    "Bug report": "remove unnecessary tuple check on tensor types",
    "Number of deleted lines": 1,
    "Deleted lines": "                return torch.add(x, y)\n    \"\"\"\n\n    def __init__(self, dim):\n        self.__origin__ = TensorType\n        self.__args__ = dim\n\n    def __repr__(self):\n        return f'TensorType[{self.__args__}]'\n\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            return list(self.__args__) == list(other.__args__)\n        else:\n            return False\n\n    @staticmethod\n    def __class_getitem__(*args):\n        assert isinstance(args[0], tuple)\n        return TensorType(args[0])\n\n\nclass _DynType:\n    \"\"\"\n    _DynType defines a type which stands for the absence of type information.\n    \"\"\"\n    def __init__(self):\n        self.__name__ = '_DynType'\n\n    def __eq__(self, other):\n        return isinstance(other, self.__class__)\n\n    def __str__(self):\n        return \"Dyn\"\n\n    def __repr__(self):\n        return \"Dyn\"\n\n"
},
{
    "Id": 190,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/2512017814fb2e3d6f3ae9dd3b315692ffc8fc71",
    "Violation": "unnecessary",
    "Bug report": "Fix for out of bounds read in torch mobile flatbuffer loader ",
    "Number of deleted lines": 2,
    "Deleted lines": "      class_type->addMethod(f.second);\n    }\n  }\n  const auto* jit_constants = module_->jit_constants();\n  for (const auto i : c10::irange(jit_constants->size())) {\n    constants->emplace_back(getIValue(jit_constants->Get(i)));\n  }\n  parseExtraFilesFromVector(module_->jit_sources(), jit_sources);\n}\n\n} // namespace\n\nmobile::Module parse_and_initialize_mobile_module(\n    void* data,\n    size_t size,\n    c10::optional<at::Device>,\n    ExtraFilesMap* extra_files,\n    bool should_copy_tensor_memory) {\n  TORCH_CHECK(\n      mobile::serialization::ModuleBufferHasIdentifier(data), \"Format error\");\n  // TODO(T128189662): If not copying, enforce that data is aligned to\n  // kFlatbufferDataAlignmentBytes, and add unit tests.\n\n  // Validate Flatbuffer module before parsing.\n  flatbuffers::Verifier verifier(reinterpret_cast<uint8_t*>(data), size);\n  TORCH_CHECK(\n      mobile::serialization::VerifyModuleBuffer(verifier),\n      \"Malformed Flatbuffer module\");\n\n  FlatbufferLoader loader;\n  loader.setShouldCopyTensorMemory(should_copy_tensor_memory);\n\n  // Flatbuffer doesn't seem to have a way to provide the buffer size when\n  // interacting with the buffer.\n  auto* flatbuffer_module = mobile::serialization::GetMutableModule(data);\n  auto* end = static_cast<char*>(data) + size;\n  mobile::Module m = loader.parseModule(flatbuffer_module, end);\n  if (extra_files != nullptr) {\n    parseExtraFiles(flatbuffer_module, *extra_files);\n  }"
},
{
    "Id": 191,
    "Library": "pytorch",
    "Commit Link": "https://github.com/pytorch/pytorch/commit/e7fc7c732cbde822f9490840704b1f57fe86c50a",
    "Violation": "insufficient",
    "Bug report": "Bugfix for fusion device check",
    "Number of deleted lines": 1,
    "Deleted lines": "      if (usedOnlyInSize(output) && shape_of.count(soutput) > 0) {\n        auto uses = output->uses();\n        for (Use u : uses) {\n          AT_ASSERT(u.user->matches(\"aten::size(Tensor self) -> int[]\"));\n          u.user->output()->replaceAllUsesWith(shape_of.at(soutput));\n          u.user->destroy();\n        }\n        fusion_group->eraseOutput(i);\n        subgraph->eraseOutput(i);\n      }\n    }\n  }\n\n  void refreshAliasDb() {\n    aliasDb_ = torch::make_unique<AliasDb>(graph_);\n  }\n\n  bool canFuseWithConcat(Value* producer, Node* before_check) {\n    if (!isFusable(producer->node())) {\n      return false;\n    }\n    // NB: it is important that this check happens after isFusable, which checks\n    // that the blocks match, and it's not a special node like prim::Param\n    if (!aliasDb_->couldMoveBeforeTopologically(\n            producer->node(), before_check)) {\n      return false;\n    }\n\n    // If the number of kernel args could exceed the limit, skip.\n    if ((before_check->inputs().size() +\n         before_check->outputs().size() +\n         producer->node()->inputs().size() +\n         producer->node()->outputs().size())\n        > fusion_kernel_args_limit) {\n      return false;\n    }\n\n    // Fusion groups can be merged with concat's group if and only if\n    // - the value they produce isn't already coming from a concat and"
},
{
    "Id": 192,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4a343043dbc6ce229b4dcf2258f7b6352db32b64",
    "Violation": "improper",
    "Bug report": "Fix hasattr check in saved_model_cli ",
    "Number of deleted lines": 2,
    "Deleted lines": "  parser_run.add_argument(\n      '--overwrite',\n      action='store_true',\n      help='if set, output file will be overwritten if it already exists.')\n  parser_run.add_argument(\n      '--tf_debug',\n      action='store_true',\n      help='if set, will use TensorFlow Debugger (tfdbg) to watch the '\n           'intermediate Tensors and runtime GraphDefs while running the '\n           'SavedModel.')\n  parser_run.set_defaults(func=run)\n\n  return parser\n\n\ndef main():\n  parser = create_parser()\n  args = parser.parse_args()\n  if not hasattr(args.func):\n    parser.error(\"too few arguments\")\n  args.func(args)\n\n\nif __name__ == '__main__':\n  sys.exit(main())\n"
},
{
    "Id": 193,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/73f25fc34c69878c83ee2eeb8f030cb79a76472f",
    "Violation": "insufficient",
    "Bug report": "This fix tries to address the issue by adding an `hasattr()` check so that AttributeError is not thrown.",
    "Number of deleted lines": 1,
    "Deleted lines": "\ndef get_api_imports():\n  \"\"\"Get a map from destination module to formatted imports.\n\n  Returns:\n    A dictionary where\n      key: (string) destination module (for e.g. tf or tf.consts).\n      value: List of strings representing module imports\n          (for e.g. 'from foo import bar') and constant\n          assignments (for e.g. 'FOO = 123').\n  \"\"\"\n  module_imports_builder = _ModuleImportsBuilder()\n  visited_symbols = set()\n\n  # Traverse over everything imported above. Specifically,\n  # we want to traverse over TensorFlow Python modules.\n  for module in sys.modules.values():\n    # Only look at tensorflow modules.\n    if not module or 'tensorflow.' not in module.__name__:\n      continue\n    # Do not generate __init__.py files for contrib modules for now.\n    if '.contrib.' in module.__name__ or module.__name__.endswith('.contrib'):\n      continue\n\n    for module_contents_name in dir(module):\n      attr = getattr(module, module_contents_name)\n      if id(attr) in visited_symbols:\n        continue\n\n      # If attr is _tf_api_constants attribute, then add the constants.\n      if module_contents_name == _API_CONSTANTS_ATTR:\n        for exports, value in attr:\n          for export in exports:\n            names = export.split('.')\n            dest_module = '.'.join(names[:-1])\n            module_imports_builder.add_import(\n                dest_module, module.__name__, value, names[-1])\n        continue\n"
},
{
    "Id": 194,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cdc36a3b1f7d227984bb5e415b555ed334737f82",
    "Violation": "missing",
    "Bug report": "cosmetic fix to MonitoredSession.__del__ AttributeError. This CL prevents this message by checking that the underlying _sess object has the __del__ method defined before calling it.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n    Returns:\n      An instance of `OnRunStartResponse`.\n    \"\"\"\n\n  def as_default(self):\n    return ops.default_session(self)\n\n  def __enter__(self):\n    if self._default_session_context_manager is None:\n      self._default_session_context_manager = self.as_default()\n    return self._default_session_context_manager.__enter__()\n\n  def __exit__(self, exec_type, exec_value, exec_tb):\n    self._default_session_context_manager.__exit__(\n        exec_type, exec_value, exec_tb)\n\n  def __del__(self):\n    self._sess.__del__()\n\n  def close(self):\n    self._sess.close()\n\n  # TODO(cais): Add _node_name_regex_whitelist and\n  #   _node_op_type_regex_whitelist.\n\n  @abc.abstractmethod\n  def invoke_node_stepper(self,\n                          node_stepper,\n                          restore_variable_values_on_exit=True):\n    \"\"\"Callback invoked when the client intends to step through graph nodes.\n\n    Args:\n      node_stepper: (stepper.NodeStepper) An instance of NodeStepper to be used\n        in this stepping session.\n      restore_variable_values_on_exit: (bool) Whether any variables whose values\n        have been altered during this node-stepper invocation should be restored\n        to their old values when this invocation ends.\n"
},
{
    "Id": 195,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/67b6c880e39ba02ba53c7d499e45fd136090ee32",
    "Violation": "missing",
    "Bug report": " In tf.map_fn: skip sanity check for shape of first value in elems if it doesn't have a shape attribute. (E.g., this can happen if it's a CompsiteTensor.)",
    "Number of deleted lines": 4,
    "Deleted lines": "    # supported in Eager\n    if in_graph_mode:\n      # Any get_variable calls in fn will cache the first call locally\n      # and not issue repeated network I/O requests for each iteration.\n      varscope = vs.get_variable_scope()\n      varscope_caching_device_was_none = False\n      if varscope.caching_device is None:\n        # TODO(ebrevdo): Change to using colocate_with here and in other\n        # methods.\n        varscope.set_caching_device(lambda op: op.device)\n        varscope_caching_device_was_none = True\n\n    elems_flat = [\n        ops.convert_to_tensor_or_composite(t, name=\"elem\") for t in elems_flat\n    ]\n\n    # Check that inputs are not scalars.\n    first_elem = elems_flat[0]\n    elems_static_shape = first_elem.shape\n    if elems_static_shape.ndims is not None and elems_static_shape.ndims < 1:\n      raise ValueError(\n          \"Elements in elems must be 1+ dimensional Tensors, not scalars\")\n\n    # Box any composite tensors into tensor lists.\n    elems_batchable = _elems_flat_to_batchable(elems_flat)\n\n    # Find the number of iterations, n.  (may be known statically.)\n    n_static = tensor_shape.Dimension(\n        tensor_shape.dimension_value(\n            elems_batchable[0].get_shape().with_rank_at_least(1)[0]))\n    for tensor in elems_batchable[1:]:\n      n_static.assert_is_compatible_with(\n          tensor_shape.Dimension(\n              tensor_shape.dimension_value(\n                  tensor.get_shape().with_rank_at_least(1)[0])))\n    n = n_static.value or array_ops.shape(elems_batchable[0])[0]\n\n    # Convert elems to tensor array.\n    # TODO(edloper): Should we set infer_shape=False for composite tensors?\n    elems_batchable_ta = [\n        tensor_array_ops.TensorArray(\n            dtype=t.dtype, size=n, dynamic_size=False, infer_shape=True)"
},
{
    "Id": 196,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/dcdca11bcbab4b2474e7bf4d21d1806e6c2790a3",
    "Violation": "insufficient",
    "Bug report": " Check both output name and output slot in duplicate scope id sanity check. Before this change, we would throw an error if different outputs of a node were committed to different scope ids.  Since that is legal, this change fixes the bug by making the check based on both output name and output index.",
    "Number of deleted lines": 1,
    "Deleted lines": "  }\n}\n\nclass UnaryElementwiseRewriter : public ScopedAllocatorOptimizer::Rewriter {\n public:\n  ~UnaryElementwiseRewriter() override {}\n\n  // Return non-OK if any input is already committed to a ScopedAllocator.\n  //\n  // We insert an identity to ensure that inputs are not committed to different\n  // scope ids in `MaybeRewriteInput`, so this function is basically a sanity\n  // check.\n  Status CheckExistingScopedAllocator(const std::vector<InputDesc>& inputs) {\n    for (const InputDesc& nd : inputs) {\n      VLOG(2) << \"get attrs for \" << nd.from_node_def->name();\n      AttrSlice n_attrs = AttrSlice(*nd.from_node_def);\n      std::vector<int32> scope_ids;\n      Status ss = GetNodeAttr(n_attrs, kScopedAllocatorAttrName, &scope_ids);\n      if (ss.ok()) {\n        LOG(INFO) << \"Abandoning ScopedAllocatorOptimizer because input \"\n                  << nd.from_node_def->name() << \" output \" << scope_ids[0]\n                  << \" is already assigned to scope_id \" << scope_ids[1];\n        return errors::Internal(\n            \"Abandoning ScopedAllocatorOptimizer because input \",\n            nd.from_node_def->name(), \" output \", scope_ids[0], \" is already \",\n            \"assigned to scope_id \", scope_ids[1]);\n      }\n    }\n    return Status::OK();\n  }\n\n  // Return non-OK if any input is a member of op_set.\n  Status CheckInternalDataDependency(const std::set<string>& op_set,\n                                     const std::vector<InputDesc>& inputs) {\n    for (const InputDesc& nd : inputs) {\n      if (op_set.find(nd.from_node_def->name()) != op_set.end()) {\n        if (nd.output_slot != tensorflow::Graph::kControlSlot) {\n          return errors::Internal(\"Data edge exists bewtween \",\n                                  nd.from_node_def->name(),"
},
{
    "Id": 197,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a607eb012b1bc4f6dbe263ad99caa76d84ae3ab2",
    "Violation": "insufficient",
    "Bug report": "fix output shape check for strided slice always failing when stride != 1 ",
    "Number of deleted lines": 3,
    "Deleted lines": "    auto out_shape = graph->FindOutputs(node->id)[0]->tensor.shape;\n    if (!tf_options) {\n      return InternalError(\"Missing tflite params\");\n    }\n    RETURN_IF_ERROR(CheckOptionsSupport(tf_options));\n\n    SliceAttributes attr;\n    if (read_without_batch) {\n      RETURN_IF_ERROR(ReadAttribsWithoutBatch(reader, tf_options,\n                                              input->tensor.shape, &attr));\n    }\n    if (read_with_batch) {\n      RETURN_IF_ERROR(\n          ReadAttribsWithBatch(reader, tf_options, input->tensor.shape, &attr));\n    }\n    if (attr.strides.h < 0 || attr.strides.w < 0 || attr.strides.c < 0) {\n      return UnimplementedError(\"Reverse slices are not supported.\");\n    }\n    if (attr.ends.h - attr.starts.h != out_shape.h) {\n      return UnimplementedError(\"Output height doesn't match\");\n    }\n    if (attr.ends.w - attr.starts.w != out_shape.w) {\n      return UnimplementedError(\"Output width doesn't match\");\n    }\n    if (attr.ends.c - attr.starts.c != out_shape.c) {\n      return UnimplementedError(\"Output channels don't match\");\n    }\n    node->operation.attributes = attr;\n    return OkStatus();\n  }\n\n private:\n  Status UpdateWithMask(const TfLiteStridedSliceParams* tf_options,\n                        const BHWC& input_shape, int ignore_h, int ignore_w,\n                        int ignore_c, SliceAttributes* attr) {\n    if (tf_options->begin_mask & ignore_h) {\n      attr->starts.h = 0;\n    }\n    if (tf_options->begin_mask & ignore_w) {\n      attr->starts.w = 0;\n    }\n    if (tf_options->begin_mask & ignore_c) {\n      attr->starts.c = 0;\n    }\n"
},
{
    "Id": 198,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/2bf2799ee80791107d4fe587ff9b6c7cf6c8b418",
    "Violation": "missing",
    "Bug report": "Fail gracefully if the serialized graph would be too large. Without this explicit check, a large graph would trigger an assertion failure in the protobuf codebase",
    "Number of deleted lines": 1,
    "Deleted lines": "                \"64-bit int types should match in size\");\n  return TF_NewTensor(TF_STRING,\n                      reinterpret_cast<const int64_t*>(dimvec.data()),\n                      dimvec.size(), base, size, DeleteArray, base);\n}\n\nStatus MessageToBuffer(const tensorflow::protobuf::Message& in,\n                       TF_Buffer* out) {\n  if (out->data != nullptr) {\n    return InvalidArgument(\"Passing non-empty TF_Buffer is invalid.\");\n  }\n  const size_t proto_size = in.ByteSizeLong();\n  void* buf = tensorflow::port::Malloc(proto_size);\n  if (buf == nullptr) {\n    return tensorflow::errors::ResourceExhausted(\n        \"Failed to allocate memory to serialize message of type '\",\n        in.GetTypeName(), \"' and size \", proto_size);\n  }\n  in.SerializeToArray(buf, proto_size);\n  out->data = buf;\n  out->length = proto_size;\n  out->data_deallocator = [](void* data, size_t length) {\n    tensorflow::port::Free(data);\n  };\n  return Status::OK();\n}\n\nvoid RecordMutation(TF_Graph* graph, const TF_Operation& op,\n                    const char* mutation_type) {\n  // If any session has already run this node_id, mark this session as\n  // unrunnable.\n  for (auto it : graph->sessions) {\n    mutex_lock session_lock(it.first->mu);\n    if (it.first->last_num_graph_nodes > op.node.id()) {\n      it.second = strings::StrCat(\n          \"Operation '\", op.node.DebugString(), \"' was changed by \",\n          mutation_type,\n          \" after it was run by a session. This mutation will have no effect, \"\n          \"and will trigger an error in the future. Either don't modify \""
},
{
    "Id": 199,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/0197a2d8a3070af763cb67227835ee63df095e6d",
    "Violation": "missing",
    "Bug report": " Add a check to catch out-of-bound access on invalid Graphs. The existing Check trying to catch malformed graph is not robust when an op is registered with an expected number of inputs but has data edges beyond this.",
    "Number of deleted lines": 0,
    "Deleted lines": "    if (node == nullptr || !node->IsOp()) continue;\n    NodeDef* node_def = graph_def->add_node();\n    *node_def = node->def();\n\n    // Use the node's assigned device, if any, instead of the device requested\n    // in the NodeDef.\n    if (!node->assigned_device_name().empty()) {\n      node_def->set_device(node->assigned_device_name());\n    }\n\n    // Get the inputs for this Node.  We make sure control inputs are\n    // after data inputs, as required by GraphDef.\n    inputs.clear();\n    inputs.resize(node->num_inputs(), nullptr);\n    for (const Edge* edge : node->in_edges()) {\n      if (edge->IsControlEdge()) {\n        inputs.push_back(edge);\n      } else {\n        CHECK(inputs[edge->dst_input()] == nullptr)\n            << \"Edge \" << edge->src()->DebugString() << \":\"\n            << edge->dst()->DebugString() << \" with dst_input \"\n            << edge->dst_input() << \" and had pre-existing input edge \"\n            << inputs[edge->dst_input()]->src()->DebugString() << \":\"\n            << inputs[edge->dst_input()]->dst()->DebugString();\n\n        inputs[edge->dst_input()] = edge;\n      }\n    }\n    // Sort the control inputs for more predictable serialization.\n    std::sort(inputs.begin() + node->num_inputs(), inputs.end(),\n              [](const Edge* a, const Edge* b) -> bool {\n                return a->src()->name() < b->src()->name();\n              });\n    node_def->clear_input();\n    node_def->mutable_input()->Reserve(inputs.size());\n\n    for (size_t i = 0; i < inputs.size(); ++i) {\n      const Edge* edge = inputs[i];"
},
{
    "Id": 200,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/314d9cd9b607460f8bfea80fc828b1521ca18443",
    "Violation": "missing",
    "Bug report": "Fix segfault in MacOS when GPU is not available ",
    "Number of deleted lines": 1,
    "Deleted lines": "               << DriverVersionStatusToString(dso_version)\n               << \" -- cannot find working devices in this configuration\";\n  }\n}\n\n\nport::StatusOr<DriverVersion> Diagnostician::FindKernelDriverVersion() {\n#if defined(__APPLE__)\n  CFStringRef kext_ids[1];\n  kext_ids[0] = kDriverKextIdentifier;\n  CFArrayRef kext_id_query = CFArrayCreate(nullptr, (const void**)kext_ids, 1, &kCFTypeArrayCallBacks);\n  CFDictionaryRef kext_infos = KextManagerCopyLoadedKextInfo(kext_id_query, nullptr);\n  CFRelease(kext_id_query);\n\n  CFDictionaryRef cuda_driver_info = nullptr;\n  if (CFDictionaryGetValueIfPresent(kext_infos, kDriverKextIdentifier, (const void**)&cuda_driver_info)) {\n    // NOTE: OSX CUDA driver does not currently store the same driver version\n    // in kCFBundleVersionKey as is returned by cuDriverGetVersion\n    const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info, kCFBundleVersionKey), kCFStringEncodingUTF8);\n    CFRelease(kext_infos);\n    return StringToDriverVersion(version);\n  }\n  CFRelease(kext_infos);\n  auto status =\n    port::Status{port::error::INTERNAL,\n                 port::StrCat(\"failed to read driver bundle version: \",\n                              CFStringGetCStringPtr(kDriverKextIdentifier, kCFStringEncodingUTF8))\n    };\n  return status;\n#else\n  FILE *driver_version_file = fopen(kDriverVersionPath, \"r\");\n  if (driver_version_file == nullptr) {\n    return port::Status{\n        port::error::PERMISSION_DENIED,\n        port::StrCat(\"could not open driver version path for reading: \",\n                     kDriverVersionPath)};\n  }\n\n  static const int kContentsSize = 1024;\n  port::InlinedVector<char, 4> contents(kContentsSize);"
},
{
    "Id": 201,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/abd645085b1dd1496df847b05a1934d471a2f2c0",
    "Violation": "missing",
    "Bug report": " Use the correct device ordinal to check whether the device the executable was built for is equivalent to the device the it will run on. Before this patch, if the device to run on was provided via a stream without setting the device ordinal in the ExecutableRunOptions, we would check the default device against the device the executable was built for.",
    "Number of deleted lines": 5,
    "Deleted lines": "    const se::Platform* stream_platform =\n        run_options.stream()->parent()->platform();\n    if (stream_platform != backend_->platform()) {\n      return InvalidArgument(\n          \"stream is for platform %s, but service targets platform %s\",\n          stream_platform->Name().c_str(),\n          backend_->platform()->Name().c_str());\n    }\n\n    // Cannot specify device_ordinal with a stream. The stream determines these\n    // values.\n    if (run_options.device_ordinal() != -1) {\n      return InvalidArgument(\n          \"cannot set both device ordinal and stream options in \"\n          \"ExecutableRunOptions; the stream determines the device ordinal\");\n    }\n  }\n\n  // Verify that the device the executable was built for is equivalent to the\n  // device it will run on.\n  int run_device_ordinal = run_options.device_ordinal() == -1\n                               ? backend_->default_device_ordinal()\n                               : run_options.device_ordinal();\n  TF_ASSIGN_OR_RETURN(bool devices_equivalent,\n                      backend_->devices_equivalent(\n                          run_device_ordinal, build_options_.device_ordinal()));\n  if (!devices_equivalent) {\n    TF_ASSIGN_OR_RETURN(se::StreamExecutor * run_executor,\n                        backend_->stream_executor(run_device_ordinal));\n    TF_ASSIGN_OR_RETURN(se::StreamExecutor * build_executor,\n                        backend_->stream_executor(build_device_ordinal()));\n    return InvalidArgument(\n        \"executable is built for device %s of type \\\"%s\\\"; cannot run it on \"\n        \"device %s of type \\\"%s\\\"\",\n        backend_->device_name(build_device_ordinal()).c_str(),\n        build_executor->GetDeviceDescription().name().c_str(),\n        backend_->device_name(run_device_ordinal).c_str(),\n        run_executor->GetDeviceDescription().name().c_str());\n  }\n\n  if (!run_options.allocator()) {\n    return InvalidArgument(\"an allocator must be provided to ExecuteLocally\");\n  }"
},
{
    "Id": 202,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/083fd8c4b23104f6b27a871c6469629ace4ee9c3",
    "Violation": "insufficient",
    "Bug report": " Don't check soname on Windows. This allow users to specify a certain CUDA version on Windows again.",
    "Number of deleted lines": 1,
    "Deleted lines": "    else:\n        auto_configure_fail(\"Invalid cpu_value: %s\" % cpu_value)\n\ndef find_lib(repository_ctx, paths, check_soname = True):\n    \"\"\"\n      Finds a library among a list of potential paths.\n\n      Args:\n        paths: List of paths to inspect.\n\n      Returns:\n        Returns the first path in paths that exist.\n    \"\"\"\n    objdump = repository_ctx.which(\"objdump\")\n    mismatches = []\n    for path in [repository_ctx.path(path) for path in paths]:\n        if not path.exists:\n            continue\n        if check_soname and objdump != None:\n            output = repository_ctx.execute([objdump, \"-p\", str(path)]).stdout\n            output = [line for line in output.splitlines() if \"SONAME\" in line]\n            sonames = [line.strip().split(\" \")[-1] for line in output]\n            if not any([soname == path.basename for soname in sonames]):\n                mismatches.append(str(path))\n                continue\n        return path\n    if mismatches:\n        auto_configure_fail(\n            \"None of the libraries match their SONAME: \" + \", \".join(mismatches),\n        )\n    auto_configure_fail(\"No library found under: \" + \", \".join(paths))\n\ndef _find_cuda_lib(\n        lib,\n        repository_ctx,\n        cpu_value,\n        basedir,\n        version,\n        static = False):"
},
{
    "Id": 203,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/867a918bd3d40afeca6b96430671a098134e7905",
    "Violation": "missing",
    "Bug report": " CUDA Driver: do better error reporting if checking the pointer properties failed. There are many reasons why an operation can fail, propagate the error instead of assuming the cause.",
    "Number of deleted lines": 0,
    "Deleted lines": "      return \"device\";\n    default:\n      LOG(FATAL) << \"impossible memory space\";\n  }\n}\n\nnamespace {\n\n// Checks that the pointer is to a location on the device it purports to be.\n// PtrT is one of CUdeviceptr or void*.  If it's a CUdeviceptr, then\n// cudaPointerGetAttributes should not fail, and return a memoryType of\n// cudaMemoryTypeDevice.\ntemplate <typename PtrT>\nvoid CheckPointerIsValid(const PtrT ptr, absl::string_view name) {\n  bool is_host_ptr = !std::is_same<PtrT, CUdeviceptr>::value;\n  cudaPointerAttributes attributes;\n  cudaError_t err =\n      cudaPointerGetAttributes(&attributes, reinterpret_cast<const void*>(ptr));\n  // If we failed, reset cuda error status to avoid poisoning cuda streams.\n  if (err != cudaSuccess) cudaGetLastError();\n  bool points_to_host_memory = (err == cudaErrorInvalidValue ||\n                                attributes.memoryType != cudaMemoryTypeDevice);\n  CHECK_EQ(is_host_ptr, points_to_host_memory) << absl::StreamFormat(\n      \"%s pointer is not actually on %s: %p\", name, is_host_ptr ? \"CPU\" : \"GPU\",\n      reinterpret_cast<const void*>(ptr));\n}\n\n// Call cuCtxtSynchronize and crash if it doesn't succeed.\nvoid SynchronizeOrDie() {\n  auto res = cuCtxSynchronize();\n  if (res != CUDA_SUCCESS) {\n    LOG(FATAL) << \"Synchronize found \" << ToString(res)\n               << \" :: \" << port::CurrentStackTrace();\n  }\n}\n\nstruct ThreadLocalData {\n  int64 id;"
},
{
    "Id": 204,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1a73fdfa83bd50695a7d374d14a5cb3835d94d9e",
    "Violation": "missing",
    "Bug report": " Add extra check incase segmenter does not exclude CPU in order to prevent segfault",
    "Number of deleted lines": 4,
    "Deleted lines": "    EngineInfo* info) {\n  std::vector<int> subgraph_node_ids;  // Topologically sorted node ids.\n  std::set<string> subgraph_node_names = segment_nodes;\n  std::set<int> added_const_node_ids;  // Used to prevent double insertion.\n  std::set<string> segment_devices;\n\n  // Map from src_node_name+port to the unique port numbers of the TRT op, where\n  // the src_node_name is the name of the source node of the input/output\n  // edge, thus there must not be any duplicates since source nodes of\n  // input/output edges must be in different split of the graph.\n  // TODO(aaroey): consider using node id and port instead.\n  // TODO(aaroey): using topo order instead of reverting reverse topo order.\n  std::unordered_map<string, int> input_to_engine_port, output_to_engine_port;\n  for (auto it = reverse_topo_order.rbegin(); it != reverse_topo_order.rend();\n       ++it) {\n    const auto& node_name = (*it)->name();\n    if (segment_nodes.count(node_name) == 0) continue;\n    auto node = *it;\n    // TODO: check for CPU device here\n    // If device is CPU, we should've caught that in the segmenter. Fall back here.\n\n    auto node_device = node->requested_device();\n    if (!node_device.empty()) {\n      segment_devices.insert(node_device);\n    } else {\n      if (node->has_assigned_device_name()) {\n        segment_devices.insert(node->assigned_device_name());\n      } else {\n        VLOG(2) << \"Node \" << node->name()\n                << \" neither have requested device nor assigned device\";\n      }\n    }\n    const int node_id = node->id();\n    subgraph_node_ids.push_back(node_id);\n    // Create input connections. Sort edges first to make determnistic since\n    // in_edges is a set of pointers.\n    std::vector<const tensorflow::Edge*> in_edges(node->in_edges().begin(),\n                                                  node->in_edges().end());\n    std::sort(in_edges.begin(), in_edges.end(), EdgePtrCompare());\n    for (const auto edge : in_edges) {\n      auto input_node = edge->src();\n      if (input_node->IsSource() || segment_nodes.count(input_node->name())) {\n        continue;\n      }"
},
{
    "Id": 205,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b234ff0ee4ce87d21a3e5306b678e1fb4b1fedfc",
    "Violation": "missing",
    "Bug report": " Fixed division by zero, by checking the number of GPUs in GenericLayoutOptimizer.",
    "Number of deleted lines": 0,
    "Deleted lines": "        GetDeviceName(context.virtual_placer.get(), *node_def);\n    string device_type;\n    string task;\n    if (!DeviceNameUtils::SplitDeviceName(device_name, &task, &device_type) ||\n        !absl::StrContains(absl::AsciiStrToLower(device_type),\n                           absl::AsciiStrToLower(device))) {\n      continue;\n    }\n    num_conv2d_gpu++;\n    const auto* t_attr = node.GetAttr(\"T\");\n    if (t_attr == nullptr) {\n      continue;\n    }\n    if (t_attr->type() == data_type) {\n      num_conv2d_gpu_fp16++;\n    }\n  }\n\n  return (static_cast<float>(num_conv2d_gpu_fp16) /\n          static_cast<float>(num_conv2d_gpu)) >= kConv2DGPUFP16Threshold;\n}\n\ninline std::pair<string, string> GetSrcAndDstDataFormats(\n    const TransposeContext& context, int num_gpus, int num_voltas) {\n  string src_format = kNHWC;\n  string dst_format = kNCHW;\n  if (((static_cast<float>(num_voltas) / static_cast<float>(num_gpus)) >=\n       kVoltaGPURatioThreshold) &&\n      NumConv2DOnDeviceWithDataTypeOverThreshold(context, kGPU, DT_HALF)) {\n    std::swap(src_format, dst_format);\n  }\n  return {src_format, dst_format};\n}\n\nStatus ExpandLayoutSensitiveOp(TransposeContext* context,\n                               TransposerFactory* transposer_factory) {\n  const int num_nodes = context->num_nodes;\n  for (int i = 0; i < num_nodes; ++i) {"
},
{
    "Id": 206,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9f8ad5ff118166537d42f87f1ee254f83ba553f0",
    "Violation": "improper",
    "Bug report": "Fix CUDA version check (format is 1000 * major + 10 * minor). ",
    "Number of deleted lines": 1,
    "Deleted lines": "namespace stream_executor {\n\n#define RETURN_IF_CUDA_ERROR(expr)                                            \\\n  do {                                                                        \\\n    CUresult _status = expr;                                                  \\\n    if (!SE_PREDICT_TRUE(_status == CUDA_SUCCESS)) {                          \\\n      const char* error_string;                                               \\\n      cuGetErrorString(_status, &error_string);                               \\\n      std::ostringstream oss;                                                 \\\n      oss << error_string << \"\\nin \" << __FILE__ << \"(\" << __LINE__ << \"): '\" \\\n          << #expr << \"'\";                                                    \\\n      return port::Status(port::error::UNKNOWN, oss.str().c_str());           \\\n    }                                                                         \\\n  } while (false)\n\nport::StatusOr<std::vector<uint8>> LinkGpuAsm(\n    gpu::GpuContext* context, std::vector<CubinOrPTXImage> images) {\n  const bool linking_supported = [] {\n    if (CUDA_VERSION < 11300) {\n      return true;\n    }\n    auto version_or_status = gpu::Diagnostician::FindKernelDriverVersion();\n    if (!version_or_status.ok()) {\n      LOG(WARNING) << \"Couldn't read CUDA driver version.\";\n      return false;\n    }\n    return std::get<0>(*version_or_status) >= 465;\n  }();\n\n  if (!linking_supported) {\n    return tensorflow::errors::Unimplemented(\"Linking is unsupported\");\n  }\n\n  gpu::ScopedActivateContext activation(context);\n\n  CUlinkState link_state;\n  RETURN_IF_CUDA_ERROR(cuLinkCreate(0, nullptr, nullptr, &link_state));\n  for (auto& image : images) {\n    auto status = cuLinkAddData(link_state, CU_JIT_INPUT_CUBIN,"
},
{
    "Id": 207,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/89334fb15c688e7dbd81878745755db01579ea70",
    "Violation": "missing",
    "Bug report": " [NVIDIA] Update VersionCheck APIs for CuDNN. This PR updates the cudnnXXXVersionCheck to the latest for the next CUDNN release.",
    "Number of deleted lines": 2,
    "Deleted lines": "      return algo;\n    default:\n      LOG(FATAL) << \"Unsupported Cudnn RNN algorithm: \" << algorithm->algo_id();\n  }\n}\n\ntsl::StatusOr<dnn::VersionInfo> GetLoadedCudnnVersion() {\n  TF_ASSIGN_OR_RETURN(int major, GetCudnnProperty(MAJOR_VERSION));\n  TF_ASSIGN_OR_RETURN(int minor, GetCudnnProperty(MINOR_VERSION));\n  TF_ASSIGN_OR_RETURN(int patch_level, GetCudnnProperty(PATCH_LEVEL));\n  return dnn::VersionInfo(major, minor, patch_level);\n}\n\nenum class PreloadCudnnType { ConvFwd, ConvBwdFilter, ConvBwdData, Rnn };\n\n// Preload sub libs for cudnn 8.0.4+ to make sure that the loading time isn't\n// measured in the autotuning.\nvoid PreloadCudnnSubLibs(PreloadCudnnType type) {\n#if CUDNN_VERSION >= 8004\n  switch (type) {\n    case PreloadCudnnType::ConvBwdFilter:\n    case PreloadCudnnType::ConvBwdData: {\n      cudnnOpsTrainVersionCheck();\n      cudnnCnnTrainVersionCheck();\n      [[clang::fallthrough]];\n    }\n    case PreloadCudnnType::ConvFwd: {\n      cudnnOpsInferVersionCheck();\n      cudnnCnnInferVersionCheck();\n      break;\n    }\n    case PreloadCudnnType::Rnn: {\n      cudnnOpsInferVersionCheck();\n      cudnnAdvInferVersionCheck();\n      cudnnOpsTrainVersionCheck();\n      cudnnAdvTrainVersionCheck();\n      break;\n    }\n  }\n#endif  // CUDNN_VERSION >= 8004\n}\n\nvoid PreloadCudnnSubLibsHelper(dnn::ConvolutionKind kind) {\n  switch (kind) {\n    case dnn::ConvolutionKind::FORWARD:\n    case dnn::ConvolutionKind::FORWARD_GRAPH: {\n      PreloadCudnnSubLibs(PreloadCudnnType::ConvFwd);\n      break;\n    }\n    case dnn::ConvolutionKind::BACKWARD_DATA: {\n      PreloadCudnnSubLibs(PreloadCudnnType::ConvBwdData);\n      break;\n    }\n    case dnn::ConvolutionKind::BACKWARD_FILTER: {\n      PreloadCudnnSubLibs(PreloadCudnnType::ConvBwdFilter);\n      break;\n    }\n    default: {\n      LOG(WARNING) << \"Unsupported dnn::ConvolutionKind: \"\n                   << static_cast<int>(kind) << \" for cuDNN preload.\";"
},
{
    "Id": 208,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e5cfbd0eceb4dca98b388b13acff499a5420f863",
    "Violation": "improper",
    "Bug report": "Fix more for cuda version check. ",
    "Number of deleted lines": 1,
    "Deleted lines": "        \"(\", str_util::Join(in_, \", \"), \"), \",\n        out_depths_, \", \",\n        \"(\", str_util::Join(filter_, \", \"), \"), \",\n        \"(\", str_util::Join(dilation_, \", \"), \"), \",\n        \"(\", str_util::Join(stride_, \", \"), \"), \",\n        \"(\", str_util::Join(padding_, \", \"), \"), \",\n        dtype_, \", \",\n        device_id_);\n    // clang-format on\n  }\n\n  // The purpose of this function is to disable winograd nonfused conv algorithm\n  // for certain input parameters so as to avoid a bug in cuDNNv5 and cuDNNv6.\n  template <typename T>\n  bool ShouldIncludeWinogradNonfusedAlgo(\n      perftools::gputools::StreamExecutor* stream_exec) const {\n    // Skip this check for cuDNN 7 and newer.\n    auto version = stream_exec->AsDnn()->GetVersion();\n    if (version.ok() && std::get<0>(version.ValueOrDie()) >= 7) {\n      return true;\n    }\n    return ShouldIncludeWinogradNonfusedAlgoPreCudnn7<T>();\n  }\n\n protected:\n  using ParameterDataType =\n      std::tuple<int64, int64, SpatialArray, int64, SpatialArray, SpatialArray,\n                 SpatialArray, SpatialArray, DataType, int>;\n\n  ParameterDataType get_data_as_tuple() const {\n    return std::make_tuple(batch_, in_depths_, in_, out_depths_, filter_,\n                           dilation_, stride_, padding_, dtype_, device_id_);\n  }\n\n  uint64 hash_code_;\n\n private:\n  friend struct ConvParametersPeer;  // For testing purposes.\n"
},
{
    "Id": 209,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e009644f034fa0ca4df910a812432cab3458d440",
    "Violation": "missing",
    "Bug report": "Add one error check in cuda_dnn for int8 to float convolution. ",
    "Number of deleted lines": 0,
    "Deleted lines": "      };\n      SE_RETURN_IF_ERROR(check_sizes(input_descriptor.feature_map_count(),\n                                     output_descriptor.feature_map_count()));\n      SE_RETURN_IF_ERROR(check_sizes(input_descriptor.count(),\n                                     input_descriptor.feature_map_count()));\n      SE_RETURN_IF_ERROR(check_sizes(input_descriptor.count(),\n                                     output_descriptor.feature_map_count()));\n      return port::Status::OK();\n    }\n    if (algorithm_desc.algo_id() ==\n            CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED &&\n        !ShouldIncludeWinogradNonfusedAlgo(input_descriptor,\n                                           output_descriptor)) {\n      return port::Status(\n          port::error::FAILED_PRECONDITION,\n          \"This configuration has potential integer overflow in \"\n          \"cuDNNv5 and cuDNNv6. See b/68264959.\");\n    }\n    return port::Status::OK();\n  };\n\n  auto get_bwd_data_bugs = [&]() -> port::Status {\n    if (algorithm_desc.algo_id() ==\n            CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED &&\n        !ShouldIncludeWinogradNonfusedAlgo(input_descriptor,\n                                           output_descriptor)) {\n      return port::Status(\n          port::error::FAILED_PRECONDITION,\n          \"This configuration has potential integer overflow in \"\n          \"cuDNNv5 and cuDNNv6. See b/68264959.\");\n    }\n\n    // Cudnn 7.1.4 has a bug if the workspace of the following convolution is\n    // not zero-initialized, nvbugs/2254619.\n    if (CUDNN_VERSION >= 7000 && CUDNN_VERSION < 7300 &&\n        algorithm_desc.algo_id() == CUDNN_CONVOLUTION_BWD_DATA_ALGO_1 &&\n        cudnn_type == CUDNN_DATA_HALF && algorithm_desc.tensor_ops_enabled() &&\n        input_descriptor.layout() == dnn::DataLayout::kBatchYXDepth &&"
},
{
    "Id": 210,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/70ade1b64f65d0a2275672d27129627ff116a997",
    "Violation": "missing",
    "Bug report": " Fix defect: shuffle_batch gives ZeroDivisionError when computing capacity stat. * Fix defect: shuffle_batch gives ZeroDivisionError when computing capacity stat. * Cover < case in error checking",
    "Number of deleted lines": 0,
    "Deleted lines": "\n    if allow_smaller_final_batch:\n      dequeued = queue.dequeue_up_to(batch_size, name=name)\n    else:\n      dequeued = queue.dequeue_many(batch_size, name=name)\n    dequeued = _restore_sparse_tensors(dequeued, sparse_info)\n    # tensors_list was validated to not be empty.\n    return _as_original_type(tensors_list[0], dequeued)\n\n\ndef _shuffle_batch(tensors, batch_size, capacity, min_after_dequeue,\n                   keep_input, num_threads=1, seed=None, enqueue_many=False,\n                   shapes=None, allow_smaller_final_batch=False,\n                   shared_name=None, name=None):\n  \"\"\"Helper function for `shuffle_batch` and `maybe_shuffle_batch`.\"\"\"\n  tensor_list = _as_tensor_list(tensors)\n  with ops.name_scope(name, \"shuffle_batch\",\n                      list(tensor_list) + [keep_input]) as name:\n    tensor_list = _validate(tensor_list)\n    keep_input = _validate_keep_input(keep_input, enqueue_many)\n    tensor_list, sparse_info = _store_sparse_tensors(\n        tensor_list, enqueue_many, keep_input)\n    types = _dtypes([tensor_list])\n    shapes = _shapes([tensor_list], shapes, enqueue_many)\n    queue = data_flow_ops.RandomShuffleQueue(\n        capacity=capacity, min_after_dequeue=min_after_dequeue, seed=seed,\n        dtypes=types, shapes=shapes, shared_name=shared_name)\n    _enqueue(queue, tensor_list, num_threads, enqueue_many, keep_input)\n    full = (math_ops.cast(math_ops.maximum(0, queue.size() - min_after_dequeue),\n                          dtypes.float32) *\n            (1. / (capacity - min_after_dequeue)))\n    # Note that name contains a '/' at the end so we intentionally do not place\n    # a '/' after %s below.\n    summary_name = (\n        \"fraction_over_%d_of_%d_full\" %\n        (min_after_dequeue, capacity - min_after_dequeue))\n    summary.scalar(summary_name, full)\n"
},
{
    "Id": 211,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a21ec782601aca6c7e0461093d72596f26229e44",
    "Violation": "improper",
    "Bug report": " Use getattr instead of isinstance in tensor_conversion_registry. Using `isinstance` to check if an object is an instance of a Python `typing.Protocol` instead of using `getattr`/`hasattr` has negative performance implications. This change reverts `tensor_conversion_registry.convert()` to use `getattr` for this reason.",
    "Number of deleted lines": 2,
    "Deleted lines": "\n  Returns:\n    A `Tensor` converted from `value`.\n\n  Raises:\n    ValueError: If `value` is a `Tensor` and conversion is requested\n      to a `Tensor` with an incompatible `dtype`.\n    TypeError: If no conversion function is registered for an element in\n      `values`.\n    RuntimeError: If a registered conversion function returns an invalid\n      value.\n  \"\"\"\n\n  if dtype is not None:\n    dtype = dtypes.as_dtype(dtype)\n  if preferred_dtype is not None:\n    preferred_dtype = dtypes.as_dtype(preferred_dtype)\n\n  if isinstance(value, core.TensorProtocol):\n    return value.__tf_tensor__(dtype, name)\n\n  for base_type, conversion_func in get(type(value)):\n    # If dtype is None but preferred_dtype is not None, we try to\n    # cast to preferred_dtype first.\n    ret = None\n    if dtype is None and preferred_dtype is not None:\n      try:\n        ret = conversion_func(\n            value, dtype=preferred_dtype, name=name, as_ref=as_ref)\n      except (TypeError, ValueError):\n        # Could not coerce the conversion to use the preferred dtype.\n        pass\n      else:\n        if (ret is not NotImplemented and\n            ret.dtype.base_dtype != preferred_dtype.base_dtype):\n          raise RuntimeError(\n              _add_error_prefix(\n                  f\"Conversion function {conversion_func!r} for type \"\n                  f\"{base_type} returned incompatible dtype: requested = \"\n                  f\"{preferred_dtype.base_dtype.name}, \""
},
{
    "Id": 212,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e1ad3b74ad44b883c7b3fdc3a19adcea1d28bfbc",
    "Violation": "improper",
    "Bug report": " [XLA:GPU] Handle edge case in Triton Softmax rewriter where bitcast is an effective scalar. This short-circuit avoids crashing within last_dimension when attempting to match and either the operand or the result of the bitcast has a shape with rank 0.",
    "Number of deleted lines": 1,
    "Deleted lines": "    case HloOpcode::kParameter:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Returns true if a trivially connected producer of 'consumer' with opcode\n// 'opcode' exists. If such an instruction is found, the value of 'producer' is\n// set to it. The definition of \"trivial\" operations is as given in\n// 'IsTriviallyFusible'.\nbool TrivialEdge(HloInstruction** producer, HloInstruction* consumer,\n                 HloOpcode opcode, const GpuVersion& gpu_version);\n\nbool BitcastIsTilingNoop(HloInstruction* bitcast,\n                         const GpuVersion& gpu_version) {\n  CHECK_EQ(bitcast->opcode(), HloOpcode::kBitcast);\n\n  if (bitcast->shape().rank() == 0) {\n    return true;\n  }\n\n  // In the Softmax rewriter for now, tiling is derived from a hero reduction\n  // operation, which should be reducing its input on the last axis. Therefore,\n  // a bitcast is always a no-op with regards to a tile if\n  //   (1) it does not change the size of the reduction dimension of its input\n  //       (the last one); if its input is already reduced, then (1) is true\n  //       by default\n  //   (2) the layout of its output is ordered in the same way as the layout of\n  //       its input. This is a fuzzy definition, but since we assume fusible\n  //       ops to always have a default layout, we can just check if both the\n  //       bitcast and its input have a default layout\n  auto last_dimension = [](const HloInstruction* instr) {\n    return instr->shape().dimensions().back();\n  };\n\n  HloInstruction* reduce = nullptr;\n  TrivialEdge(&reduce, bitcast->mutable_operand(0), HloOpcode::kReduce,\n              gpu_version);"
},
{
    "Id": 213,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/2f3b69e4976d3b14eaa6ae070eb68f37d1556d98",
    "Violation": "improper",
    "Bug report": "Changed empty check ",
    "Number of deleted lines": 3,
    "Deleted lines": "    built and so has not created any `tf.Variable` objects.\n\n    Returns:\n      `self` for chaining.\n\n    Raises:\n      AssertionError: If a Python object exists in the transitive dependencies\n        of the root object but does not have a value in the checkpoint.\n    \"\"\"\n    for node_id, node in enumerate(self._checkpoint.object_graph_proto.nodes):\n      checkpointable = self._checkpoint.object_by_proto_id.get(node_id, None)\n      if (checkpointable is not None\n          and checkpointable._update_uid < self._checkpoint.restore_uid):  # pylint: disable=protected-access\n        raise AssertionError(\n            \"Object not assigned a value from checkpoint: %s\" % (node,))\n    for checkpointable_object in list_objects(self._root_checkpointable):\n      # Remove data structures that do not contain any variables from\n      # restoration checks.\n      if (isinstance(checkpointable_object,\n                     data_structures.CheckpointableDataStructure) and\n              len(checkpointable_object.variables) == 0):\n        continue\n      self._checkpoint.all_python_objects.add(checkpointable_object)\n    unused_python_objects = (\n        _ObjectIdentitySet(self._checkpoint.all_python_objects)\n        - _ObjectIdentitySet(self._checkpoint.object_by_proto_id.values()))\n    if unused_python_objects:\n      raise AssertionError(\n          (\"Some Python objects were not bound to checkpointed values, likely \"\n           \"due to changes in the Python program: %s\")\n          % (list(unused_python_objects),))\n    return self\n\n  def assert_nontrivial_match(self):\n    \"\"\"Raises an exception if only the root object matched.\"\"\"\n    for checkpointable_object in list_objects(self._root_checkpointable):\n      self._checkpoint.all_python_objects.add(checkpointable_object)\n    if len(self._checkpoint.object_by_proto_id) <= 1:\n      unused_python_objects = (\n          _ObjectIdentitySet(self._checkpoint.all_python_objects)\n          - _ObjectIdentitySet(self._checkpoint.object_by_proto_id.values()))"
},
{
    "Id": 214,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/5ed3c7881f1f039b1bb502eb68c65250de3bbac8",
    "Violation": "missing",
    "Bug report": "Fix ThreadPoolHandle 0 nthreads argument. It was reported that a value of 0 leads to a check failure.  Using 0 to indicate `port::MaxParallelism`, for consistency with `Dataset`.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n private:\n  thread::ThreadPool thread_pool_;\n  const int max_intra_op_parallelism_;\n};\n\n// Creates a handle to a ThreadPool resource. Note that we don't use\n// ResourceOpKernel here because the ThreadPoolResource constructor requires\n// access to `OpKernelContext::env()`, which isn't provided by\n// `ResourceOpKernel<T>::CreateResource()`.\nclass ThreadPoolHandleOp : public OpKernel {\n public:\n  explicit ThreadPoolHandleOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"display_name\", &display_name_));\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_threads\", &num_threads_));\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"max_intra_op_parallelism\",\n                                     &max_intra_op_parallelism_));\n    OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads_));\n  }\n\n  // The resource is deleted from the resource manager only when it is private\n  // to kernel. Ideally the resource should be deleted when it is no longer held\n  // by anyone, but it would break backward compatibility.\n  ~ThreadPoolHandleOp() override {\n    if (cinfo_.resource_is_private_to_kernel()) {\n      if (!cinfo_.resource_manager()\n               ->Delete<ThreadPoolResource>(cinfo_.container(), cinfo_.name())\n               .ok()) {\n        // Do nothing; the resource can have been deleted by session resets.\n      }\n    }\n  }\n\n  void Compute(OpKernelContext* ctx) override TF_LOCKS_EXCLUDED(mu_) {\n    mutex_lock l(mu_);\n    if (!initialized_) {\n      ResourceMgr* mgr = ctx->resource_manager();\n      OP_REQUIRES_OK(ctx, cinfo_.Init(mgr, def()));"
},
{
    "Id": 215,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/6381a7b127bd276a3817a93e5423b15a06c33419",
    "Violation": "missing",
    "Bug report": " [tf.data] Add a check for ram_budget == 0 to avoid division by 0 exception when ram_budget is not set.",
    "Number of deleted lines": 0,
    "Deleted lines": "\nconstexpr int64_t Model::kOptimizationPeriodMinMs;\nconstexpr int64_t Model::kOptimizationPeriodMaxMs;\n\nnamespace {\n\n// Returns true if all parameters have reached their max values.\nbool AreAllParametersMax(const Model::ModelParameters& parameters) {\n  for (const auto& pair : parameters) {\n    if (pair.second->value < pair.second->max) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Records the ram usage of hill climbing algorithm.\nvoid RecordAutotuneRamUsage(int64 ram_budget, double max_buffered_bytes) {\n  const auto memory_info = port::GetMemoryInfo();\n  // Records ratio of memory used since RootDataset was created over the ram\n  // budget.\n  const auto original_free_memory = ram_budget / kRamBudgetShare;\n  const auto current_free_memory = memory_info.free;\n  metrics::RecordTFDataAutotuneUsedRamBudgetRatio(\n      (original_free_memory - current_free_memory) / ram_budget);\n  // Records ratio of maximum buffer bytes tf.data could use over the ram\n  // budget.\n  metrics::RecordTFDataAutotuneMaxBufferBudgetRatio(\n      max_buffered_bytes / static_cast<double>(ram_budget));\n}\n\n// Helper function for node traversal that doesn't skip any nodes.\ninline bool IsAnyNode(const std::shared_ptr<Node> node) { return true; }\n\n// Helper function for node traversal that filters out nodes for which\n// autotuning is disabled.\ninline bool IsAutotuneNode(const std::shared_ptr<Node> node) {\n  return node->autotune();"
},
{
    "Id": 216,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a0fe44410e875e8e7775c6c256496bafb1a41b25",
    "Violation": "improper",
    "Bug report": " Remove the check of NodeItem exists in unfinished_nodes_ in node callback. This fixes the failure of RemoteAsyncTest.test_out_of_range_with_while_loop in DEBUG mode.",
    "Number of deleted lines": 1,
    "Deleted lines": "    return;\n  }\n\n  std::forward_list<core::RefCountPtr<NodeItem>> items_to_destroy;\n  {\n    mutex_lock l(node_queue_mutex_);\n    if (!status_.ok()) return;\n\n    bool need_notification = from_queue;\n    if (from_queue) {\n      // Since this was from the async queue, pop it from the front of the queue\n      DCHECK(!node_queue_.empty() && item.get() == node_queue_.front().get());\n      node_queue_.pop();\n    } else if (async) {\n      // If it is an Async node then we will find the node in the unfinished\n      // nodes list. However we only notify if we are at the front of the list\n      // since we don't want to notify any waiters of earlier nodes.\n      need_notification = item->id == unfinished_nodes_.begin()->first;\n      auto result = unfinished_nodes_.erase(item->id);\n      DCHECK_GT(result, 0);\n    }\n\n    if (!status.ok() && item->node->Fatal()) {\n      // Since we received an error, broadcast to any waiters.\n      need_notification = true;\n      status_ = status;\n      ok_ = false;\n      if (Async()) {\n        // We remove any pending ops so that we don't try to execute them if\n        // ClearError is called.\n        errors::AppendToMessage(&status_,\n                                \"Encountered when executing an operation using \"\n                                \"EagerExecutor. This error cancels all future \"\n                                \"operations and poisons their output tensors.\");\n      }\n      while (!node_queue_.empty()) {\n        items_to_destroy.push_front(std::move(node_queue_.front()));\n        node_queue_.pop();\n      }\n      for (auto& it : unfinished_nodes_) {"
},
{
    "Id": 217,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/bd1f1ac1fec05d38f1b8fc98f650c1c55ac06790",
    "Violation": "improper",
    "Bug report": "Fix operator check ",
    "Number of deleted lines": 1,
    "Deleted lines": "  # The property is not known when operators are not known to have the property\n  # or both operators don't have the property (the property for the complement\n  # class is not closed under composition).\n  return None\n\n\ndef is_square(operator_a, operator_b):\n  \"\"\"Return a hint to whether the composition is square.\"\"\"\n  if operator_a.is_square and operator_b.is_square:\n    return True\n  if operator_a.is_square is False and operator_b.is_square is False:  # pylint:disable=g-bool-id-comparison\n    # Let A have shape [B, M, N], B have shape [B, N, L].\n    m = operator_a.range_dimension\n    l = operator_b.domain_dimension\n    if m is not None and l is not None:\n      return m == l\n\n  if (operator_a.is_square != operator_b.is_square) and (\n      operator_a.is_square is not None and operator_a.is_square is not None):\n    return False\n\n  return None\n\n\n# Note: Positive definiteness is only guaranteed to be preserved\n# when the operators commute and are symmetric. Only use this method in\n# commuting cases.\ndef combined_commuting_positive_definite_hint(operator_a, operator_b):\n  \"\"\"Get combined PD hint for compositions.\"\"\"\n  # pylint:disable=g-bool-id-comparison\n  if (operator_a.is_positive_definite is True and\n      operator_a.is_self_adjoint is True and\n      operator_b.is_positive_definite is True and\n      operator_b.is_self_adjoint is True):\n    return True\n  # pylint:enable=g-bool-id-comparison\n\n  return None\n"
},
{
    "Id": 218,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/5e0c9fff657498f9a74da38b2ce1b4721698a388",
    "Violation": "missing",
    "Bug report": " Add bounds checks to jpeg parsing code. ",
    "Number of deleted lines": 2,
    "Deleted lines": "    WARNMS(cinfo, JWRN_JPEG_EOF);\n    src->pub.next_input_byte = kEOIBuffer;\n    src->pub.bytes_in_buffer = 2;\n    return TRUE;\n  } else {\n    // We already inserted a fake EOI and it wasn't enough, so this time\n    // it's really an error.\n    ERREXIT(cinfo, JERR_FILE_READ);\n    return FALSE;\n  }\n}\n\n// -----------------------------------------------------------------------------\nvoid MemTermSource(j_decompress_ptr cinfo) {}\n\n// -----------------------------------------------------------------------------\nvoid MemSkipInputData(j_decompress_ptr cinfo, long jump) {\n  MemSourceMgr *src = reinterpret_cast<MemSourceMgr *>(cinfo->src);\n  src->pub.bytes_in_buffer -= jump;\n  src->pub.next_input_byte += jump;\n}\n\n// -----------------------------------------------------------------------------\nvoid SetSrc(j_decompress_ptr cinfo, const void *data,\n            unsigned long int datasize, bool try_recover_truncated_jpeg) {\n  MemSourceMgr *src;\n\n  cinfo->src = reinterpret_cast<struct jpeg_source_mgr *>(\n      (*cinfo->mem->alloc_small)(reinterpret_cast<j_common_ptr>(cinfo),\n                                 JPOOL_PERMANENT, sizeof(MemSourceMgr)));\n\n  src = reinterpret_cast<MemSourceMgr *>(cinfo->src);\n  src->pub.init_source = MemInitSource;\n  src->pub.fill_input_buffer = MemFillInputBuffer;\n  src->pub.skip_input_data = MemSkipInputData;\n  src->pub.resync_to_restart = jpeg_resync_to_restart;\n  src->pub.term_source = MemTermSource;\n  src->data = reinterpret_cast<const unsigned char *>(data);\n  src->datasize = datasize;\n  src->pub.bytes_in_buffer = 0;"
},
{
    "Id": 219,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/28dacabab5aac2963e37e622f4b157cf00d82662",
    "Violation": "insufficient",
    "Bug report": " [tf] Explicitly check that runner index is in bounds and runner is available",
    "Number of deleted lines": 2,
    "Deleted lines": "class OpKernelRunnerTable {\n public:\n  OpKernelRunnerTable() = default;\n\n  // Return true if it successfully inserts `runner`. `index` is supposed to be\n  // dense.\n  bool Insert(int64_t index, OpKernelRunner runner) {\n    if (runners_.size() <= index) runners_.resize(index + 1);\n    if (runners_[index].has_value()) return false;\n    runners_[index] = std::move(runner);\n    return true;\n  }\n\n  // Return the OpKernelRunner at the corresponding `index` in the table. The\n  // result can never be nullptr. It is a fatal error to use an index that is\n  // not in the table. Note that the returned pointer will be invalidated if\n  // Insert() is called.\n  const OpKernelRunner* Get(int64_t index) const {\n    DCHECK_GT(runners_.size(), index);\n    auto& result = runners_.at(index);\n    DCHECK(result.has_value());\n    return &(*result);\n  }\n\n private:\n  std::vector<absl::optional<OpKernelRunner>> runners_;\n};\n\n// OpKernelRunnerCache is similar to OpKernelRunnerTable but thread-safe.\nclass OpKernelRunnerCache {\n public:\n  OpKernelRunnerCache();\n\n  tfrt::StatusOr<OpKernelRunner*> GetOrCreate(\n      tfrt::Location loc, absl::string_view op_name,\n      absl::string_view device_name, int num_args,\n      const std::function<llvm::Error(tensorflow::AttrValueMap*)>& attr_builder,\n      const KernelFallbackCompatRequestState& fallback_request_state);\n\n private:\n  mutable mutex mu_;"
},
{
    "Id": 220,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f",
    "Violation": "missing",
    "Bug report": " Prevent heap OOB read in TFLite's gather_nd.cc. Passing negative indices is illegal but there was a missing check so that resulted in OOB accesses.",
    "Number of deleted lines": 0,
    "Deleted lines": "      GetTensorShape(params), GetTensorData<ParamsT>(params),\n      GetTensorShape(indices), GetTensorData<IndicesT>(indices),\n      GetTensorShape(output), GetTensorData<ParamsT>(output));\n  return kTfLiteOk;\n}\n\ntemplate <typename IndicesT>\nTfLiteStatus GatherNdString(const TfLiteTensor* params,\n                            const TfLiteTensor* indices, TfLiteTensor* output) {\n  reference_ops::GatherNdString(\n      GetTensorShape(params), params, GetTensorShape(indices),\n      GetTensorData<IndicesT>(indices), GetTensorShape(output), output);\n  return kTfLiteOk;\n}\n\ntemplate <typename IndicesT>\nTfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,\n                          const TfLiteTensor* indices, TfLiteTensor* output) {\n  switch (params->type) {\n    case kTfLiteFloat32:\n      return GatherNd<float, IndicesT>(params, indices, output);\n    case kTfLiteUInt8:\n      return GatherNd<uint8_t, IndicesT>(params, indices, output);\n    case kTfLiteInt8:\n      return GatherNd<int8_t, IndicesT>(params, indices, output);\n    case kTfLiteInt16:\n      return GatherNd<int16_t, IndicesT>(params, indices, output);\n    case kTfLiteInt32:\n      return GatherNd<int32_t, IndicesT>(params, indices, output);\n    case kTfLiteInt64:\n      return GatherNd<int64_t, IndicesT>(params, indices, output);\n    case kTfLiteString:\n      return GatherNdString<IndicesT>(params, indices, output);\n    default:\n      context->ReportError(context,\n                           \"Params type '%s' are not supported by gather_nd.\",\n                           TfLiteTypeGetName(params->type));\n      return kTfLiteError;"
},
{
    "Id": 221,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/22783fdf812b700f7de9980038ab41ee0a4a2284",
    "Violation": "missing",
    "Bug report": "Add checks recently removed ",
    "Number of deleted lines": 0,
    "Deleted lines": "      : graph_(graph),\n        context_(context),\n        node_(node),\n        tensor_to_value_(tensor_to_value),\n        quant_conversion_map_(quant_conversion_map) {}\n\n  absl::Status ReadValue(uint32_t idx, Value** value);\n\n  absl::Status ReadValueByTensorIdx(uint32_t tensor_idx, Value** value);\n\n  int GetNumberOfRuntimeInputs() const;\n\n  absl::Status GetTensorId(uint32_t input_id, int* tensor_id) const;\n\n  absl::Status GetTensorDims(uint32_t idx, TfLiteIntArray* dimensions) const;\n\n  template <typename TensorT>\n  absl::Status ReadTensor(uint32_t index, TensorT* tensor) const {\n    const int32_t tensor_id = node_->inputs->data[index];\n    const TfLiteTensor* tflite_tensor = context_->tensors + tensor_id;\n    tensor->data.resize(NumElements(tflite_tensor));\n    if (tflite_tensor->sparsity) {\n      std::vector<int> dims;\n      dims.reserve(tflite_tensor->dims->size);\n      for (int i = 0; i < tflite_tensor->dims->size; ++i) {\n        dims.push_back(tflite_tensor->dims->data[i]);\n      }\n      switch (tflite_tensor->type) {\n        case kTfLiteFloat32: {\n          optimize::sparsity::FormatConverter<float> converter(\n              dims, *tflite_tensor->sparsity);\n          converter.SparseToDense(\n              static_cast<const float*>(tflite_tensor->data.data));\n          const std::vector<float> out = converter.GetData();\n          std::memcpy(&tensor->data[0], out.data(), out.size() * sizeof(float));\n          break;\n        }\n        case kTfLiteFloat16: {\n          optimize::sparsity::FormatConverter<Eigen::half> converter("
},
{
    "Id": 222,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/459b4bfe1f73737fae23aa1499b06a69605d0f65",
    "Violation": "missing",
    "Bug report": "Added a check in EagerExecutor to avoid getting invalid range. ",
    "Number of deleted lines": 0,
    "Deleted lines": "    item->node->Abort(status);\n  }\n  // nodes_to_destroy will be destructed here, while not holding\n  // node_queue_mutex_. This is important because, unfortunately, some nodes'\n  // destructors can enqueue more operations onto this executor and cause\n  // a deadlock.\n}\n\nvoid EagerExecutor::NotifyWaiters(uint64 id) {\n  if (!node_done_notifications_.empty()) {\n    uint64 upperbound_id = 0;\n    if (!unfinished_nodes_.empty()) {\n      upperbound_id = unfinished_nodes_.begin()->first - 1;\n    } else if (!node_queue_.empty()) {\n      upperbound_id = node_queue_.front()->id - 1;\n    } else {\n      upperbound_id = next_node_id_ - 1;\n    }\n    DVLOG(3) << \"Notify node done: [id \" << id << \" to \" << upperbound_id\n             << \"] \";\n    // Note that we notify all waiting threads in case an error has\n    // occurred. These calling threads are responsible for checking status_\n    // before proceeding.\n    const auto range =\n        status_.ok()\n            ? make_pair(node_done_notifications_.lower_bound(id),\n                        node_done_notifications_.upper_bound(upperbound_id))\n            : make_pair(node_done_notifications_.begin(),\n                        node_done_notifications_.end());\n    for (auto it = range.first; it != range.second; ++it) {\n      it->second->notify_all();\n    }\n    node_done_notifications_.erase(range.first, range.second);\n  }\n}\n\nvoid EagerExecutor::Run() {\n  auto thread_exited_notifier ="
},
{
    "Id": 223,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cddca76312f5ae4fb92a101e79eeff6d5ac16932",
    "Violation": "missing",
    "Bug report": "Add check for reading input tensors at an index that is out of range. ",
    "Number of deleted lines": 0,
    "Deleted lines": "               std::unordered_map<int, Value*>* tensor_to_value,\n               std::unordered_map<int, int>* quant_conversion_map = nullptr)\n      : graph_(graph),\n        context_(context),\n        node_(node),\n        tensor_to_value_(tensor_to_value),\n        quant_conversion_map_(quant_conversion_map) {}\n\n  absl::Status ReadValue(uint32_t idx, Value** value);\n\n  absl::Status ReadValueByTensorIdx(uint32_t tensor_idx, Value** value);\n\n  int GetNumberOfRuntimeInputs() const;\n\n  absl::Status GetTensorDims(uint32_t idx, TfLiteIntArray* dimensions) const;\n\n  template <typename TensorT>\n  absl::Status ReadTensor(uint32_t idx, TensorT* t) const {\n    const int32_t tensor_idx = node_->inputs->data[idx];\n    if (tensor_idx < 0) {\n      return absl::InvalidArgumentError(\n          \"Invalid data index found. Possibly an unset optional tensor is \"\n          \"being read.\");\n    }\n\n    const TfLiteTensor* tflite_tensor = context_->tensors + tensor_idx;\n    t->data.resize(NumElements(tflite_tensor));\n    RETURN_IF_ERROR(CreateVectorCopyData(*tflite_tensor, &t->data[0]));\n\n    // Axis and data layout depend on operation this tensor is used in. So,\n    // postpone resolutions until operations are parsed.\n    t->id = tensor_idx;\n    return SetAllDimensions(tflite_tensor->dims, &t->shape);\n  }\n\n  absl::Status AddOutput(const Node* node, int id);\n\n  absl::Status AddOutputs(const Node* node);"
},
{
    "Id": 224,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/823b694639a3f49b6adbf9e73a08c529d583878e",
    "Violation": "missing",
    "Bug report": "Add bounds checking when looking at the stack in TF Registry. ",
    "Number of deleted lines": 2,
    "Deleted lines": "      name: An optional string specifying the registry key for the candidate.\n            If None, candidate.__name__ will be used.\n    Raises:\n      KeyError: If same name is used twice.\n    \"\"\"\n    if not name:\n      name = candidate.__name__\n    if name in self._registry:\n      (filename, line_number, function_name, _) = (\n          self._registry[name][_LOCATION_TAG])\n      raise KeyError(\"Registering two %s with name '%s'! \"\n                     \"(Previous registration was in %s %s:%d)\" %\n                     (self._name, name, function_name, filename, line_number))\n\n    logging.vlog(1, \"Registering %s (%s) in %s.\", name, candidate, self._name)\n    # stack trace is [this_function, Register(), user_function,...]\n    # so the user function is #2.\n    stack = tf_stack.extract_stack()\n    user_function = stack[2]\n    location_tag = tf_stack.convert_stack([user_function])[0]\n    self._registry[name] = {_TYPE_TAG: candidate, _LOCATION_TAG: location_tag}\n\n  def list(self):\n    \"\"\"Lists registered items.\n\n    Returns:\n      A list of names of registered objects.\n    \"\"\"\n    return self._registry.keys()\n\n  def lookup(self, name):\n    \"\"\"Looks up \"name\".\n\n    Args:\n      name: a string specifying the registry key for the candidate.\n    Returns:\n      Registered object if found\n    Raises:\n      LookupError: if \"name\" has not been registered.\n    \"\"\""
},
{
    "Id": 225,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b1c9e600e02b93885dbebfa5dae92436c63d6c03",
    "Violation": "missing",
    "Bug report": "[XLA] Add range check for xla::Array<> indexing. ",
    "Number of deleted lines": 0,
    "Deleted lines": "  // to be passed to the size based constructor.\n  template <typename U>\n  static std::vector<int64> ToInt64Vector(\n      const std::initializer_list<U>& data) {\n    return std::vector<int64>(data.begin(), data.end());\n  }\n\n  // Returns the linear index from the list of per-dimension indexes. Function\n  // is templated so can be used with an std::array from operator() to avoid\n  // memory allocation.\n  template <typename U>\n  int64 calculate_index(const U& indexes) const {\n    CHECK_EQ(sizes_.size(), indexes.size());\n    int64 index = 0;\n    for (int64 i = 0; i < sizes_.size(); ++i) {\n      index *= sizes_[i];\n      index += indexes[i];\n    }\n    return index;\n  }\n\n  // Advances the specified set of indexes and returns true if we haven't\n  // wrapped around (i.e. result isn't {0, 0, ...}).\n  bool next_index(std::vector<int64>* index) const {\n    CHECK_EQ(index->size(), sizes_.size());\n    for (int64 i = sizes_.size() - 1; i >= 0; --i) {\n      (*index)[i]++;\n      if ((*index)[i] < sizes_[i]) {\n        return true;\n      }\n      (*index)[i] = 0;\n    }\n    return false;\n  }\n\n  std::vector<int64> sizes_;\n  std::unique_ptr<T[]> values_;\n};"
},
{
    "Id": 226,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1908d7ef706f0f3f8c7a300068355bf795fb3d17",
    "Violation": "improper",
    "Bug report": "Fix out-of-bounds StringPiece access in ForwardNUTF8CharPositions().  Even a simple invocation like 'int p = 0; ForwardNUTF8CharPositions(\"a\", 1, &p);' will cause an invalid access to in[1]. Checking for *pos < size before that access fixes this issue.",
    "Number of deleted lines": 1,
    "Deleted lines": "// Returns the number of Unicode characters in a UTF-8 string.\n// Result may be incorrect if the input string is not valid UTF-8.\nint32 UTF8StrLen(const string& str);\n\n// Get the next UTF8 character position starting at the given position and\n// skipping the given number of characters. Position is a byte offset, and\n// should never be `null`. The function return true if successful. However, if\n// the end of the string is reached before the requested characters, then the\n// position will point to the end of string and this function will return false.\ntemplate <typename T>\nbool ForwardNUTF8CharPositions(const StringPiece in,\n                               const T num_utf8_chars_to_shift, T* pos) {\n  const size_t size = in.size();\n  T utf8_chars_counted = 0;\n  while (utf8_chars_counted < num_utf8_chars_to_shift && *pos < size) {\n    // move forward one utf-8 character\n    do {\n      ++*pos;\n    } while (IsTrailByte(in[*pos]) && *pos < size);\n    ++utf8_chars_counted;\n  }\n  return utf8_chars_counted == num_utf8_chars_to_shift;\n}\n\n// Get the previous UTF8 character position starting at the given position and\n// skipping the given number of characters. Position is a byte offset with a\n// positive value, relative to the beginning of the string, and should never be\n// `null`. The function return true if successful. However, if the beginning of\n// the string is reached before the requested character, then the position will\n// point to the beginning of the string and this function will return false.\ntemplate <typename T>\nbool BackNUTF8CharPositions(const StringPiece in,\n                            const T num_utf8_chars_to_shift, T* pos) {\n  const size_t start = 0;\n  T utf8_chars_counted = 0;\n  while (utf8_chars_counted < num_utf8_chars_to_shift && (*pos > start)) {\n    // move back one utf-8 character\n    do {\n      --*pos;"
},
{
    "Id": 227,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/aa54f547f04c3007b26df2379c6cf5f081948d0b",
    "Violation": "missing",
    "Bug report": " Updated the check_numerics function to also validate the gradient corresponding to the tensor it's validating",
    "Number of deleted lines": 1,
    "Deleted lines": "    # op.inputs[0] can be large, so colocate the shape calculation with it.\n    with ops.colocate_with(op.inputs[0]):\n      dense_shape = array_ops.shape(op.inputs[0])\n      values_shape = array_ops.concat(0, [[-1], dense_shape[1:]])\n\n  values = array_ops.reshape(grad, values_shape)\n  indices = array_ops.reshape(op.inputs[1], [-1])\n  return [ops.IndexedSlices(values, indices, dense_shape), None]\n\n\n@ops.RegisterGradient(\"GatherNd\")\ndef _GatherNdGrad(unused_op, unused_grad):\n  raise NotImplementedError(\"Gradient for gather_nd is not implemented.\")\n\n\n@ops.RegisterGradient(\"CheckNumerics\")\ndef _CheckNumericsGrad(_, grad):\n  \"\"\"Gradient for check_numerics op.\"\"\"\n  return grad\n\n\n@ops.RegisterGradient(\"Identity\")\ndef _IdGrad(_, grad):\n  return grad\n\n\n@ops.RegisterGradient(\"RefIdentity\")\ndef _RefIdGrad(_, grad):\n  return grad\n\n\nops.NoGradient(\"StopGradient\")\n\n\n@ops.RegisterGradient(\"Reshape\")\ndef _ReshapeGrad(op, grad):\n  return [array_ops.reshape(grad, array_ops.shape(op.inputs[0])), None]\n\n"
},
{
    "Id": 228,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/236660d0fccff6f59f29a1936dc731d783722e28",
    "Violation": "missing",
    "Bug report": " [XLA:GPU] Fix host conv checker canonicalization for f16 and nans. The GPU-side checker is correct, but the host-side checker was canonicalizing nan to F16_MAX.  The effect of this is that you'd get a \"conv mismatch!\" error but no description of exactly what mismatched.",
    "Number of deleted lines": 0,
    "Deleted lines": "  TF_RETURN_IF_ERROR(stream->BlockHostUntilDone());\n  return result < kTolerance;\n}\n\n// Host side comparison code that does the same thing, but reports some of the\n// differences as well. It only print logs for debugging.\ntemplate <typename ElementType, typename ComparisonType>\nStatus HostCompare(se::Stream* stream, se::DeviceMemoryBase lhs,\n                   se::DeviceMemoryBase rhs) {\n  int64 n = lhs.size() / sizeof(ElementType);\n  std::vector<ElementType> host_lhs(n), host_rhs(n);\n  stream->ThenMemcpy(host_lhs.data(), lhs, lhs.size());\n  stream->ThenMemcpy(host_rhs.data(), rhs, rhs.size());\n  TF_RETURN_IF_ERROR(stream->BlockHostUntilDone());\n\n  const auto canonicalize = [](ComparisonType a) -> ComparisonType {\n    if (std::is_same<ElementType, Eigen::half>::value && a) {\n      constexpr float kMaxFp16Value = 65504.;\n      if (a < 0) {\n        return -(kMaxFp16Value + 1);\n      }\n      return kMaxFp16Value + 1;\n    }\n    return a;\n  };\n  int differences_seen = 0;\n  for (int64 i = 0; i < n && differences_seen < 10; i++) {\n    auto original_lhs = static_cast<ComparisonType>(host_lhs[i]);\n    auto original_rhs = static_cast<ComparisonType>(host_rhs[i]);\n    ComparisonType lhs = canonicalize(original_lhs);\n    ComparisonType rhs = canonicalize(original_rhs);\n    if (std::isnan(lhs) && std::isnan(rhs)) {\n      continue;\n    }\n    if (std::isinf(lhs) && std::isinf(rhs) && lhs == rhs) {\n      continue;\n    }\n    if (std::isfinite(lhs) != std::isfinite(rhs) ||"
},
{
    "Id": 229,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209",
    "Violation": "missing",
    "Bug report": " [lite] Add check for bias_size is zero to avoid division by zero. This shouldn't happen for properly converted models. Just safety check",
    "Number of deleted lines": 0,
    "Deleted lines": "                                      T output_activation_max) {\n  using std::max;\n  using std::min;\n  return min(max(x, output_activation_min), output_activation_max);\n}\n\n// Legacy function, left for compatibility only.\ntemplate <FusedActivationFunctionType Ac>\nfloat ActivationFunction(float x) {\n  float output_activation_min, output_activation_max;\n  GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);\n  return ActivationFunctionWithMinMax(x, output_activation_min,\n                                      output_activation_max);\n}\n\ninline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,\n                         const float* bias_data, int array_size,\n                         float* array_data) {\n  // Note: see b/132215220: in May 2019 we thought it would be OK to replace\n  // this with the Eigen one-liner:\n  //   return (array.colwise() + bias).cwiseMin(clamp_max).cwiseMin(clamp_max).\n  // This turned out to severely regress performance: +4ms (i.e. 8%) on\n  // MobileNet v2 / 1.0 / 224. So we keep custom NEON code for now.\n  TFLITE_DCHECK_EQ((array_size % bias_size), 0);\n#ifdef USE_NEON\n  float* array_ptr = array_data;\n  float* array_end_ptr = array_ptr + array_size;\n  const auto clamp_min_vec = vdupq_n_f32(clamp_min);\n  const auto clamp_max_vec = vdupq_n_f32(clamp_max);\n  for (; array_ptr != array_end_ptr; array_ptr += bias_size) {\n    int i = 0;\n    for (; i <= bias_size - 16; i += 16) {\n      auto b0 = vld1q_f32(bias_data + i);\n      auto b1 = vld1q_f32(bias_data + i + 4);\n      auto b2 = vld1q_f32(bias_data + i + 8);\n      auto b3 = vld1q_f32(bias_data + i + 12);\n      auto a0 = vld1q_f32(array_ptr + i);\n      auto a1 = vld1q_f32(array_ptr + i + 4);"
},
{
    "Id": 230,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/7008e41f183ae9de3f4656067932b36afa822ef2",
    "Violation": "missing",
    "Bug report": " Fix the check for empty reduction indices. In the general case indices can be any rank.",
    "Number of deleted lines": 2,
    "Deleted lines": "  }\n  return false;\n}\n\nbool ConstantFolding::IsReductionWithConstantIndices(\n    const NodeDef& node, bool* indices_is_empty) const {\n  // Ensure its an appropriate Reduce node.\n  if (!IsReduction(node) || node.input_size() < 2) {\n    return false;\n  }\n  // Ensure that the axes to reduce by are constant.\n  NodeDef* reductions_indices = node_map_->GetNode(node.input(1));\n  if (!IsReallyConstant(*reductions_indices) ||\n      !reductions_indices->attr().count(\"value\")) {\n    return false;\n  }\n  const TensorProto& reduction_indices_tensor =\n      reductions_indices->attr().at(\"value\").tensor();\n  *indices_is_empty =\n      reduction_indices_tensor.tensor_shape().dim(0).size() == 0;\n  return true;\n}\n\nbool ConstantFolding::IsReductionCandidateForSimplification(\n    const NodeDef& node, const GraphProperties& properties,\n    TensorShapeProto* input_tensor_shape, TensorShapeProto* output_tensor_shape,\n    bool* is_single_element_op) const {\n  // Get the properties of the input & output tensors and check if they both\n  // contain a single element.\n  if (!properties.HasInputProperties(node.name()) ||\n      !properties.HasOutputProperties(node.name())) {\n    return false;\n  }\n  const auto& input_props = properties.GetInputProperties(node.name())[0];\n  const auto& output_props = properties.GetOutputProperties(node.name())[0];\n  if (!input_props.has_shape() || input_props.shape().unknown_rank() ||\n      !output_props.has_shape() || output_props.shape().unknown_rank()) {\n    return false;\n  }\n  *input_tensor_shape = input_props.shape();"
},
{
    "Id": 231,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/551a90f2e3d20420d68a2796d19f1c42b6636e0d",
    "Violation": "missing",
    "Bug report": " Add checks in ReduceWindowOpOnTensorsConversion. The pattern does not support ops with non-zero padding config. Add a check to prevent unexpected lowering. It is not easy to add tests because other patterns will convert body ops, and it causes issues like invalid IRs.",
    "Number of deleted lines": 0,
    "Deleted lines": "                                    int result_index) {\n    if (Operation* op = reduce_op.getReductionOp(result_index)) {\n      if (isa<mhlo::MinOp>(*op)) return PoolingType::kMin;\n      if (isa<mhlo::MaxOp>(*op)) return PoolingType::kMax;\n      if (isa<mhlo::AddOp>(*op)) return PoolingType::kAdd;\n    }\n    return PoolingType::kInvalid;\n  }\n\n  LogicalResult matchAndRewrite(\n      mhlo::ReduceWindowOp op, ArrayRef<Value> args,\n      ConversionPatternRewriter& rewriter) const override {\n    auto loc = op.getLoc();\n    int rank = op.getResultTypes()[0].cast<ShapedType>().getRank();\n    if (rank != 4) {\n      return rewriter.notifyMatchFailure(op, \"expected NHWC pooling-based op\");\n    }\n\n    SmallVector<int64_t, 2> shapes;\n    shapes.push_back(op.window_dimensions().getValue<int64_t>(1));\n    shapes.push_back(op.window_dimensions().getValue<int64_t>(2));\n\n    if (op.window_strides() &&\n        (op.window_strides().getValue().getValue<int64_t>(0) != 1 ||\n         op.window_strides().getValue().getValue<int64_t>(3) != 1)) {\n      return rewriter.notifyMatchFailure(\n          op, \"expected window_strides to be [1,x,y,1]\");\n    }\n    if (op.window_dimensions() &&\n        (op.window_dimensions().getValue<int64_t>(0) != 1 ||\n         op.window_dimensions().getValue<int64_t>(3) != 1)) {\n      return rewriter.notifyMatchFailure(\n          op, \"expected window_dimensions to be [1,x,y,1]\");\n    }\n\n    Attribute strides;\n    if (op.window_stridesAttr()) {\n      strides = rewriter.getI64VectorAttr("
},
{
    "Id": 232,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f6f62119587baf8ccb7378ceac86bacd2db2863d",
    "Violation": "missing",
    "Bug report": "Add missing validation in maxpooling_op.cc ",
    "Number of deleted lines": 0,
    "Deleted lines": "        errors::Unimplemented(\n            \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          explicit_paddings_,\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, output_shape, &output));\n\n    SpatialMaxPoolWithArgMaxHelper<CPUDevice, T, int64>(\n        context, &tensor_out_dup, &tensor_out_arg_max, output, tensor_in,\n        out_backprop, params, true);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64> explicit_paddings_;\n  TensorFormat data_format_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <class T>\nclass MaxPoolingGradOp<Eigen::GpuDevice, T> : public OpKernel {\n public:\n  typedef Eigen::GpuDevice Device;\n"
},
{
    "Id": 233,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b86513673b98ac6c4458033fcda718365539afae",
    "Violation": "missing",
    "Bug report": "added check for zero stride values to strided slice ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n    const auto* tf_options = reinterpret_cast<const TfLiteStridedSliceParams*>(\n        tflite_node->builtin_data);\n    auto out_shape = graph->FindOutputs(node->id)[0]->tensor.shape;\n    if (!tf_options) {\n      return InternalError(\"Missing tflite params\");\n    }\n    RETURN_IF_ERROR(CheckOptionsSupport(tf_options));\n\n    SliceAttributes attr;\n    if (read_without_batch) {\n      RETURN_IF_ERROR(ReadAttribsWithoutBatch(reader, tf_options,\n                                              input->tensor.shape, &attr));\n    }\n    if (read_with_batch) {\n      RETURN_IF_ERROR(\n          ReadAttribsWithBatch(reader, tf_options, input->tensor.shape, &attr));\n    }\n    if (attr.strides.h < 0 || attr.strides.w < 0 || attr.strides.c < 0) {\n      return UnimplementedError(\"Reverse slices are not supported.\");\n    }\n    if ((attr.ends.h - attr.starts.h + attr.strides.h - 1) / attr.strides.h !=\n        out_shape.h) {\n      return UnimplementedError(\"Output height doesn't match\");\n    }\n    if ((attr.ends.w - attr.starts.w + attr.strides.w - 1) / attr.strides.w !=\n        out_shape.w) {\n      return UnimplementedError(\"Output width doesn't match\");\n    }\n    if ((attr.ends.c - attr.starts.c + attr.strides.c - 1) / attr.strides.c !=\n        out_shape.c) {\n      return UnimplementedError(\"Output channels don't match\");\n    }\n    node->operation.attributes = attr;\n    return OkStatus();\n  }\n\n private:"
},
{
    "Id": 234,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4377a561b7757ed83757f07532e6564c42c286ba",
    "Violation": "missing",
    "Bug report": " Add a check for group size when sorting grouped AllReduces within a block.",
    "Number of deleted lines": 0,
    "Deleted lines": "            blocks.insert(all_reduce->getBlock());\n          }\n        }\n      });\n\n      if (ordered_all_reduces.size() > 1) {\n        // Create dependency graph for all all_reduce operations, so that that\n        // independent ops can be merged\n        auto all_reduce_groups =\n            createIndependentReduceOpsGroups(ordered_all_reduces);\n\n        VLOG(2) << ordered_all_reduces.size() << \" all-reduce ops in \"\n                << all_reduce_groups.size() << \" groups\";\n\n        all_reduce_groups = createSubgroupsByElemType(all_reduce_groups);\n        all_reduce_groups = createSubgroupsByReductionAttr(all_reduce_groups);\n        all_reduce_groups = createSubgroupsByGroupAssignment(all_reduce_groups);\n\n        std::sort(all_reduce_groups.begin(), all_reduce_groups.end(),\n                  [](std::vector<mlir::TF::DTensorAllReduceOp> lhs,\n                     std::vector<mlir::TF::DTensorAllReduceOp> rhs) {\n                    if (lhs[0]->getBlock() == rhs[0]->getBlock())\n                      return lhs[0]->isBeforeInBlock(rhs[0]);\n                    return true;\n                  });\n        for (const auto& reduce_group : all_reduce_groups) {\n          if (reduce_group.size() > 1) {\n            VLOG(4) << \"Combining following reduce ops into one: ------------\";\n            for (auto reduce_op : reduce_group) {\n              VLOG(4) << mlir::GetNameFromLoc(reduce_op.getLoc());\n            }\n            VLOG(4) << \"-----------------------------------------------------\";\n          }\n          if (mlir::failed(CombineAllReduceOps(cluster, reduce_group))) {\n            return signalPassFailure();\n          }\n        }\n\n        for (auto* b : blocks) {\n          mlir::sortTopologically(b);\n        }"
},
{
    "Id": 235,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1",
    "Violation": "missing",
    "Bug report": " Prevent check fail in FFT ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  template <typename RealT, typename ComplexT>\n  void DoRealForwardFFT(OpKernelContext* ctx, uint64* fft_shape,\n                        const Tensor& in, Tensor* out) {\n    // Create the axes (which are always trailing).\n    const auto axes = Eigen::ArrayXi::LinSpaced(FFTRank, 1, FFTRank);\n    auto device = ctx->eigen_device<CPUDevice>();\n    auto input = Tensor(in).flat_inner_dims<RealT, FFTRank + 1>();\n    const auto input_dims = input.dimensions();\n\n    // Slice input to fft_shape on its inner-most dimensions.\n    Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> input_slice_sizes;\n    input_slice_sizes[0] = input_dims[0];\n    TensorShape temp_shape{input_dims[0]};\n    for (int i = 1; i <= FFTRank; ++i) {\n      input_slice_sizes[i] = fft_shape[i - 1];\n      temp_shape.AddDim(fft_shape[i - 1]);\n    }\n\n    auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();\n    const Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> zero_start_indices;\n\n    // Compute the full FFT using a temporary tensor.\n    Tensor temp;\n    OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),\n                                           temp_shape, &temp));\n    auto full_fft = temp.flat_inner_dims<ComplexT, FFTRank + 1>();\n    full_fft.device(device) =\n        input.slice(zero_start_indices, input_slice_sizes)\n            .template fft<Eigen::BothParts, Eigen::FFT_FORWARD>(axes);\n\n    // Slice away the negative frequency components.\n    output.device(device) =\n        full_fft.slice(zero_start_indices, output.dimensions());\n  }\n\n  template <typename ComplexT, typename RealT>\n  void DoRealBackwardFFT(OpKernelContext* ctx, uint64* fft_shape,"
},
{
    "Id": 236,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/25bae42b3022b00788a29ae6c400922c31f88231",
    "Violation": "insufficient",
    "Bug report": " Add additional length check for inputs ",
    "Number of deleted lines": 1,
    "Deleted lines": "  shapes = [sp_input.dense_shape for sp_input in sp_inputs]\n\n  if expand_nonconcat_dim:\n    max_shape = math_ops.reduce_max(\n        array_ops.concat(\n            [array_ops.reshape(shape, [1, -1]) for shape in shapes], 0), 0)\n    shapes = [\n        array_ops.concat([\n            max_shape[:axis], shape[-1:]\n            if axis == -1 else shape[axis:axis + 1], []\n            if axis == -1 else max_shape[axis + 1:]\n        ], 0) for shape in shapes\n    ]\n\n  output_ind, output_val, output_shape = (\n      gen_sparse_ops.sparse_concat(inds, vals, shapes, axis, name=name))\n\n  shapes_value = [tensor_util.constant_value(shape) for shape in shapes]\n  if all(shape is not None for shape in shapes_value):\n    dim = sum(shape[axis] for shape in shapes_value)\n    output_shape = shapes_value[0]\n    output_shape[axis] = dim\n    output_shape = tensor_shape.as_shape(output_shape)\n  return sparse_tensor.SparseTensor(output_ind, output_val, output_shape)\n\n\n@tf_export(v1=[\"sparse.add\", \"sparse_add\"])\n@deprecation.deprecated_endpoints(\"sparse_add\")\ndef sparse_add(a, b, thresh=0):\n  \"\"\"Adds two tensors, at least one of each is a `SparseTensor`.\n\n  If one `SparseTensor` and one `Tensor` are passed in, returns a `Tensor`.  If\n  both arguments are `SparseTensor`s, this returns a `SparseTensor`.  The order\n  of arguments does not matter.  Use vanilla `tf.add()` for adding two dense\n  `Tensor`s.\n\n  The shapes of the two operands must match: broadcasting is not supported.\n\n  The indices of any input `SparseTensor` are assumed ordered in standard"
},
{
    "Id": 237,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e07e48b2e0908333a36f1c5726a9406a83b3ec90",
    "Violation": "missing",
    "Bug report": "Added a check on literal_.has_value() to avoid segfault. ",
    "Number of deleted lines": 0,
    "Deleted lines": "\nstd::unique_ptr<HloInstruction>\nHloConstantInstruction::CloneWithNewOperandsImpl(\n    const Shape& shape, absl::Span<HloInstruction* const> new_operands,\n    HloCloneContext* context) const {\n  CHECK(literal_.has_value());\n  // Literal's shape may have no/different tiling info. Use this instruction's\n  // shape instead.\n  CHECK(Shape::Equal().MinorToMajorOnlyInLayout()(literal_->shape(),\n                                                  this->shape()));\n  return absl::make_unique<HloConstantInstruction>(literal_->Clone(),\n                                                   this->shape());\n}\n\nstring HloConstantInstruction::OperandsToStringWithCanonicalNameMap(\n    const HloPrintOptions& options,\n    CanonicalNameMap* canonical_name_map) const {\n  if (options.print_only_essential_constants()) {\n    if (literal().IsAll(0)) {\n      return \"0\";\n    }\n    if (literal().IsAll(1)) {\n      return \"1\";\n    }\n    if (shape().IsInteger()) {\n      return literal_->ToStringWithoutShapeOneline();\n    }\n    return \"{...}\";\n  }\n\n  // For constants, show the actual value in place of an empty operand list.\n  if (literal_.has_value() &&\n      ((shape().IsArray() && ShapeUtil::ElementsIn(shape()) <= 10) ||\n       options.print_large_constants())) {\n    // Literal::ToString emits multidimensional arrays over multiple\n    // lines. Compact this into one line by stripping out white space.\n    return literal_->ToStringWithoutShapeOneline();\n  } else {"
},
{
    "Id": 238,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cc560f64b6e3e6724517757e9789c52cde224ee9",
    "Violation": "missing",
    "Bug report": " Profiler: restore correct behavior of StartTracing with empty workers list. absl::StrSplit behaves differently from str_util::Split when the passed string is empty. Restore previous behavior by explicitly checking for an empty string.",
    "Number of deleted lines": 1,
    "Deleted lines": "  }\n  EventsWriter event_writer(io::JoinPath(logdir, \"events\"));\n  return event_writer.InitWithSuffix(kProfileEmptySuffix);\n}\n\n// Starts tracing on a single or multiple TPU hosts and saves the result in the\n// given logdir. If no trace was collected, retries tracing for\n// num_tracing_attempts.\nStatus StartTracing(const tensorflow::string& service_addr,\n                    const tensorflow::string& logdir,\n                    const tensorflow::string& workers_list,\n                    bool include_dataset_ops, int duration_ms,\n                    int num_tracing_attempts) {\n  // Use the current timestamp as the run name.\n  tensorflow::string session_id = GetCurrentTimeStampAsString();\n  constexpr char kProfilePluginDirectory[] = \"plugins/profile/\";\n  tensorflow::string repository_root =\n      io::JoinPath(logdir, kProfilePluginDirectory);\n  std::vector<tensorflow::string> hostnames = absl::StrSplit(workers_list, ',');\n\n  TF_RETURN_IF_ERROR(MaybeCreateEmptyEventFile(logdir));\n\n  Status status = Status::OK();\n  int remaining_attempts = num_tracing_attempts;\n  tensorflow::ProfileOptions opts;\n  opts.set_include_dataset_ops(include_dataset_ops);\n  while (true) {\n    std::cout << \"Starting to profile TPU traces for \" << duration_ms << \" ms. \"\n              << \"Remaining attempt(s): \" << --remaining_attempts << std::endl;\n    if (hostnames.empty()) {\n      status = Profile(service_addr, logdir, duration_ms, repository_root,\n                       session_id, opts);\n    } else {\n      tensorflow::string tpu_master = service_addr;\n      status = NewSession(tpu_master, hostnames, duration_ms, repository_root,\n                          session_id, opts);\n    }\n    if (remaining_attempts <= 0 || status.ok() || !ShouldRetryTracing(status))\n      break;"
},
{
    "Id": 239,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/fe4f74018ec6a7dff2718ea59d0f317460c0b3ad",
    "Violation": "missing",
    "Bug report": " Temporarily check for empty proto fields to avoid a crash for old cached traces. We can remove this code once we land all the necessary changes and invalidate all the caches.",
    "Number of deleted lines": 0,
    "Deleted lines": "  }\n  if (node.has_xla()) {\n    if (node.xla().computation_primitive_size() > 0) {\n      return node.xla().computation_primitive_size();\n    } else {\n      return computation_size;\n    }\n  }\n  return 0;\n}\n\n// Fills op metrics into a node.\nvoid PopulateOpMetricsNode(\n    const OpMetrics& op_metrics, double peak_gigaflops_per_second_per_core,\n    std::vector<double> peak_mem_gibibytes_per_second_per_core,\n    uint64_t total_time_ps, Node* node) {\n  DCHECK_EQ(ChildrenTimePs(op_metrics), 0);\n\n  Metrics* metrics = node->mutable_metrics();\n  // The UI computes flops_rate = raw_flops / raw_time\n  // and memory_bandwidth = raw_bytes_accessed / raw_time. See:\n  // https://github.com/tensorflow/profiler/blob/master/frontend/app/common/utils/utils.ts\n  metrics->set_raw_time(op_metrics.time_ps());\n  metrics->set_raw_flops(op_metrics.flops());\n  metrics->set_raw_bytes_accessed(op_metrics.bytes_accessed());\n\n  // \"time\" is the op or category fraction of total time.\n  metrics->set_time(SafeDivide(op_metrics.time_ps(), total_time_ps));\n\n  // Hack to approximate utilization for INT8/4 convolution HLOs:\n  // Since MXU BW is 2x/4x for INT8/4, multiply peak BW by the factor detemrined\n  // by the computation size\n  if (GetComputationSize(*node) == 8) {\n    peak_gigaflops_per_second_per_core *= 2;\n  } else if (GetComputationSize(*node) == 4) {\n    peak_gigaflops_per_second_per_core *= 4;\n  }\n  double flops_utilization = SafeDivide(GigaFlopsPerSecondPerCore(op_metrics),"
},
{
    "Id": 240,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c56d0cd8ce8239ee369fac1ae6b9cae67fd4c447",
    "Violation": "missing",
    "Bug report": " Avoid signed integer overflow when loading tensors with both 0 and large dims. `TensorShapeBase` ensures `num_elements` doesn't overflow when adding a new dimension. However, this check is insufficient to prevent other functions that use a different multiplication order from hitting an overflow _if any of the dimensions are 0_. For example, Eigen currently multiplies dimensions in reverse order, so dimensions of (0, 4294967296,4294967296) will trigger an overflow in Eigen code. To prevent overflow for all multiplication orders, we can that `num_elements` doesn't overflow if zero dimensions are skipped.",
    "Number of deleted lines": 0,
    "Deleted lines": "    }\n  }\n}\n\ntemplate <class Shape>\nStatus TensorShapeBase<Shape>::BuildTensorShapeBase(\n    const TensorShapeProto& proto, TensorShapeBase* out) {\n  out->set_tag(REP16);\n  out->set_data_type(DT_INVALID);\n  // NOTE(irving): Unfortunately, TensorShape allows parsing protos with\n  // unknown_shape() set, and it seems hard to remove this without backwards\n  // compatibility issues.\n  if (kIsPartial && proto.unknown_rank()) {\n    out->set_ndims_byte(kUnknownRank);\n    out->set_num_elements(-1);\n  } else {\n    out->set_ndims_byte(0);\n    out->set_num_elements(1);\n    Status s = OkStatus();\n    for (const auto& d : proto.dim()) {\n      s = out->AddDimWithStatus(d.size());\n      if (!s.ok()) {\n        return s;\n      }\n    }\n  }\n  return OkStatus();\n}\n\ntemplate <class Shape>\nTensorShapeBase<Shape>::TensorShapeBase(gtl::ArraySlice<int64_t> dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n\ntemplate <class Shape>\nStatus TensorShapeBase<Shape>::BuildTensorShapeBase(\n    gtl::ArraySlice<int64_t> dim_sizes, TensorShapeBase* out) {\n  out->set_tag(REP16);\n  out->set_data_type(DT_INVALID);\n  return out->InitDims(dim_sizes);\n}\n"
},
{
    "Id": 241,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/80bb2f5511e7d2d386c79da52ff517691e19ac54",
    "Violation": "missing",
    "Bug report": " Add check condition for large values of range_max, which is causing session abort.",
    "Number of deleted lines": 0,
    "Deleted lines": "    unique: A `bool`. Determines whether all sampled classes in a batch are\n      unique.\n    range_max: An `int`. The number of possible classes.\n    seed: An `int`. An operation-specific seed. Default is 0.\n    name: A name for the operation (optional).\n\n  Returns:\n    sampled_candidates: A tensor of type `int64` and shape `[num_sampled]`.\n      The sampled classes.\n    true_expected_count: A tensor of type `float`.  Same shape as\n      `true_classes`. The expected counts under the sampling distribution\n      of each of `true_classes`.\n    sampled_expected_count: A tensor of type `float`. Same shape as\n      `sampled_candidates`. The expected counts under the sampling distribution\n      of each of `sampled_candidates`.\n\n  \"\"\"\n  seed1, seed2 = random_seed.get_seed(seed)\n  return gen_candidate_sampling_ops.learned_unigram_candidate_sampler(\n      true_classes, num_true, num_sampled, unique, range_max, seed=seed1,\n      seed2=seed2, name=name)\n\n\n@tf_export('random.fixed_unigram_candidate_sampler',\n           'nn.fixed_unigram_candidate_sampler')\n@dispatch.add_dispatch_support\ndef fixed_unigram_candidate_sampler(true_classes,\n                                    num_true,\n                                    num_sampled,\n                                    unique,\n                                    range_max,\n                                    vocab_file='',\n                                    distortion=1.0,\n                                    num_reserved_ids=0,\n                                    num_shards=1,\n                                    shard=0,\n                                    unigrams=(),\n                                    seed=None,"
},
{
    "Id": 242,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4ea68093eeaf4c4157368668afd7f809b806a504",
    "Violation": "missing",
    "Bug report": "Add negative parameter validation to convolution layers. ",
    "Number of deleted lines": 0,
    "Deleted lines": "               kernel_regularizer=None,\n               bias_regularizer=None,\n               activity_regularizer=None,\n               kernel_constraint=None,\n               bias_constraint=None,\n               trainable=True,\n               name=None,\n               conv_op=None,\n               **kwargs):\n    super(Conv, self).__init__(\n        trainable=trainable,\n        name=name,\n        activity_regularizer=regularizers.get(activity_regularizer),\n        **kwargs)\n    self.rank = rank\n\n    if isinstance(filters, float):\n      filters = int(filters)\n    self.filters = filters\n    self.groups = groups or 1\n    self.kernel_size = conv_utils.normalize_tuple(\n        kernel_size, rank, 'kernel_size')\n    self.strides = conv_utils.normalize_tuple(strides, rank, 'strides')\n    self.padding = conv_utils.normalize_padding(padding)\n    self.data_format = conv_utils.normalize_data_format(data_format)\n    self.dilation_rate = conv_utils.normalize_tuple(\n        dilation_rate, rank, 'dilation_rate')\n\n    self.activation = activations.get(activation)\n    self.use_bias = use_bias\n\n    self.kernel_initializer = initializers.get(kernel_initializer)\n    self.bias_initializer = initializers.get(bias_initializer)\n    self.kernel_regularizer = regularizers.get(kernel_regularizer)\n    self.bias_regularizer = regularizers.get(bias_regularizer)\n    self.kernel_constraint = constraints.get(kernel_constraint)\n    self.bias_constraint = constraints.get(bias_constraint)\n    self.input_spec = InputSpec(min_ndim=self.rank + 2)"
},
{
    "Id": 243,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/199f1ff12a28d571100b323ec54a5eee47078d8b",
    "Violation": "missing",
    "Bug report": " Add necessary check in fft ops to fix crash. This PR tries to address the issue raised in 55263 where tf.single.rfft2d will crash when length contains negative value.",
    "Number of deleted lines": 0,
    "Deleted lines": "                                \" but got: \", input_shape.DebugString()));\n\n    Tensor* out;\n    TensorShape output_shape = input_shape;\n    uint64 fft_shape[3] = {0, 0, 0};\n\n    // In R2C or C2R mode, we use a second input to specify the FFT length\n    // instead of inferring it from the input shape.\n    if (IsReal()) {\n      const Tensor& fft_length = ctx->input(1);\n      OP_REQUIRES(ctx,\n                  fft_length.shape().dims() == 1 &&\n                      fft_length.shape().dim_size(0) == fft_rank,\n                  errors::InvalidArgument(\"fft_length must have shape [\",\n                                          fft_rank, \"]\"));\n\n      auto fft_length_as_vec = fft_length.vec<int32>();\n      for (int i = 0; i < fft_rank; ++i) {\n        fft_shape[i] = fft_length_as_vec(i);\n        // Each input dimension must have length of at least fft_shape[i]. For\n        // IRFFTs, the inner-most input dimension must have length of at least\n        // fft_shape[i] / 2 + 1.\n        bool inner_most = (i == fft_rank - 1);\n        uint64 min_input_dim_length =\n            !IsForward() && inner_most ? fft_shape[i] / 2 + 1 : fft_shape[i];\n        auto input_index = input_shape.dims() - fft_rank + i;\n        OP_REQUIRES(\n            ctx,\n            // We pass through empty tensors, so special case them here.\n            input_shape.dim_size(input_index) == 0 ||\n                input_shape.dim_size(input_index) >= min_input_dim_length,\n            errors::InvalidArgument(\n                \"Input dimension \", input_index,\n                \" must have length of at least \", min_input_dim_length,\n                \" but got: \", input_shape.dim_size(input_index)));\n        uint64 dim = IsForward() && inner_most && fft_shape[i] != 0\n                         ? fft_shape[i] / 2 + 1\n                         : fft_shape[i];"
},
{
    "Id": 244,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/076f909b70b251daea6c443c9b1929b9745aed20",
    "Violation": "improper",
    "Bug report": "fix boolean expression in length check ",
    "Number of deleted lines": 1,
    "Deleted lines": "    auto shape_or = b->GetShape(input_tensor);\n    OP_REQUIRES_OK(ctx, shape_or.status());\n    xla::Shape element_shape = std::move(shape_or).value();\n    std::vector<int64_t> element_dims =\n        xla::SpanToVector(element_shape.dimensions());\n    OP_REQUIRES(\n        ctx, !element_dims.empty(),\n        errors::Unimplemented(\"Element dimensions have to be non-empty\"));\n\n    std::vector<int64_t> lengths;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntVector(2, &lengths));\n    OP_REQUIRES(ctx, !lengths.empty(),\n                errors::Unimplemented(\"Length has to be non-empty\"));\n    int64_t length = lengths[0];\n    for (int64_t len : lengths) {\n      OP_REQUIRES(ctx, len == length,\n                  errors::Unimplemented(\"All lengths have to be the same\"));\n    }\n    OP_REQUIRES(ctx, length,\n                errors::Unimplemented(\"All lengths must be positive\"));\n    OP_REQUIRES(\n        ctx, element_dims[0] % length == 0,\n        errors::Unimplemented(\"Buffer size has to be a multiple of length\"));\n    std::vector<int64_t> new_dims = {element_dims[0] / length, length};\n    for (int i = 1; i < element_dims.size(); i++) {\n      new_dims.push_back(element_dims[i]);\n    }\n\n    xla::XlaOp reshaped = xla::Reshape(input_tensor, new_dims);\n\n    xla::XlaOp result;\n    OP_REQUIRES_OK(ctx, ExecuteTensorListFromTensor(length, reshaped, &result));\n    ctx->SetTensorListOutput(0, result);\n  }\n\n private:\n  DataType dtype_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(TensorListSplitOp);"
},
{
    "Id": 245,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/3acc8eaf602b3e9a009f54e1e0164644dd793831",
    "Violation": "missing",
    "Bug report": "Add sanity check for resize-bilinear input shape. ",
    "Number of deleted lines": 1,
    "Deleted lines": "namespace builtin {\nnamespace resize_bilinear {\n\n// This file has three implementation of RESIZE_BILINEAR.\nenum KernelType {\n  kReference,\n  kGenericOptimized,  // Neon-free\n  kNeonOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kSizeTensor = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                const TfLiteTensor* input,\n                                const TfLiteTensor* size,\n                                TfLiteTensor* output) {\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  const int32* size_data = GetTensorData<int32>(size);\n  output_size->data[1] = size_data[0];\n  output_size->data[2] = size_data[1];\n  output_size->data[3] = input->dims->data[3];\n  return context->ResizeTensor(context, output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  // TODO(ahentz): Our current implementations rely on the inputs being 4D.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(size), 1);\n\n  TF_LITE_ENSURE_EQ(context, size->type, kTfLiteInt32);\n  // ResizeBilinear creates a float tensor even when the input is made of"
},
{
    "Id": 246,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/fffbe5a26da2d6fab5a3eb648cefef49db4d38de",
    "Violation": "missing",
    "Bug report": " Check if the session has been deleted before releasing a callable. In some versions of Python, the Session._session field may be cleared (in `Session.__del__()`) before a callable that has a reference to that Session is deleted. Add a defensive check in the `Session._Callable.__del__()` method.",
    "Number of deleted lines": 1,
    "Deleted lines": "          else:\n            self._handle = tf_session.TF_DeprecatedSessionMakeCallable(\n                session._session, options_ptr, status)\n      finally:\n        tf_session.TF_DeleteBuffer(options_ptr)\n\n    def __call__(self, *args):\n      # TODO(b/74355905): Support argument and return value nested structures,\n      # and tensor-like objects such as SparseTensors.\n      with errors.raise_exception_on_not_ok_status() as status:\n        if self._session._created_with_new_api:\n          return tf_session.TF_SessionRunCallable(\n              self._session._session, self._handle, args, status, None)\n        else:\n          return tf_session.TF_DeprecatedSessionRunCallable(\n              self._session._session, self._handle, args, status, None)\n\n    def __del__(self):\n      if self._handle is not None:\n        with errors.raise_exception_on_not_ok_status() as status:\n          if self._session._created_with_new_api:\n            tf_session.TF_SessionReleaseCallable(\n                self._session._session, self._handle, status)\n          else:\n            tf_session.TF_DeprecatedSessionReleaseCallable(\n                self._session._session, self._handle, status)\n  # pylint: enable=protected-access\n\n  # TODO(b/74355905): Reimplement `Session.make_callable()` using this method\n  # where possible.\n  def _make_callable_from_options(self, callable_options):\n    \"\"\"Returns a handle to a \"callable\" with the given options.\n\n    Args:\n      callable_options: A `CallableOptions` protocol buffer message describing\n        the computation that will be performed by the callable.\n\n    Returns:\n      A handle to the new callable."
},
{
    "Id": 247,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/ebeb598c2d1f341d6d641bf58c370cf7b43f6e37",
    "Violation": "missing",
    "Bug report": " Correctly check shape not None in Keras add_weight. When calling Keras add_weight with a np list, as written the `shape or ()` \"trick\" results in the following exception: \"\"\"ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\"\"\" This change fixes the problem by using an explicit `if`.",
    "Number of deleted lines": 1,
    "Deleted lines": "        `trainable` must not be set to `True`.\n      aggregation: Indicates how a distributed variable will be aggregated.\n        Accepted values are constants defined in the class\n        `tf.VariableAggregation`.\n      **kwargs: Additional keyword arguments. Accepted values are `getter` and\n        `collections`.\n\n    Returns:\n      The created variable.  Usually either a `Variable` or `ResourceVariable`\n      instance.  If `partitioner` is not `None`, a `PartitionedVariable`\n      instance is returned.\n\n    Raises:\n      RuntimeError: If called with partioned variable regularization and\n        eager execution is enabled.\n      ValueError: When giving unsupported dtype and no initializer or when\n        trainable has been set to True with synchronization set as `ON_READ`.\n    \"\"\"\n    shape = shape or ()\n    # Validate optional keyword arguments.\n    for kwarg in kwargs:\n      if kwarg not in ['getter', 'collections', 'experimental_autocast']:\n        raise TypeError('Unknown keyword argument:', kwarg)\n    getter = kwargs.pop('getter', None)\n    collections = kwargs.pop('collections', None)\n    # 'experimental_autocast' can be set to False by the caller to indicate an\n    # AutoCastVariable should never be created.\n    autocast = kwargs.pop('experimental_autocast', True)\n\n    if dtype is None:\n      dtype = self.dtype or backend.floatx()\n    dtype = dtypes.as_dtype(dtype)\n    if self._dtype is None:\n      self._dtype = dtype.base_dtype.name\n    initializer = initializers.get(initializer)\n    regularizer = regularizers.get(regularizer)\n    constraint = constraints.get(constraint)\n\n    if synchronization == tf_variables.VariableSynchronization.ON_READ:"
},
{
    "Id": 248,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c7c4a42c4372ca560ea415fe3a798e18286cedec",
    "Violation": "improper",
    "Bug report": "Fix an error in keras input_layer.Input() dtype type checking. ",
    "Number of deleted lines": 2,
    "Deleted lines": "      if input_shape and batch_input_shape:\n        raise ValueError('Only provide the input_shape OR '\n                         'batch_input_shape argument to '\n                         'InputLayer, not both at the same time.')\n      batch_size = batch_input_shape[0]\n      input_shape = batch_input_shape[1:]\n    if kwargs:\n      raise ValueError('Unrecognized keyword arguments:', kwargs.keys())\n\n    if not name:\n      prefix = 'input'\n      name = prefix + '_' + str(backend.get_uid(prefix))\n\n    if not dtype:\n      if input_tensor is None:\n        dtype = backend.floatx()\n      else:\n        dtype = backend.dtype(input_tensor)\n    elif input_tensor and input_tensor.dtype != dtype:\n      raise ValueError('`input_tensor.dtype` differs from `dtype`.')\n    super(InputLayer, self).__init__(dtype=dtype, name=name)\n    self.built = True\n    self.sparse = sparse\n    self.batch_size = batch_size\n    self.supports_masking = True\n\n    if isinstance(input_shape, tensor_shape.TensorShape):\n      input_shape = tuple(input_shape.as_list())\n\n    if input_tensor is None:\n      if input_shape is not None:\n        batch_input_shape = (batch_size,) + tuple(input_shape)\n      else:\n        batch_input_shape = None\n      graph = backend.get_graph()\n      with graph.as_default():\n        # In graph mode, create a graph placeholder to call the layer on.\n        if sparse:\n          input_tensor = backend.placeholder(\n              shape=batch_input_shape,"
},
{
    "Id": 249,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a5b8d6c4694e4cd3e3cc4a162053ab0dfa6e174f",
    "Violation": "insufficient",
    "Bug report": "Relax the check for whether the relevant aggregation dimensions are known ahead of time.",
    "Number of deleted lines": 1,
    "Deleted lines": "    shift: A `Tensor` containing the value by which to shift the data for\n      numerical stability, or `None` if no shift is to be performed. A shift\n      close to the true mean provides the most numerically stable results.\n    keep_dims: produce statistics with the same dimensionality as the input.\n    name: Name used to scope the operations that compute the sufficient stats.\n\n  Returns:\n    Four `Tensor` objects of the same type as `x`:\n\n    * the count (number of elements to average over).\n    * the (possibly shifted) sum of the elements in the array.\n    * the (possibly shifted) sum of squares of the elements in the array.\n    * the shift by which the mean must be corrected or None if `shift` is None.\n  \"\"\"\n  axes = list(set(axes))\n  with ops.name_scope(name, \"sufficient_statistics\", [x, shift]):\n    x = ops.convert_to_tensor(x, name=\"x\")\n    x_shape = x.get_shape()\n    if x_shape.is_fully_defined():\n      counts = 1\n      for d in axes:\n        counts *= x_shape[d].value\n      counts = constant_op.constant(counts, dtype=x.dtype)\n    else:  # shape needs to be inferred at runtime.\n      x_dims = array_ops.gather(\n          math_ops.cast(array_ops.shape(x), x.dtype), axes)\n      counts = math_ops.reduce_prod(x_dims, name=\"count\")\n    if shift is not None:\n      shift = ops.convert_to_tensor(shift, name=\"shift\")\n      m_ss = math_ops.sub(x, shift)\n      v_ss = math_ops.squared_difference(x, shift)\n    else:  # no shift.\n      m_ss = x\n      v_ss = math_ops.square(x)\n    m_ss = math_ops.reduce_sum(m_ss, axes, keep_dims=keep_dims, name=\"mean_ss\")\n    v_ss = math_ops.reduce_sum(v_ss, axes, keep_dims=keep_dims, name=\"var_ss\")\n  return counts, m_ss, v_ss, shift\n\n"
},
{
    "Id": 250,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/0d65cfaab050295c311d9f2fb28388435359db27",
    "Violation": "insufficient",
    "Bug report": " Add an additional NoneType check when converting a traced tensor to a `KerasTensor`.",
    "Number of deleted lines": 1,
    "Deleted lines": "    return self._type_spec\n\n  @property\n  def shape(self):\n    \"\"\"Returns the `TensorShape` symbolically inferred for this Keras output.\"\"\"\n    # TODO(kaftan): This is only valid for normal/sparse/ragged tensors.\n    # may need to raise an error when it's not valid for a type_spec,\n    # but some keras code (e.g. build-related stuff) will likely fail when\n    # it can't access shape or dtype\n    return self._type_spec._shape  # pylint: disable=protected-access\n\n  @classmethod\n  def from_tensor(cls, tensor):\n    \"\"\"Convert a traced (composite)tensor to a representative KerasTensor.\"\"\"\n    if isinstance(tensor, ops.Tensor):\n      name = getattr(tensor, 'name', None)\n      type_spec = type_spec_module.type_spec_from_value(tensor)\n      inferred_value = None\n      if (type_spec.dtype == dtypes.int32 and type_spec.shape.rank < 2):\n        # If this tensor might be representing shape information,\n        # (dtype=int32, rank of 0 or 1, not too large to represent a shape)\n        # we attempt to capture any value information tensorflow's\n        # shape handling can extract from the current scratch graph.\n        #\n        # Even though keras layers each trace in their own scratch\n        # graph, this shape value info extraction allows us to capture\n        # a sizable and useful subset of the C++ shape value inference TF can do\n        # if all tf ops appear in the same graph when using shape ops.\n        #\n        # Examples of things this cannot infer concrete dimensions for\n        # that the full single-graph C++ shape inference sometimes can are:\n        # * cases where the shape tensor is cast out of int32 before being\n        #   manipulated w/ floating point numbers then converted back\n        # * cases where int32 tensors w/ rank >= 2 are manipulated before being\n        #   used as a shape tensor\n        # * cases where int32 tensors too large to represent shapes are\n        #   manipulated to a smaller size before being used as a shape tensor\n        inferred_value = array_ops.ones(shape=tensor).shape\n        if inferred_value.dims:"
},
{
    "Id": 251,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/31849c61e0432009baabdfafc2ec1a1aed1a40e8",
    "Violation": "insufficient",
    "Bug report": " Small change in tf.nn.sufficient_statistics to guard against unknown shapes. Use is_fully_defined instead of checking shape.dims[d] as the dims variable may be None, if the rank is unknown.",
    "Number of deleted lines": 1,
    "Deleted lines": "    keepdims: Alias for keep_dims.\n\n  Returns:\n    Four `Tensor` objects of the same type as `x`:\n\n    * the count (number of elements to average over).\n    * the (possibly shifted) sum of the elements in the array.\n    * the (possibly shifted) sum of squares of the elements in the array.\n    * the shift by which the mean must be corrected or None if `shift` is None.\n  \"\"\"\n  axes = list(set(axes))\n  keep_dims = deprecated_argument_lookup(\n      \"keepdims\", keepdims, \"keep_dims\", keep_dims)\n  if keep_dims is None:\n    keep_dims = False\n  with ops.name_scope(name, \"sufficient_statistics\", [x, shift]):\n    x = ops.convert_to_tensor(x, name=\"x\")\n    x_shape = x.get_shape()\n    if all(x_shape.dims[d].value is not None for d in axes):\n      counts = 1\n      for d in axes:\n        counts *= x_shape.dims[d].value\n      counts = constant_op.constant(counts, dtype=x.dtype)\n    else:  # shape needs to be inferred at runtime.\n      x_dims = array_ops.gather(\n          math_ops.cast(array_ops.shape(x), x.dtype), axes)\n      counts = math_ops.reduce_prod(x_dims, name=\"count\")\n    if shift is not None:\n      shift = ops.convert_to_tensor(shift, name=\"shift\")\n      m_ss = math_ops.subtract(x, shift)\n      v_ss = math_ops.squared_difference(x, shift)\n    else:  # no shift.\n      m_ss = x\n      v_ss = math_ops.square(x)\n    m_ss = math_ops.reduce_sum(m_ss, axes, keepdims=keep_dims, name=\"mean_ss\")\n    v_ss = math_ops.reduce_sum(v_ss, axes, keepdims=keep_dims, name=\"var_ss\")\n  return counts, m_ss, v_ss, shift\n\n"
},
{
    "Id": 252,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/30bd9d5bcc64097d21872486a5726d756ed7067b",
    "Violation": "insufficient",
    "Bug report": " Explicitly handle Tensors in start & stop. The current check was doing a identity check in order to handle both tensors and integers. This becomes problematic when enabling tensor equality. Instead we explicitly check for Tensor type and only compare with sys.maxsize for non-Tensors.",
    "Number of deleted lines": 2,
    "Deleted lines": "  (isinstance(slice_spec, ops.Tensor) and slice_spec.dtype == dtypes.bool) or \\\n  (isinstance(slice_spec, np.ndarray) and slice_spec.dtype == bool):\n    return boolean_mask(tensor=tensor, mask=slice_spec)\n\n  if not isinstance(slice_spec, (list, tuple)):\n    slice_spec = [slice_spec]\n\n  begin, end, strides = [], [], []\n  index = 0\n\n  new_axis_mask, shrink_axis_mask = 0, 0\n  begin_mask, end_mask = 0, 0\n  ellipsis_mask = 0\n  for s in slice_spec:\n    if isinstance(s, _BaseSlice):\n      # python doesn't always use None when constructing ranges\n      # for example a[:] gives slice(None,sys.maxsize,None)\n      # whereas a[::1] gives slice(None,None,None)\n      if s.start is not None and s.start is not sys.maxsize:\n        _check_index(s.start)\n        begin.append(s.start)\n      else:\n        begin.append(0)\n        begin_mask |= (1 << index)\n      if s.stop is not None and s.stop != sys.maxsize:\n        _check_index(s.stop)\n        end.append(s.stop)\n      else:\n        end.append(0)\n        end_mask |= (1 << index)\n      if s.step is not None:\n        _check_index(s.step)\n        strides.append(s.step)\n      else:\n        strides.append(1)\n    elif s is Ellipsis:\n      begin.append(0)\n      end.append(0)\n      strides.append(1)\n      ellipsis_mask |= (1 << index)\n    elif s is newaxis:\n      begin.append(0)\n      end.append(0)\n      strides.append(1)\n      new_axis_mask |= (1 << index)"
},
{
    "Id": 253,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/fb1c4cd8283f262bca95ccd04df6f9eb4ae1da0c",
    "Violation": "missing",
    "Bug report": "Add None check for seq_len_mask before reshape.",
    "Number of deleted lines": 4,
    "Deleted lines": "      lambda m: ops.convert_to_tensor(m, name=\"memory\"), memory)\n  if check_inner_dims_defined:\n    def _check_dims(m):\n      if not m.get_shape()[2:].is_fully_defined():\n        raise ValueError(\"Expected memory %s to have fully defined inner dims, \"\n                         \"but saw shape: %s\" % (m.name, m.get_shape()))\n    nest.map_structure(_check_dims, memory)\n  if memory_sequence_length is None:\n    seq_len_mask = None\n  else:\n    seq_len_mask = array_ops.sequence_mask(\n        memory_sequence_length,\n        maxlen=array_ops.shape(nest.flatten(memory)[0])[1],\n        dtype=nest.flatten(memory)[0].dtype)\n  def _maybe_mask(m, seq_len_mask):\n    rank = m.get_shape().ndims\n    rank = rank if rank is not None else array_ops.rank(m)\n    extra_ones = array_ops.ones(rank - 2, dtype=dtypes.int32)\n    seq_len_mask = array_ops.reshape(\n        seq_len_mask,\n        array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0))\n    return m * seq_len_mask if memory_sequence_length is not None else m\n  return nest.map_structure(lambda m: _maybe_mask(m, seq_len_mask), memory)\n\n\nclass _BaseAttentionMechanism(AttentionMechanism):\n  \"\"\"A base AttentionMechanism class providing common functionality.\n\n  Common functionality includes:\n    1. Storing the query and memory layers.\n    2. Preprocessing and storing the memory.\n  \"\"\"\n\n  def __init__(self, query_layer, memory, memory_sequence_length=None,\n               memory_layer=None, check_inner_dims_defined=True, name=None):\n    \"\"\"Construct base AttentionMechanism class.\n\n    Args:\n      query_layer: Callable.  Instance of `tf.layers.Layer`.  The layer's depth\n        must match the depth of `memory_layer`.  If `query_layer` is not\n        provided, the shape of `query` must match that of `memory_layer`.\n      memory: The memory to query; usually the output of an RNN encoder.  This"
},
{
    "Id": 254,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a0ca4bcb81dfd07fdb1c7872b5852f84cfc1a081",
    "Violation": "improper",
    "Bug report": "Fix separable convolution bias check",
    "Number of deleted lines": 1,
    "Deleted lines": "  def call(self, inputs):\n    if self.data_format == 'channels_first':\n      # Reshape to channels last\n      inputs = array_ops.transpose(inputs, (0, 2, 3, 1))\n\n    # Apply the actual ops.\n    outputs = nn.separable_conv2d(\n        inputs,\n        self.depthwise_kernel,\n        self.pointwise_kernel,\n        strides=(1,) + self.strides + (1,),\n        padding=self.padding.upper(),\n        rate=self.dilation_rate)\n\n    if self.data_format == 'channels_first':\n      # Reshape to channels first\n      outputs = array_ops.transpose(outputs, (0, 3, 1, 2))\n\n    if self.bias:\n      outputs = nn.bias_add(\n          outputs,\n          self.bias,\n          data_format=utils.convert_data_format(self.data_format, ndim=4))\n\n    if self.activation is not None:\n      return self.activation(outputs)\n    return outputs\n\n\ndef separable_conv2d(inputs,\n                     filters,\n                     kernel_size,\n                     strides=(1, 1),\n                     padding='valid',\n                     data_format='channels_last',\n                     dilation_rate=(1, 1),\n                     depth_multiplier=1,\n                     activation=None,\n                     use_bias=True,"
},
{
    "Id": 255,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1ff493ed1a2059f82f7607a7f0a0aa2ce8d5a542",
    "Violation": "improper",
    "Bug report": "Replace a defensive check with TF_RET_CHECK",
    "Number of deleted lines": 4,
    "Deleted lines": "    *out_can_pick_device = true;\n  }\n\n#define FAILED_TO_PICK_DEVICE(failing_status) \\\n  do {                                        \\\n    if (out_can_pick_device) {                \\\n      *out_can_pick_device = false;           \\\n      return Status::OK();                    \\\n    } else {                                  \\\n      return failing_status;                  \\\n    }                                         \\\n  } while (false)\n\n  TF_RET_CHECK(!device_names.empty()) << \"No devices to choose from\";\n  DCHECK_NE(out_can_pick_device == nullptr, out_device_picked == nullptr);\n\n  absl::flat_hash_set<absl::string_view> device_names_set;\n  for (absl::string_view device_name : device_names) {\n    if (!device_name.empty()) {\n      // TODO(sanjoy): Figure out if this is necessary.\n      device_names_set.insert(device_name);\n    }\n  }\n\n  absl::optional<absl::string_view> maybe_gpu_device;\n  absl::optional<absl::string_view> maybe_cpu_device;\n  absl::optional<absl::string_view> maybe_unknown_device;\n\n  for (absl::string_view device_name : device_names_set) {\n    DeviceNameUtils::ParsedName parsed_name;\n    TF_RET_CHECK(DeviceNameUtils::ParseFullName(device_name, &parsed_name))\n        << device_name;\n    if (parsed_name.type == \"GPU\") {\n      if (maybe_gpu_device) {\n        FAILED_TO_PICK_DEVICE(errors::Internal(\n            \"Multiple GPU devices \", absl::StrJoin(device_names, \", \")));\n      }\n      maybe_gpu_device = device_name;\n    } else if (parsed_name.type == \"CPU\") {\n      if (maybe_cpu_device) {\n        FAILED_TO_PICK_DEVICE(errors::Internal(\n            \"Multiple CPU devices \", absl::StrJoin(device_names, \", \")));"
},
{
    "Id": 256,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/201982013046116767545cda18137b38abb39468",
    "Violation": "missing",
    "Bug report": "toco: Fix missing check for buffer in ResizeBilinear.",
    "Number of deleted lines": 0,
    "Deleted lines": "\nvoid ProcessResizeBilinearOperator(Model* model, ResizeBilinearOperator* op) {\n  CHECK_EQ(op->inputs.size(), 2);\n  CHECK_EQ(op->outputs.size(), 1);\n\n  if (!model->arrays[op->inputs[0]]->has_shape() ||\n      !model->arrays[op->inputs[1]]->has_shape()) {\n    return;\n  }\n  const auto& input_data_shape = model->arrays[op->inputs[0]]->shape();\n\n  const string& output_size_name = op->inputs[1];\n  const auto& output_size_array = *model->arrays[output_size_name];\n  CHECK(output_size_array.data_type == ArrayDataType::kInt32);\n  CHECK(output_size_array.has_shape());\n  const auto& output_size_shape = output_size_array.shape();\n  CHECK_EQ(output_size_shape.dimensions_count(), 1);\n  CHECK_EQ(output_size_shape.dims(0), 2);\n  std::vector<int32> output_shape =\n      output_size_array.GetBuffer<ArrayDataType::kInt32>().data;\n  model->arrays[op->outputs[0]]->copy_shape(\n      Shape({input_data_shape.dims(0), output_shape[0], output_shape[1],\n             input_data_shape.dims(3)}));\n}\n\nvoid ProcessLstmCellOperator(Model* model, LstmCellOperator* op) {\n  // I/O arrays should be allocated on creation of op.\n  QCHECK_EQ(op->inputs.size(), LstmCellOperator::NUM_INPUTS);\n  QCHECK_EQ(op->outputs.size(), LstmCellOperator::NUM_OUTPUTS);\n\n  const auto& input_array =\n      *model->arrays[op->inputs[LstmCellOperator::DATA_INPUT]];\n  // Yield until all input dims have been resolved.\n  if (!input_array.has_shape()) {\n    return;\n  }\n  const auto& input_shape = input_array.shape();\n  CHECK_GE(input_shape.dimensions_count(), 2);"
},
{
    "Id": 257,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c676a2d7ce8884aad59ca9cd5f45e9b851574cac",
    "Violation": "missing",
    "Bug report": " [tensorflow] Add a check that strided slice op strides argument has reasonable size",
    "Number of deleted lines": 1,
    "Deleted lines": "  // remembers the sparse index that a dimension comes from, instead of dense\n  // index. A -1 in this vector means there the index is not from the sparse\n  // input.\n  gtl::InlinedVector<int32, 4> final_shape_gather_indices_sparse;\n  gtl::InlinedVector<int32, 4> input_shape_gather_indices_sparse;\n  // The dense indexed shrink mask is which processing dimensions\n  // should be shrunk. For example, if foo.shape = (10,10,10,10)\n  // foo[3, ..., 5] has sparse_shrink_axis_mask of 0x5 and\n  // dense_shrink_axis_mask of 0x9, yielding a final shape (10,10).\n  int32 shrink_axis_mask;\n};\n\n}  // namespace\n\ntemplate <class T>\nstatic Status TF_MUST_USE_RESULT BuildDenseSpec(\n    const StridedSliceSparseSpec& sparse, StridedSliceDenseSpec* dense) {\n  if (dense->dims < 0) {\n    return errors::InvalidArgument(\"Unexpected negative dense.dims\");\n  }\n\n  // Build expanded begin, end, strides, begin_mask, end_mask\n  // to remove any ellipsis\n  dense->begin.resize(dense->dims);\n  dense->end.resize(dense->dims);\n  dense->strides.resize(dense->dims);\n  dense->input_shape_gather_indices_sparse.resize(dense->dims);\n  // What indices to get the final shape from.\n  dense->begin_mask = 0;\n  dense->end_mask = 0;\n  dense->shrink_axis_mask = 0;\n  {\n    int full_index = 0;\n\n    const T* const strides_flat = sparse.strides_tensor.vec<T>().data();\n    dense->begin_valid = sparse.begin_tensor != nullptr;\n    dense->end_valid = sparse.end_tensor != nullptr;\n\n    const T* const begin_flat = sparse.begin_tensor != nullptr"
},
{
    "Id": 258,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f61175812426009a4c96e51befb2951612990903",
    "Violation": "missing",
    "Bug report": "To add a check of input_dims greater than zero in embedding layers. ",
    "Number of deleted lines": 0,
    "Deleted lines": "               embeddings_constraint=None,\n               mask_zero=False,\n               input_length=None,\n               **kwargs):\n    if 'input_shape' not in kwargs:\n      if input_length:\n        kwargs['input_shape'] = (input_length,)\n      else:\n        kwargs['input_shape'] = (None,)\n    dtype = kwargs.pop('dtype', K.floatx())\n    # We set autocast to False, as we do not want to cast floating- point inputs\n    # to self.dtype. In call(), we cast to int32, and casting to self.dtype\n    # before casting to int32 might cause the int32 values to be different due\n    # to a loss of precision.\n    kwargs['autocast'] = False\n    super(Embedding, self).__init__(dtype=dtype, **kwargs)\n\n    self.input_dim = input_dim\n    self.output_dim = output_dim\n    self.embeddings_initializer = initializers.get(embeddings_initializer)\n    self.embeddings_regularizer = regularizers.get(embeddings_regularizer)\n    self.activity_regularizer = regularizers.get(activity_regularizer)\n    self.embeddings_constraint = constraints.get(embeddings_constraint)\n    self.mask_zero = mask_zero\n    self.supports_masking = mask_zero\n    self.input_length = input_length\n    self._supports_ragged_inputs = True\n\n  @tf_utils.shape_type_conversion\n  def build(self, input_shape):\n    # Note: most sparse optimizers do not have GPU kernels defined. When\n    # building graphs, the placement algorithm is able to place variables on CPU\n    # since it knows all kernels using the variable only exist on CPU.\n    # When eager execution is enabled, the placement decision has to be made\n    # right now. Checking for the presence of GPUs to avoid complicating the\n    # TPU codepaths which can handle sparse optimizers.\n    if context.executing_eagerly() and context.context().num_gpus():\n      with ops.device('cpu:0'):"
},
{
    "Id": 259,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a0dc73569fc193c1ce26a7bd2d4a8776e7b813ac",
    "Violation": "missing",
    "Bug report": "add check for empty cs_prev_tensor",
    "Number of deleted lines": 0,
    "Deleted lines": "                            &xh_tensor));\n\n    Tensor gates_tensor;\n    OP_REQUIRES_OK(ctx,\n                   ctx->allocate_temp(DataTypeToEnum<T>::v(),\n                                      TensorShape({batch_size, cell_size * 4}),\n                                      &gates_tensor));\n\n    const Device& device = ctx->eigen_device<Device>();\n\n    // Sanity check that each of the tensors have the required NDIMS.\n    OP_REQUIRES(ctx, x_tensor->dims() == 2,\n                errors::InvalidArgument(\"x_tensor must be rank 2 but is rank \",\n                                        x_tensor->dims(), \".\"));\n    OP_REQUIRES(\n        ctx, cs_prev_tensor->dims() == 2,\n        errors::InvalidArgument(\"cs_prev_tensor must be rank 2 but is rank \",\n                                cs_prev_tensor->dims(), \".\"));\n    OP_REQUIRES(\n        ctx, h_prev_tensor->dims() == 2,\n        errors::InvalidArgument(\"h_prev_tensor must be rank 2 but is rank \",\n                                h_prev_tensor->dims(), \".\"));\n    OP_REQUIRES(ctx, w_tensor->dims() == 2,\n                errors::InvalidArgument(\"w_tensor must be rank 2 but is rank \",\n                                        w_tensor->dims(), \".\"));\n    OP_REQUIRES(\n        ctx, wci_tensor->dims() == 1,\n        errors::InvalidArgument(\"wci_tensor must be rank 1 but is rank \",\n                                wci_tensor->dims(), \".\"));\n    OP_REQUIRES(\n        ctx, wcf_tensor->dims() == 1,\n        errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",\n                                wci_tensor->dims(), \".\"));\n    OP_REQUIRES(\n        ctx, wco_tensor->dims() == 1,\n        errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",\n                                wco_tensor->dims(), \".\"));\n    OP_REQUIRES(ctx, b_tensor->dims() == 1,"
},
{
    "Id": 260,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/258233804f2bc92b4bdb9714b396aed34b53ff0d",
    "Violation": "missing",
    "Bug report": " sanity check of empty tensor on avgpool3d_grad",
    "Number of deleted lines": 0,
    "Deleted lines": "  engine cpu_engine_ = engine(engine::kind::cpu, 0);\n};  // MklAvgPoolingOp\n\ntemplate <class Device, class T, bool native_format = false>\nclass MklAvgPoolingGradOp : public MklPoolingBackwardOpBase<T> {\n public:\n  explicit MklAvgPoolingGradOp(OpKernelConstruction* context)\n      : MklPoolingBackwardOpBase<T>(context) {\n    this->native_format_ = native_format;\n  }\n\n  void Compute(OpKernelContext* context) override {\n    try {\n      const Tensor& orig_input_tensor =\n          MklGetInput(context, kInputTensorIndexInputShape);\n      const Tensor& grad_tensor =\n          MklGetInput(context, kInputTensorIndexInputGradient);\n\n      MklDnnShape orig_input_mkl_shape, grad_mkl_shape;\n      GetMklShape(context, kInputTensorIndexInputShape, &orig_input_mkl_shape,\n                  this->native_format_);\n      GetMklShape(context, kInputTensorIndexInputGradient, &grad_mkl_shape,\n                  this->native_format_);\n      if (!context->status().ok()) return;\n\n      // Used to allocate output_diff_src/diff_src.\n      MklDnnData<T> grad_dnn_data(&cpu_engine_);\n      MklPoolParameters pool_params;\n      auto shape_vec = orig_input_tensor.vec<int32>();\n      TensorShape orig_input_shape;\n      for (int i = 0; i < orig_input_tensor.NumElements(); i++) {\n        (void)orig_input_shape.AddDimWithStatus(shape_vec(i));\n      }\n\n      bool is_pool2d = (this->ksize_.size() == 4);\n      this->InitMklPoolParameters(context, &pool_params, orig_input_mkl_shape,\n                                  orig_input_shape);\n"
},
{
    "Id": 261,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a3d9f9be9ac2296615644061b40cefcee341dcc4",
    "Violation": "missing",
    "Bug report": " Add missing validation to pooling_ops_3d ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n    // For maxpooling3d, tensor_in should have 5 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 5,\n                errors::InvalidArgument(\"tensor_in must be 5-dimensional\"));\n    OP_REQUIRES(context, tensor_out.dims() == 5,\n                errors::InvalidArgument(\"tensor_out must be 5-dimensional\"));\n    // For maxpooling3d, out_grad_backprop should have 5 dimensions.\n    OP_REQUIRES(\n        context, out_grad_backprop.dims() == 5,\n        errors::InvalidArgument(\"out_grad_backprop must be 5-dimensional\"));\n\n    Pool3dParameters params{context,  ksize_,       stride_,\n                            padding_, data_format_, tensor_in.shape()};\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {2}, 0, tensor_out.shape(), &output));\n\n    LaunchMaxPooling3dGradGradOp<Device, T>::launch(\n        context, params, tensor_in, tensor_out, out_grad_backprop, output);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\n#define REGISTER_KERNELS(D, T)                                             \\\n  REGISTER_KERNEL_BUILDER(                                                 \\\n      Name(\"MaxPool3D\").Device(DEVICE_##D).TypeConstraint<T>(\"T\"),         \\\n      Pooling3DOp<D##Device, T, MAX>);                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPool3DGrad\")                            \\\n                              .Device(DEVICE_##D)                          \\\n                              .TypeConstraint<T>(\"T\")                      \\\n                              .TypeConstraint<T>(\"TInput\"),                \\\n                          MaxPooling3dGradOp<D##Device, T>);               \\"
},
{
    "Id": 262,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/27bd8aaa7b58d2591fed43a6c245f3037664cfb1",
    "Violation": "missing",
    "Bug report": "Fix another Eigen missing validation ",
    "Number of deleted lines": 0,
    "Deleted lines": "                out_reshaped.CopyFrom(*out, TensorShape({batch_size, d1, d3})),\n                errors::Internal(\"Failed to reshape output from \",\n                                 out->shape().DebugString()));\n    LaunchBatchBandedTriangularSolve<Scalar>::Launch(\n        ctx, in0_reshaped, in1_reshaped, adjoint_, lower_, bcast,\n        &out_reshaped);\n  }\n\n private:\n  void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,\n                            const Tensor& in1) {\n    OP_REQUIRES(\n        ctx, in0.dims() >= 2,\n        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));\n\n    OP_REQUIRES(\n        ctx, in1.dims() >= 2,\n        errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1.dims()));\n  }\n  bool lower_;\n  bool adjoint_;\n};\n\n#define REGISTER_BANDED_TRIANGULAR_SOLVE_CPU(TYPE)        \\\n  REGISTER_KERNEL_BUILDER(Name(\"BandedTriangularSolve\")   \\\n                              .Device(DEVICE_CPU)         \\\n                              .TypeConstraint<TYPE>(\"T\"), \\\n                          BandedTriangularSolveOpCpu<TYPE>);\n\nREGISTER_BANDED_TRIANGULAR_SOLVE_CPU(float);\nREGISTER_BANDED_TRIANGULAR_SOLVE_CPU(double);\nREGISTER_BANDED_TRIANGULAR_SOLVE_CPU(complex64);\nREGISTER_BANDED_TRIANGULAR_SOLVE_CPU(complex128);\n\n}  // namespace tensorflow\n"
},
{
    "Id": 263,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/dedac5053f1ca2d6a7820e330714e50d2d724cee",
    "Violation": "missing",
    "Bug report": " Fix edge case bug in handling FP16 weights in XNNPACK delegate. Quasi-static tensors may become subgraph outputs after partitioning; we need to explicitly exclude them from outputs and treat as static tensors.",
    "Number of deleted lines": 3,
    "Deleted lines": "  // pre-unpacked in DelegatePrepare.\n  std::unordered_set<int> static_unpack_nodes_;\n#if !defined(__EMSCRIPTEN__) || defined(__EMSCRIPTEN_PTHREADS__)\n  // Thread pool with smart-pointer for lifetime management.\n  std::unique_ptr<pthreadpool, decltype(&pthreadpool_destroy)> threadpool_{\n      nullptr, &pthreadpool_destroy};\n#endif\n};\n\nclass Subgraph {\n public:\n  static Subgraph* Create(TfLiteContext* context,\n                          const TfLiteDelegateParams* params,\n                          const Delegate* delegate) {\n    // Convert subgraph inputs and outputs to hash sets for faster lookup.\n    const std::unordered_set<int> inputs(\n        &params->input_tensors->data[0],\n        &params->input_tensors->data[params->input_tensors->size]);\n    const std::unordered_set<int> outputs(\n        &params->output_tensors->data[0],\n        &params->output_tensors->data[params->output_tensors->size]);\n    std::unordered_set<int> externals(outputs);\n\n    TfLiteIntArray* execution_plan;\n    if (context->GetExecutionPlan(context, &execution_plan) != kTfLiteOk) {\n      return nullptr;\n    }\n\n    xnn_subgraph_t subgraph_ptr = nullptr;\n    xnn_status status = xnn_create_subgraph(\n        /*external_value_ids=*/context->tensors_size, /*flags=*/0,\n        &subgraph_ptr);\n    if (status != xnn_status_success) {\n      TF_LITE_KERNEL_LOG(context, \"failed to create XNNPACK subgraph\");\n      return nullptr;\n    }\n\n    // Smart pointer to automatically release subgraph on exit.\n    std::unique_ptr<xnn_subgraph, decltype(&xnn_delete_subgraph)> subgraph(\n        subgraph_ptr, &xnn_delete_subgraph);\n"
},
{
    "Id": 264,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/ce589223a5fa78cb12efaf1efd1d8d0e5507bd08",
    "Violation": "missing",
    "Bug report": " Update nn_ops.py. Added check for pooling_ratio",
    "Number of deleted lines": 0,
    "Deleted lines": "    seed: An optional `int`.  Defaults to `0`.  If set to be non-zero, the\n      random number generator is seeded by the given seed.  Otherwise it is\n      seeded by a random seed.\n    name: A name for the operation (optional).\n\n  Returns:\n  A tuple of `Tensor` objects (`output`, `row_pooling_sequence`,\n  `col_pooling_sequence`).\n    output: Output `Tensor` after fractional max pooling.  Has the same type as\n      `value`.\n    row_pooling_sequence: A `Tensor` of type `int64`.\n    col_pooling_sequence: A `Tensor` of type `int64`.\n\n  References:\n    Fractional Max-Pooling:\n      [Graham, 2015](https://arxiv.org/abs/1412.6071)\n      ([pdf](https://arxiv.org/pdf/1412.6071.pdf))\n  \"\"\"\n  pooling_ratio = _get_sequence(pooling_ratio, 2, 3, \"pooling_ratio\")\n\n  if seed == 0:\n    return gen_nn_ops.fractional_max_pool(value, pooling_ratio, pseudo_random,\n                                          overlapping, deterministic=False,\n                                          seed=0, seed2=0, name=name)\n  else:\n    seed1, seed2 = random_seed.get_seed(seed)\n    return gen_nn_ops.fractional_max_pool(value, pooling_ratio, pseudo_random,\n                                          overlapping, deterministic=True,\n                                          seed=seed1, seed2=seed2, name=name)\n\n\n@tf_export(v1=[\"nn.fractional_avg_pool\"])\n@dispatch.add_dispatch_support\n@deprecation.deprecated(date=None, instructions=\"`seed2` and `deterministic` \"\n                        \"args are deprecated.  Use fractional_avg_pool_v2.\")\ndef fractional_avg_pool(value,\n                        pooling_ratio,\n                        pseudo_random=False,"
},
{
    "Id": 265,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/63feaf321165e1e2795f43e3834c007364921df6",
    "Violation": "missing",
    "Bug report": "Add check for raster bits.",
    "Number of deleted lines": 0,
    "Deleted lines": "  GifFileType* gif_file =\n      DGifOpen(static_cast<void*>(&info), &input_callback, &error_code);\n  const auto cleanup = gtl::MakeCleanup([gif_file]() {\n    int error_code = D_GIF_SUCCEEDED;\n    if (gif_file && DGifCloseFile(gif_file, &error_code) != GIF_OK) {\n      LOG(WARNING) << \"Fail to close gif file, reason: \"\n                   << GifErrorStringNonNull(error_code);\n    }\n  });\n  if (error_code != D_GIF_SUCCEEDED) {\n    *error_string = absl::StrCat(\"failed to open gif file: \",\n                                 GifErrorStringNonNull(error_code));\n    return nullptr;\n  }\n\n  if (DGifSlurp(gif_file) != GIF_OK) {\n    *error_string = absl::StrCat(\"failed to slurp gif file: \",\n                                 GifErrorStringNonNull(gif_file->Error));\n    LOG(ERROR) << *error_string;\n    return nullptr;\n  }\n\n  if (gif_file->ImageCount <= 0) {\n    *error_string = \"gif file does not contain any image\";\n    return nullptr;\n  }\n\n  int target_num_frames = gif_file->ImageCount;\n\n  // Don't request more memory than needed for each frame, preventing OOM\n  int max_frame_width = 0;\n  int max_frame_height = 0;\n  for (int k = 0; k < target_num_frames; k++) {\n    SavedImage* si = &gif_file->SavedImages[k];\n    if (max_frame_height < si->ImageDesc.Height)\n      max_frame_height = si->ImageDesc.Height;\n    if (max_frame_width < si->ImageDesc.Width)\n      max_frame_width = si->ImageDesc.Width;"
},
{
    "Id": 266,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e5b0eec199c2d03de54fd6a7fd9275692218e2bc",
    "Violation": "missing",
    "Bug report": " [lite] Add validation check for dilation height/width to be positive integers.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  bool has_bias = NumInputs(node) == 3;\n\n  TF_LITE_ENSURE(context, has_bias || NumInputs(node) == 2);\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* filter;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kFilterTensor, &filter));\n  const TfLiteTensor* bias = nullptr;\n\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);\n\n  const TfLiteType data_type = input->type;\n\n  const TfLiteType filter_type = filter->type;\n  const bool is_hybrid =\n      data_type == kTfLiteFloat32 && filter_type == kTfLiteInt8;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||\n                     data_type == kTfLiteInt8 || data_type == kTfLiteInt16);\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, data_type);\n  if (!is_hybrid) {\n    TF_LITE_ENSURE(context,\n                   filter->type == data_type || data_type == kTfLiteInt16);\n  }\n\n  if (data_type == kTfLiteInt16) {\n    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);\n    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);\n  }\n"
},
{
    "Id": 267,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/5cedb0427bd4db4117182da8bc0680dd555b4f49",
    "Violation": "missing",
    "Bug report": "Add checks for dilation_rate. ",
    "Number of deleted lines": 0,
    "Deleted lines": "    const uint8* filter_data, const RuntimeShape& bias_shape,\n    const int32* bias_data, const RuntimeShape& output_shape,\n    uint8* output_data) {\n  gemmlowp::ScopedProfilingLabel label(\"DepthwiseConv/8bit\");\n  const int stride_width = params.stride_width;\n  const int stride_height = params.stride_height;\n  const int pad_width = params.padding_values.width;\n  const int pad_height = params.padding_values.height;\n  const int depth_multiplier = params.depth_multiplier;\n  const int32 output_activation_min = params.quantized_activation_min;\n  const int32 output_activation_max = params.quantized_activation_max;\n  const int32 input_offset = params.input_offset;\n  const int32 filter_offset = params.weights_offset;\n  const int32 output_offset = params.output_offset;\n  const int32 output_multiplier = params.output_multiplier;\n  const int output_shift = params.output_shift;\n  const int dilation_width_factor = params.dilation_width_factor;\n  const int dilation_height_factor = params.dilation_height_factor;\n  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);\n  const int batches = MatchingDim(input_shape, 0, output_shape, 0);\n  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);\n  const int input_height = input_shape.Dims(1);\n  const int input_width = input_shape.Dims(2);\n  const int input_depth = input_shape.Dims(3);\n  const int filter_height = filter_shape.Dims(1);\n  const int filter_width = filter_shape.Dims(2);\n  const int output_height = output_shape.Dims(1);\n  const int output_width = output_shape.Dims(2);\n#ifdef USE_NEON\n  const bool shift_left = (output_shift > 0);\n  const int32 multiplier_power_of_two = shift_left ? (1 << output_shift) : 1;\n#endif\n  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);\n  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);\n"
},
{
    "Id": 268,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/55aec0a33011773240f6696393952c984ca8de16",
    "Violation": "insufficient",
    "Bug report": " Add explicit not-None checks for the height and width in `resize_images()`. This was previously raising a `FutureWarning` when the height and/or width were dynamic.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n  # Handle tensor-valued sizes as well as Python integers.\n  try:\n    new_width = ops.convert_to_tensor(new_width, dtypes.int32,\n                                      name='new_width')\n    new_width.get_shape().assert_has_rank(0)\n  except (TypeError, ValueError):\n    raise ValueError('new_width must be a scalar integer')\n  try:\n    new_height = ops.convert_to_tensor(new_height, dtypes.int32,\n                                       name='new_height')\n    new_height.get_shape().assert_has_rank(0)\n  except (TypeError, ValueError):\n    raise ValueError('new_height must be a scalar integer')\n\n  new_width_const = tensor_util.constant_value(new_width)\n  new_height_const = tensor_util.constant_value(new_height)\n\n  if width == new_width_const and height == new_height_const:\n    if not is_batch:\n      images = array_ops.squeeze(images, squeeze_dims=[0])\n    return images\n\n  new_size = array_ops.pack([new_height, new_width])\n\n  if method == ResizeMethod.BILINEAR:\n    images = gen_image_ops.resize_bilinear(images,\n                                           new_size,\n                                           align_corners=align_corners)\n  elif method == ResizeMethod.NEAREST_NEIGHBOR:\n    images = gen_image_ops.resize_nearest_neighbor(images,\n                                                   new_size,\n                                                   align_corners=align_corners)\n  elif method == ResizeMethod.BICUBIC:\n    images = gen_image_ops.resize_bicubic(images,\n                                          new_size,\n                                          align_corners=align_corners)\n  elif method == ResizeMethod.AREA:\n    images = gen_image_ops.resize_area(images,"
},
{
    "Id": 269,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c6899c721f3a4b4f2e71ae4e6d1767341112ff93",
    "Violation": "missing",
    "Bug report": "bug fix when iterators stops at multiple of batch_size ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n    def _feed_dict_fn():\n      \"\"\"Samples data and provides it to placeholders.\n\n      Returns:\n        Dict of input and output tensors.\n      \"\"\"\n      if self.stopped:\n        raise StopIteration\n      inp = np.zeros(self.input_shape, dtype=self._input_dtype)\n      if self._y is not None:\n        out = np.zeros(self.output_shape, dtype=self._output_dtype)\n      for i in xrange(self._batch_size):\n        # Add handling when queue ends.\n        try:\n          inp[i, :] = six.next(self._x)\n        except StopIteration:\n          self.stopped = True\n          inp = inp[:i, :]\n          if self._y is not None:\n            out = out[:i]\n          break\n\n        if self._y is not None:\n          y = six.next(self._y)\n          if self.n_classes is not None and self.n_classes > 1:\n            if len(self.output_shape) == 2:\n              out.itemset((i, y), 1.0)\n            else:\n              for idx, value in enumerate(y):\n                out.itemset(tuple([i, idx, value]), 1.0)\n          else:\n            out[i] = y\n      if self._y is None:\n        return {self._input_placeholder.name: inp}\n      return {self._input_placeholder.name: inp,\n              self._output_placeholder.name: out}\n"
},
{
    "Id": 270,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/66e0cb1d9afd251931f4f920c5d7bd638bc882b4",
    "Violation": "missing",
    "Bug report": " validate clip_norm argument in clip_by_norm API. The API clip_by_norm have argument clip_norm which accepts  0-D (scalar) `Tensor` > 0 . But if we pass -ve value for this argument then its not raising intended error and converting the input tensor into Negative which IMO is wrong. Hence I am adding validation code for -ve values to raise value error.",
    "Number of deleted lines": 0,
    "Deleted lines": "      floating point\n    axes: A 1-D (vector) `Tensor` of type int32 containing the dimensions\n      to use for computing the L2-norm. If `None` (the default), uses all\n      dimensions.\n    name: A name for the operation (optional).\n\n  Returns:\n    A clipped `Tensor` or `IndexedSlices`.\n\n  Raises:\n    ValueError: If the clip_norm tensor is not a 0-D scalar tensor.\n    TypeError: If dtype of the input is not a floating point or\n      complex type.\n  \"\"\"\n  with ops.name_scope(name, \"clip_by_norm\", [t, clip_norm]) as name:\n    values = ops.convert_to_tensor(\n        t.values if isinstance(t, indexed_slices.IndexedSlices) else t,\n        name=\"t\")\n\n    # Calculate L2-norm, clip elements by ratio of clip_norm to L2-norm\n    l2sum = math_ops.reduce_sum(values * values, axes, keepdims=True)\n    pred = l2sum > 0\n    # Two-tap tf.where trick to bypass NaN gradients\n    l2sum_safe = array_ops.where(pred, l2sum, array_ops.ones_like(l2sum))\n    l2norm = array_ops.where(pred, math_ops.sqrt(l2sum_safe), l2sum)\n    intermediate = values * clip_norm\n    # Assert that the shape is compatible with the initial shape,\n    # to prevent unintentional broadcasting.\n    values.shape.assert_is_compatible_with(intermediate.shape)\n    values_clip = array_ops.identity(\n        intermediate / math_ops.maximum(l2norm, clip_norm), name=name)\n\n    if isinstance(t, indexed_slices.IndexedSlices):\n      return indexed_slices.IndexedSlices(values_clip, t.indices, t.dense_shape)\n\n    return values_clip\n\n"
},
{
    "Id": 271,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/81ff894c113a5912ba52078ac27e36d06831112e",
    "Violation": "missing",
    "Bug report": "[XLA] Add bounds checks to xla::Array::Slice. To guard against specifying limits that are out of bounds, which ends up touching OOB data.",
    "Number of deleted lines": 0,
    "Deleted lines": "    for (int64_t i = 0; i < num_elements(); ++i) {\n      if (values_[i] != other.values_[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  bool operator!=(const Array<T>& other) const { return !(*this == other); }\n\n  // Performs the equivalent of a slice operation on this array.\n  Array<T> Slice(absl::Span<const int64_t> starts,\n                 absl::Span<const int64_t> limits) const {\n    CHECK_EQ(starts.size(), num_dimensions());\n    CHECK_EQ(limits.size(), num_dimensions());\n\n    OwnedBuffer<int64_t> sizes(starts.size());\n    for (int64_t i = 0; i < starts.size(); ++i) {\n      sizes[i] = limits[i] - starts[i];\n    }\n    Array<T> result(sizes.span());\n\n    OwnedBuffer<int64_t> index(sizes_.size, default_init_t{});\n    int64_t slice_i = 0;\n    for (int64_t i = 0; i < num_elements(); ++i, next_index(&index)) {\n      if (array_impl::all_inside_range(index.span(), starts, limits)) {\n        // Even though the bounds of result are different to our bounds, we're\n        // iterating in the same order. So we can simply write successive linear\n        // indices instead of recalculating a multi-dimensional index.\n        result.values_[slice_i++] = values_[i];\n      }\n    }\n    return result;\n  }\n\n  // Performs the equivalent of a DynamicUpdateSlice in-place on this array.\n  void UpdateSlice(const Array<T>& from,\n                   absl::Span<const int64_t> start_indices) {"
},
{
    "Id": 272,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b7e107eaa6dffb649d055d893a1fce734ee50d55",
    "Violation": "missing",
    "Bug report": " [XLA:GPU] Error out for ptxas version - Update ptxas version check. ",
    "Number of deleted lines": 5,
    "Deleted lines": "                                  std::vector<std::string>& args) {\n  if (options.disable_gpuasm_optimizations) {\n    args.push_back(\"-O0\");\n  }\n  args.insert(args.end(), options.extra_flags.begin(),\n              options.extra_flags.end());\n}\n\ntsl::StatusOr<std::array<int64_t, 3>> GetAsmCompilerVersion(\n    const std::string& preferred_cuda_dir) {\n  std::string ptxas_path = FindCudaExecutable(\"ptxas\", preferred_cuda_dir);\n  return GetToolVersion(ptxas_path);\n}\n\ntsl::StatusOr<std::vector<uint8_t>> CompileGpuAsm(int cc_major, int cc_minor,\n                                                  const char* ptx_contents,\n                                                  GpuAsmOpts options,\n                                                  bool cancel_if_reg_spill) {\n  auto ptxas_version_tuple = GetAsmCompilerVersion(options.preferred_cuda_dir);\n  if (ptxas_version_tuple.value() == std::array<int64_t, 3>{12, 3, 1}) {\n    return tsl::errors::Internal(\n        absl::StrFormat(\"ptxas 12.3.1 has a bug that we think can affect XLA. \"\n                        \"Please use a different version.\"));\n  }\n  std::string ptxas_path =\n      FindCudaExecutable(\"ptxas\", options.preferred_cuda_dir);\n\n  WarnIfBadPtxasVersion(ptxas_path);\n\n  // Write ptx into a temporary file.\n  std::string ptx_path;\n  auto env = tsl::Env::Default();\n  if (!env->LocalTempFilename(&ptx_path)) {\n    return tsl::errors::Internal(\"couldn't get temp PTX file name\");\n  }\n  TF_RETURN_IF_ERROR(tsl::WriteStringToFile(env, ptx_path, ptx_contents));\n  VLOG(2) << \"ptx written to: \" << ptx_path;\n\n  absl::Cleanup ptx_cleaner = [&ptx_path] {\n    TF_CHECK_OK(tsl::Env::Default()->DeleteFile(ptx_path));\n  };\n\n  // Invoke ptxas and collect its output."
},
{
    "Id": 273,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cb164786dc891ea11d3a900e90367c339305dc7b",
    "Violation": "improper",
    "Bug report": " Properly handle the case where SpecializeType() returns an error `Status`. If the error case in `SpecializeType()` is reached, then we would get a crash when trying to access the value of an errorenous `StatusOr` object",
    "Number of deleted lines": 1,
    "Deleted lines": "                                std::vector<ShapeHandle>* output) const {\n  const auto result = output_name_map_.find(output_name);\n  if (result == output_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown output name: \", output_name);\n  } else {\n    output->clear();\n    for (int i = result->second.first; i < result->second.second; ++i) {\n      output->push_back(outputs_[i]);\n    }\n  }\n  return Status::OK();\n}\n\nvoid InferenceContext::PreInputInit(\n    const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,\n    const std::vector<ShapeHandle>& input_tensors_as_shapes) {\n  // TODO(mdan): This is also done at graph construction. Run only here instead?\n  const auto ret = full_type::SpecializeType(attrs_, op_def);\n  DCHECK(ret.status().ok()) << \"while instantiating types: \" << ret.status();\n  ret_types_ = ret.ValueOrDie();\n\n  input_tensors_ = input_tensors;\n  input_tensors_as_shapes_ = input_tensors_as_shapes;\n\n  construction_status_ =\n      NameRangesForNode(attrs_, op_def, &input_name_map_, &output_name_map_);\n  if (!construction_status_.ok()) return;\n\n  int num_outputs = 0;\n  for (const auto& e : output_name_map_) {\n    num_outputs = std::max(num_outputs, e.second.second);\n  }\n  outputs_.assign(num_outputs, nullptr);\n  output_handle_shapes_and_types_.resize(num_outputs);\n}\n\nStatus InferenceContext::ExpandOutputs(int new_output_size) {\n  const int outputs_size = outputs_.size();\n  if (new_output_size < outputs_size) {"
},
{
    "Id": 274,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/84d7bf6f64fd9c8677f7f26511ce3031fe8d35a6",
    "Violation": "missing",
    "Bug report": "Add is_numeric to dtypes.cc to check whether a data type is numeric ",
    "Number of deleted lines": 0,
    "Deleted lines": "#endif\n           })\n      .def(\"__hash__\", &DataTypeId)\n\n      .def_property_readonly(\n          \"is_numpy_compatible\",\n          [](tensorflow::DataType self) {\n            return tensorflow::DataTypeIsNumPyCompatible(\n                tensorflow::BaseType(self));\n          },\n          \"Returns whether this data type has a compatible NumPy data type.\")\n\n      .def_property_readonly(\n          \"is_bool\",\n          [](tensorflow::DataType self) {\n            return tensorflow::BaseType(self) == tensorflow::DT_BOOL;\n          },\n          \"Returns whether this is a boolean data type.\")\n      .def_property_readonly(\n          \"is_complex\",\n          [](tensorflow::DataType self) {\n            return tensorflow::DataTypeIsComplex(tensorflow::BaseType(self));\n          },\n          \"Returns whether this is a complex floating point type.\")\n      .def_property_readonly(\n          \"is_floating\",\n          [](tensorflow::DataType self) {\n            return tensorflow::DataTypeIsFloating(tensorflow::BaseType(self));\n          },\n          \"Returns whether this is a (non-quantized, real) floating point \"\n          \"type.\")\n      .def_property_readonly(\n          \"is_integer\",\n          [](tensorflow::DataType self) {\n            return tensorflow::DataTypeIsInteger(tensorflow::BaseType(self));\n          },\n          \"Returns whether this is a (non-quantized) integer type.\")\n      .def_property_readonly("
},
{
    "Id": 275,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cd34289b744040974ebe81e1b1e88f1c752d68e0",
    "Violation": "missing",
    "Bug report": "Update types.h to check if a data type is numeric ",
    "Number of deleted lines": 0,
    "Deleted lines": "    ToSet(DT_UINT8) | ToSet(DT_UINT16) | ToSet(DT_INT16) | ToSet(DT_INT8) |\n    ToSet(DT_COMPLEX64) | ToSet(DT_COMPLEX128) | ToSet(DT_INT64) |\n    ToSet(DT_UINT64) | ToSet(DT_BOOL) | ToSet(DT_QINT8) | ToSet(DT_QUINT8) |\n    ToSet(DT_QINT16) | ToSet(DT_QUINT16) | ToSet(DT_QINT32) |\n    ToSet(DT_BFLOAT16) | ToSet(DT_HALF) | ToSet(DT_FLOAT8_E5M2) |\n    ToSet(DT_FLOAT8_E4M3FN);\ninline bool DataTypeCanUseMemcpy(DataType dt) {\n  return kDataTypesCanUseMemcpy.Contains(dt);\n}\n\n// Returns true iff 'dt' is a real, non-quantized floating point type.\nconstexpr DataTypeSet kDataTypeIsFloating =\n    ToSet(DT_HALF) | ToSet(DT_BFLOAT16) | ToSet(DT_FLOAT) | ToSet(DT_DOUBLE) |\n    ToSet(DT_FLOAT8_E4M3FN) | ToSet(DT_FLOAT8_E5M2);\ninline bool DataTypeIsFloating(DataType dt) {\n  return kDataTypeIsFloating.Contains(dt);\n}\n\n// Returns true iff 'dt' is a complex type.\nconstexpr DataTypeSet kDataTypeIsComplex =\n    ToSet(DT_COMPLEX64) | ToSet(DT_COMPLEX128);\ninline bool DataTypeIsComplex(DataType dt) {\n  return kDataTypeIsComplex.Contains(dt);\n}\n\ninline bool DataTypeIsQuantized(DataType dt) {\n  return kQuantizedTypes.Contains(dt);\n}\n\n// Is the dtype nonquantized integral?\nconstexpr DataTypeSet kDataTypeIsInteger =\n    ToSet(DT_INT8) | ToSet(DT_UINT8) | ToSet(DT_INT16) | ToSet(DT_UINT16) |\n    ToSet(DT_INT32) | ToSet(DT_UINT32) | ToSet(DT_INT64) | ToSet(DT_UINT64);\ninline bool DataTypeIsInteger(DataType dt) {\n  return kDataTypeIsInteger.Contains(dt);\n}\n\n// Is the dtype a signed integral type?"
},
{
    "Id": 276,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/43fd10302bcc8447e7a7205bae848a3a88624775",
    "Violation": "missing",
    "Bug report": "Return error on invalid input in tfl.atan2_custom",
    "Number of deleted lines": 1,
    "Deleted lines": "    data_output[i] = std::atan2(data_y[i], data_x[i]);\n  }\n\n  return TfLiteStatus::kTfLiteOk;\n}\n\nTfLiteStatus Atan2Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input_y = tflite::GetInput(context, node, 0);\n  const TfLiteTensor* input_x = tflite::GetInput(context, node, 1);\n  TfLiteTensor* output = tflite::GetOutput(context, node, 0);\n\n  switch (output->type) {\n    case kTfLiteFloat32:\n      TF_LITE_ENSURE_OK(context, Atan2<float>(input_y, input_x, output));\n      break;\n    case kTfLiteFloat64:\n      TF_LITE_ENSURE_OK(context, Atan2<double>(input_y, input_x, output));\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Unsupported datatype for atan2 output: %s\",\n                         TfLiteTypeGetName(output->type));\n  }\n\n  return TfLiteStatus::kTfLiteOk;\n}\n\n}  // namespace atan2\n\nTfLiteRegistration* Register_ATAN2() {\n  static TfLiteRegistration r = {nullptr, nullptr, atan2::Atan2Prepare,\n                                 atan2::Atan2Eval};\n  return &r;\n}\n\n}  // namespace custom\n}  // namespace ops\n}  // namespace tflite\n"
},
{
    "Id": 277,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/40c7fe94824100338ef0c495143b26501b1c367e",
    "Violation": "missing",
    "Bug report": "Return error on invalid input in tfl.topkv2 ",
    "Number of deleted lines": 0,
    "Deleted lines": "    default:\n      TF_LITE_KERNEL_LOG(context,\n                         \"Type %s is currently not supported k Type by TopK.\",\n                         TfLiteTypeGetName(output_values->type));\n      return kTfLiteError;\n  }\n\n  switch (output_indexes->type) {\n    case kTfLiteInt32: {\n      return TopKImpl(context, node, k, GetTensorData<int32_t>(output_indexes));\n    } break;\n    case kTfLiteInt16: {\n      return TopKImpl(context, node, k, GetTensorData<int16_t>(output_indexes));\n    } break;\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"Output index type %s is currently not supported by TopK.\",\n          TfLiteTypeGetName(output_values->type));\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace topk_v2\nTfLiteRegistration* Register_TOPK_V2() {\n  static TfLiteRegistration r = {nullptr, nullptr, topk_v2::Prepare,\n                                 topk_v2::Eval};\n  return &r;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"
},
{
    "Id": 278,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/ef049bdfc4f307c8b3a9dc480a90a5ff287f3d55",
    "Violation": "missing",
    "Bug report": "Add check for ResizeOutput return value in range.cc",
    "Number of deleted lines": 1,
    "Deleted lines": "  if (dtype != kTfLiteFloat32 && dtype != kTfLiteInt32) {\n    TF_LITE_KERNEL_LOG(context, \"Unknown index output data type: %s\",\n                       TfLiteTypeGetName(dtype));\n    return kTfLiteError;\n  }\n\n  TF_LITE_ENSURE_TYPES_EQ(context, limit->type, dtype);\n  TF_LITE_ENSURE_TYPES_EQ(context, delta->type, dtype);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  output->type = dtype;\n\n  if (IsConstantOrPersistentTensor(start) &&\n      IsConstantOrPersistentTensor(limit) &&\n      IsConstantOrPersistentTensor(delta)) {\n    SetTensorToPersistentRo(output);\n    ResizeOutput(context, start, limit, delta, output);\n\n    op_data->noop = true;\n    return EvalImpl(context, start, delta, output);\n  }\n\n  SetTensorToDynamic(output);\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* start;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kStartTensor, &start));\n  const TfLiteTensor* limit;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kLimitTensor, &limit));\n  const TfLiteTensor* delta;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDeltaTensor, &delta));\n\n  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);\n  if (op_data->noop) {\n    return kTfLiteOk;"
},
{
    "Id": 279,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1707ed9b9b0cc5cb02df22a06718c9c738825d39",
    "Violation": "missing",
    "Bug report": " Add a check to make sure that the allocation before an Evict() is not a prefetch.",
    "Number of deleted lines": 3,
    "Deleted lines": "          preferred_offset);\n    }\n    request.allocation_value->allocation_sequence()->back()->AddUse(\n        request.use->hlo_use);\n    return Result::kSuccess;\n  }\n  if (request.prefer_no_copy_alternate_mem_allocation) {\n    LOG(WARNING) << \"Preferred no-copy allocation, but this was not possible: \"\n                 << request.use->hlo_use.ToString();\n  }\n  return Result::kFailOutOfMemory;\n}\n\nAlternateMemoryBestFitHeap::Result AlternateMemoryBestFitHeap::Evict(\n    const AllocationRequest& request) {\n  CHECK_GT(request.allocation_value->allocation_sequence()->size(), 0);\n  MemorySpaceAssignment::Allocation* prev_allocation =\n      request.allocation_value->allocation_sequence()->back().get();\n  // TODO(b/306478911): prev_allocation can never be a prefetch, or we would be\n  // using an incorrect start time (we would need to wait until the copies\n  // finish)\n\n  // The previous allocation's inclusive start time is the eviction's exclusive\n  // start time to ensure that the value is created before we start copying\n  // back to default memory.\n  int64_t eviction_exclusive_start_time = prev_allocation->start_time();\n  int64_t eviction_end_time = prev_allocation->end_time();\n  CHECK(eviction_exclusive_start_time <= eviction_end_time);\n\n  int64_t preferred_eviction_end_time =\n      std::max(options_.prefetch_interval_picker->PreferredEvictionEndTime(\n                   request.allocation_value->defining_position().shape(),\n                   eviction_exclusive_start_time, request.end_time),\n               eviction_end_time);\n  // Evictions must complete by the time of this use.\n  preferred_eviction_end_time =\n      std::min(preferred_eviction_end_time, request.latest_prefetch_time);\n\n  BufferInterval eviction_mem_interval;\n  eviction_mem_interval.buffer = request.allocation_value->value();\n  eviction_mem_interval.size = request.size;"
},
{
    "Id": 280,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f636be3bb1f556c15dba3028e61a8969d90dadd9",
    "Violation": "misleading",
    "Bug report": "Return error on invalid input in tfl.sign_custom",
    "Number of deleted lines": 5,
    "Deleted lines": "// A generic evaluation function where the actual data processing is handled\n// by the Op::Eval<T> function.\ntemplate <typename Op>\nTfLiteStatus PointwiseUnaryOpEval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = tflite::GetInput(context, node, 0);\n  TfLiteTensor* output = tflite::GetOutput(context, node, 0);\n\n  switch (output->type) {\n    case kTfLiteFloat32:\n      TF_LITE_ENSURE_OK(\n          context,\n          (PointwiseUnaryOpDoEval<Op, float>(context, input, output)));\n      break;\n    case kTfLiteFloat64:\n      TF_LITE_ENSURE_OK(\n          context,\n          (PointwiseUnaryOpDoEval<Op, double>(context, input, output)));\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(\n          context,\n          \"Unsupported datatype for atan2 output: %s\",\n          TfLiteTypeGetName(output->type));\n  }\n\n  return TfLiteStatus::kTfLiteOk;\n}\n\n// Operator that computes the sign function.\nstruct Sign {\n  template <typename T>\n  static T Eval(T x) {\n    if (x > 0) {\n      return 1;\n    }\n    if (x < 0) {\n      return -1;\n    }\n    return 0;\n  }\n};\n\n}  // namespace sign"
},
{
    "Id": 281,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e99e31597c1b5cc9f0cbc8a3dea71674d81c20b1",
    "Violation": "misleading",
    "Bug report": " Fix GRUCellBlockOp message for invalid rank of x. The validation checks that x is a matrix, so rank must be 2.",
    "Number of deleted lines": 2,
    "Deleted lines": "    OP_REQUIRES_OK(ctx, ctx->input(\"h_prev\", &h_prev_tensor));\n\n    const Tensor* w_ru_tensor = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->input(\"w_ru\", &w_ru_tensor));\n\n    const Tensor* w_c_tensor = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->input(\"w_c\", &w_c_tensor));\n\n    const Tensor* b_ru_tensor = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_ru\", &b_ru_tensor));\n\n    const Tensor* b_c_tensor = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_c\", &b_c_tensor));\n\n    // Sanity checks for input shapes.\n\n    // Shape of 'x' must be [batch_size, input_size]\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(x_tensor->shape()),\n                errors::InvalidArgument(\"Rank of x must be 2\", x_tensor->dims(),\n                                        \" vs. 2\"));\n    const int64_t batch_size = x_tensor->dim_size(0);\n    const int64_t input_size = x_tensor->dim_size(1);\n\n    // Shape of 'h' must be [batch_size, cell_size]\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(h_prev_tensor->shape()),\n                errors::InvalidArgument(\"Rank of h_prev must be 2, got \",\n                                        h_prev_tensor->dims()));\n    OP_REQUIRES(ctx, h_prev_tensor->dim_size(0) == batch_size,\n                errors::InvalidArgument(\"h_prev.dims(0) != batch_size: \",\n                                        h_prev_tensor->dim_size(0), \" vs. \",\n                                        batch_size));\n    const int64_t cell_size = h_prev_tensor->dim_size(1);\n\n    // Shape of 'w_ru' must be [input_size+cell_size, 2*cell_size]\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(w_ru_tensor->shape()),\n                errors::InvalidArgument(\"Rank of w_ru_ must be 2, got \",\n                                        w_ru_tensor->dims()));\n    OP_REQUIRES(ctx, w_ru_tensor->dim_size(0) == input_size + cell_size,\n                errors::InvalidArgument(\n                    \"w_ru.dim_size(0) != input_size + cell_size: \","
},
{
    "Id": 282,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/18dd91ccd4b1817cd5c34e40f76823a162bea029",
    "Violation": "misleading",
    "Bug report": " [XLA] Report that real -> complex bitcast_convert is not allowed. The check as exists is bidirectional: it prevents conversions from complex to real and real to complex alike, but the reported error message was unidirectional.",
    "Number of deleted lines": 1,
    "Deleted lines": "      !primitive_util::IsArrayType(new_element_type)) {\n    // Note: we may want to support tuple conversions via this operation in the\n    // future, by recursing into the tuple elements to check all sub-conversions\n    // are valid. For now we just reject them, though.\n    return InvalidArgument(\n        \"Convert does not allow non-arrays, so cannot convert from %s to %s.\",\n        ShapeUtil::HumanString(operand_shape),\n        PrimitiveType_Name(new_element_type));\n  }\n\n  return ShapeUtil::ChangeElementType(operand_shape, new_element_type);\n}\n\n/* static */ StatusOr<Shape> ShapeInference::InferBitcastConvertShape(\n    const Shape& operand_shape, PrimitiveType new_element_type) {\n  auto old_element_type = operand_shape.element_type();\n  if (primitive_util::IsComplexType(old_element_type) !=\n      primitive_util::IsComplexType(new_element_type)) {\n    return InvalidArgument(\"Conversion from complex to real type %s => %s.\",\n                           ShapeUtil::HumanString(operand_shape),\n                           PrimitiveType_Name(new_element_type));\n  }\n  if (!operand_shape.IsArray() ||\n      !primitive_util::IsArrayType(new_element_type)) {\n    // Note: we may want to support tuple conversions via this operation in the\n    // future, by recursing into the tuple elements to check all sub-conversions\n    // are valid. For now we just reject them, though.\n    return InvalidArgument(\n        \"Cannot convert from or to tuple type; requested conversion: %s => %s.\",\n        ShapeUtil::HumanString(operand_shape),\n        PrimitiveType_Name(new_element_type));\n  }\n\n  int input_bitwidth = primitive_util::BitWidth(old_element_type);\n  int output_bitwidth = primitive_util::BitWidth(new_element_type);\n  if (std::max(input_bitwidth, output_bitwidth) %\n          std::min(input_bitwidth, output_bitwidth) !=\n      0) {\n    return InvalidArgument("
},
{
    "Id": 283,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1e5c11676dce37bb7c8eb58b35fd298a655c6fd3",
    "Violation": "misleading",
    "Bug report": " [tf.data service] Include dispatcher address in version check error message. This is the error message that happens when the address was specified incorrectly, so it is useful to include the potentially-incorrect address in the error message.",
    "Number of deleted lines": 1,
    "Deleted lines": "  if (stub_) {\n    return Status::OK();\n  }\n  std::shared_ptr<grpc::ChannelCredentials> credentials;\n  TF_RETURN_IF_ERROR(\n      CredentialsFactory::CreateClientCredentials(protocol_, &credentials));\n  grpc::ChannelArguments args;\n  args.SetMaxReceiveMessageSize(std::numeric_limits<int32>::max());\n  args.SetInt(GRPC_ARG_USE_LOCAL_SUBCHANNEL_POOL, true);\n  auto channel = grpc::CreateCustomChannel(address_, credentials, args);\n  stub_ = DispatcherService::NewStub(channel);\n  GetVersionRequest req;\n  GetVersionResponse resp;\n  TF_RETURN_IF_ERROR(grpc_util::Retry(\n      [&] {\n        grpc::ClientContext ctx;\n        grpc::Status s = stub_->GetVersion(&ctx, req, &resp);\n        if (!s.ok()) {\n          return grpc_util::WrapError(\"Failed to get dispatcher version\", s);\n        }\n        return Status::OK();\n      },\n      \"check service version\",\n      /*deadline_micros=*/kint64max));\n  if (resp.version() != kDataServiceVersion) {\n    return errors::FailedPrecondition(\n        \"Version mismatch with tf.data service server. The server is running \"\n        \"version \",\n        resp.version(), \", while the client is running version \",\n        kDataServiceVersion,\n        \". Please ensure that the client and server side are running the \"\n        \"same version of TensorFlow.\");\n  }\n  return Status::OK();\n}\n\nclass GrpcDataTransferClient : public DataTransferClient {\n public:\n  GrpcDataTransferClient(std::shared_ptr<grpc::ChannelCredentials> credentials,"
},
{
    "Id": 284,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/07898e752cf02518508f193a0be2e451450044bd",
    "Violation": "misleading",
    "Bug report": " Provide a more informative error message when the bazel version check fails. ",
    "Number of deleted lines": 2,
    "Deleted lines": "  global _TF_BAZELRC\n  global _TF_CURRENT_BAZEL_VERSION\n\n  parser = argparse.ArgumentParser()\n  parser.add_argument(\n      '--workspace',\n      type=str,\n      default=os.path.abspath(os.path.dirname(__file__)),\n      help='The absolute path to your active Bazel workspace.')\n  args = parser.parse_args()\n\n  _TF_WORKSPACE_ROOT = args.workspace\n  _TF_BAZELRC = os.path.join(_TF_WORKSPACE_ROOT, _TF_BAZELRC_FILENAME)\n\n  # Make a copy of os.environ to be clear when functions and getting and setting\n  # environment variables.\n  environ_cp = dict(os.environ)\n\n  current_bazel_version = check_bazel_version(_TF_MIN_BAZEL_VERSION,\n                                              _TF_MAX_BAZEL_VERSION)\n  _TF_CURRENT_BAZEL_VERSION = convert_version_to_int(current_bazel_version)\n\n  reset_tf_configure_bazelrc()\n\n  cleanup_makefile()\n  setup_python(environ_cp)\n\n  if is_windows():\n    environ_cp['TF_NEED_OPENCL_SYCL'] = '0'\n    environ_cp['TF_NEED_COMPUTECPP'] = '0'\n    environ_cp['TF_NEED_OPENCL'] = '0'\n    environ_cp['TF_CUDA_CLANG'] = '0'\n    environ_cp['TF_NEED_TENSORRT'] = '0'\n    # TODO(ibiryukov): Investigate using clang as a cpu or cuda compiler on\n    # Windows.\n    environ_cp['TF_DOWNLOAD_CLANG'] = '0'\n    environ_cp['TF_NEED_MPI'] = '0'\n\n  if is_macos():\n    environ_cp['TF_NEED_TENSORRT'] = '0'"
},
{
    "Id": 285,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/01e84d7cc214dbf5a7a21bc418ad43afb5694fbc",
    "Violation": "misleading",
    "Bug report": " Update error message for data_adapter with validation split. Remove the user provided value in the error string in case it contains large amount of data. Dump large input data to log might crash on user side.",
    "Number of deleted lines": 2,
    "Deleted lines": "    validation_split: Float between 0 and 1. The proportion of the dataset to\n      include in the validation split. The rest of the dataset will be included\n      in the training split.\n    shuffle: Bool. Whether to shuffle the data before performing a split. If\n      `False`, the last `validation_split` fraction of that training data will\n      become the validation split.\n\n  Returns:\n    `(train_arrays, validation_arrays)`\n  \"\"\"\n\n  def _can_split(t):\n    tensor_types = (ops.Tensor, np.ndarray)\n    if pd:\n      tensor_types = (ops.Tensor, np.ndarray, pd.Series, pd.DataFrame)\n    return isinstance(t, tensor_types) or t is None\n\n  flat_arrays = nest.flatten(arrays)\n  if not all(_can_split(t) for t in flat_arrays):\n    raise ValueError(\n        \"`validation_split` is only supported for Tensors or NumPy \"\n        \"arrays, found: {}\".format(arrays))\n\n  if all(t is None for t in flat_arrays):\n    return arrays, arrays\n\n  first_non_none = None\n  for t in flat_arrays:\n    if t is not None:\n      first_non_none = t\n      break\n\n  # Assumes all arrays have the same batch shape or are `None`.\n  batch_dim = int(first_non_none.shape[0])\n  indices = ops.convert_to_tensor_v2(range(batch_dim))\n  if shuffle:\n    indices = random_ops.random_shuffle(indices)\n  split_at = int(math.floor(batch_dim * (1. - validation_split)))\n  train_indices = indices[:split_at]\n  val_indices = indices[split_at:]\n\n  def _split(t, indices):"
},
{
    "Id": 286,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4c75fb1cb917320acb386cf26adeb8e5151ca4f6",
    "Violation": "misleading",
    "Bug report": " Improve error message reporting for check_numerics gradient. At present the op message is only printed if the numeric check fails during the op's 'forward' computation. If the check fails during the gradient, there is no identifier on *which* op's gradient failed.",
    "Number of deleted lines": 2,
    "Deleted lines": "  params_grad = array_ops.transpose(params_grad, invert_transpose_dims)\n  return [params_grad, None, None]\n\n\n@ops.RegisterGradient(\"GatherNd\")\ndef _GatherNdGrad(op, grad):\n  ref = op.inputs[0]\n  indices = op.inputs[1]\n  ref_shape = array_ops.shape(ref, out_type=indices.dtype)\n  if indices.shape.ndims == 2 and indices.shape.dims[-1].value == 1:\n    ref_grad = ops.IndexedSlices(grad, array_ops.squeeze(indices, axis=-1),\n                                 ref_shape)\n  else:\n    ref_grad = array_ops.scatter_nd(indices, grad, ref_shape)\n  return [ref_grad, None]\n\n\n@ops.RegisterGradient(\"CheckNumerics\")\ndef _CheckNumericsGrad(_, grad):\n  \"\"\"Gradient for check_numerics op.\"\"\"\n  return array_ops.check_numerics(\n      grad, \"Not a number (NaN) or infinity (Inf) values detected in gradient.\")\n\n\n@ops.RegisterGradient(\"PlaceholderWithDefault\")\n@ops.RegisterGradient(\"Identity\")\ndef _IdGrad(_, grad):\n  return grad\n\n\n@ops.RegisterGradient(\"RefIdentity\")\ndef _RefIdGrad(_, grad):\n  return grad\n\n\n@ops.RegisterGradient(\"IdentityN\")\ndef _IdNGrad(_, *grad):\n  return grad\n\n\nops.NotDifferentiable(\"StopGradient\")\n"
},
{
    "Id": 287,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/40918f36823973e816bd50766b1f447225b1bb9b",
    "Violation": "misleading",
    "Bug report": " Make the type check error message more informative for contrib.layers fully_connected.",
    "Number of deleted lines": 2,
    "Deleted lines": "    biases_initializer: An initializer for the biases. If None skip biases.\n    biases_regularizer: Optional regularizer for the biases.\n    reuse: Whether or not the layer and its variables should be reused. To be\n      able to reuse the layer scope must be given.\n    variables_collections: Optional list of collections for all the variables or\n      a dictionary containing a different list of collections per variable.\n    outputs_collections: Collection to add the outputs.\n    trainable: If `True` also add variables to the graph collection\n      `GraphKeys.TRAINABLE_VARIABLES` (see tf.Variable).\n    scope: Optional scope for variable_scope.\n\n  Returns:\n     The tensor variable representing the result of the series of operations.\n\n  Raises:\n    ValueError: If x has rank less than 2 or if its last dimension is not set.\n  \"\"\"\n  if not isinstance(num_outputs, six.integer_types):\n    raise ValueError('num_outputs should be int or long, got %s.' %\n                     (num_outputs,))\n\n  layer_variable_getter = _build_variable_getter({\n      'bias': 'biases',\n      'kernel': 'weights'\n  })\n\n  with variable_scope.variable_scope(\n      scope,\n      'fully_connected', [inputs],\n      reuse=reuse,\n      custom_getter=layer_variable_getter) as sc:\n    inputs = ops.convert_to_tensor(inputs)\n    layer = core_layers.Dense(\n        units=num_outputs,\n        activation=None,\n        use_bias=not normalizer_fn and biases_initializer,\n        kernel_initializer=weights_initializer,\n        bias_initializer=biases_initializer,\n        kernel_regularizer=weights_regularizer,\n        bias_regularizer=biases_regularizer,"
},
{
    "Id": 288,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9c1f14322484e44a93b77619ffd2e24b9b7a9b1d",
    "Violation": "misleading",
    "Bug report": " Fix error message in TF-keras dataset shape check. (Dimension and tensor # were transposed in the error message)",
    "Number of deleted lines": 1,
    "Deleted lines": "    for i, shape in enumerate(dataset.output_shapes):\n      if not shape:\n        raise ValueError('The dataset returns a scalar tensor in '\n                         'tuple index %d. Did you forget to batch? '\n                         '(Output shapes: %s).' % (i,\n                                                   dataset.output_shapes))\n      for j, dim in enumerate(shape):\n        if dim.value is None:\n          if j == 0:\n            hint = (' Hint: did you use `ds.batch(BATCH_SIZE, '\n                    'drop_remainder=True)`?')\n          else:\n            hint = ''\n          raise ValueError(\n              'The Keras-TPU integration for `tf.data` '\n              'currently requires static shapes. The provided '\n              'dataset only has a partially defined shape. '\n              '(Dimension %d of output tensor %d is not statically known '\n              'for output shapes: %s.%s)' % (i, j, dataset.output_shapes, hint))\n\n  @property\n  def dummy_x(self):\n    return self._dummy_x\n\n  @property\n  def dummy_y(self):\n    return self._dummy_y\n\n  def make_infeed_instance(self, inputs):\n    # TODO(saeta): Verify inputs is as expected.\n    return self._infeed_instance\n\n  def build_infeed_from_input_specs(self, input_specs, execution_mode):\n    shard_infeed_tensors = self._get_next_ops\n    assert len(shard_infeed_tensors) == self._strategy.num_towers\n    infeed_ops = []\n    for shard_id in range(self._strategy.num_towers):\n      with ops.device('/device:CPU:0'):\n        infeed_ops.append("
},
{
    "Id": 289,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f0bf6c5191d224f229808f4b321158d890a481e0",
    "Violation": "misleading",
    "Bug report": "Minor change for better error msg in eager input type checking ",
    "Number of deleted lines": 1,
    "Deleted lines": "\nStatus ValidateInputTypeAndPlacement(EagerContext* ctx, Device* op_device,\n                                     EagerOperation* op, const OpKernel* kernel,\n                                     RunMetadata* run_metadata) {\n  Device* host_device = ctx->HostCPU();\n  const MemoryTypeVector& memtypes = kernel->input_memory_types();\n  if (memtypes.size() != op->Inputs().size()) {\n    return errors::InvalidArgument(\"expected \", memtypes.size(),\n                                   \" inputs, got \", op->Inputs().size());\n  }\n  for (int i = 0; i < op->Inputs().size(); ++i) {\n    const Device* expected_device =\n        memtypes[i] == HOST_MEMORY ? host_device : op_device;\n    TF_RETURN_IF_ERROR(MaybeCopyInputToExpectedDevice(\n        op, i, expected_device, run_metadata, &((*op->MutableInputs())[i])));\n    tensorflow::TensorHandle* handle = op->Inputs()[i];\n    if (handle->dtype != kernel->input_type(i)) {\n      return errors::InvalidArgument(\n          \"cannot compute \", op->Name(), \" as input #\", i,\n          \" was expected to be a \", DataTypeString(kernel->input_type(i)),\n          \" tensor but is a \", DataTypeString(handle->dtype), \" tensor\");\n    }\n  }\n  return Status::OK();\n}\n\nStatus SelectDevice(const NodeDef& ndef, EagerContext* ctx, Device** device) {\n  DeviceSet ds;\n  for (Device* d : *ctx->devices()) {\n    ds.AddDevice(d);\n  }\n  DeviceTypeVector final_devices;\n  auto status = SupportedDeviceTypesForNode(ds.PrioritizedDeviceTypeList(),\n                                            ndef, &final_devices);\n  if (!status.ok()) return status;\n  if (final_devices.empty()) {\n    return errors::Internal(\"Could not find valid device for node \",\n                            ndef.DebugString());\n  }"
},
{
    "Id": 290,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/178d62a63ea043a4b9969b4cd6f8983eb8eae523",
    "Violation": "misleading",
    "Bug report": " Update check failure to logging a warning for repeated computation placer registration. This is to bypass a duplicated registration issue seen in open-source build during TF/PJRT integration.",
    "Number of deleted lines": 1,
    "Deleted lines": "    int replica_count, int computation_count) {\n  DeviceAssignment assignment(replica_count, computation_count);\n  for (int replica = 0; replica < replica_count; ++replica) {\n    for (int computation = 0; computation < computation_count; ++computation) {\n      TF_ASSIGN_OR_RETURN(\n          int device_id,\n          DeviceId(replica, computation, replica_count, computation_count));\n      assignment(replica, computation) = device_id;\n    }\n  }\n  return std::move(assignment);\n}\n\n/* static */ void ComputationPlacer::RegisterComputationPlacer(\n    se::Platform::Id platform_id,\n    ComputationPlacerCreationFunction creation_function) {\n  absl::MutexLock lock(&ComputationPlacer::platform_computation_placer_mutex_);\n  auto* computation_placers = GetPlatformComputationPlacers();\n  CHECK(computation_placers->find(platform_id) == computation_placers->end());\n  (*computation_placers)[platform_id].creation_function = creation_function;\n}\n\n/* static */ StatusOr<ComputationPlacer*> ComputationPlacer::GetForPlatform(\n    const se::Platform* platform) {\n  absl::MutexLock lock(&ComputationPlacer::platform_computation_placer_mutex_);\n  auto* computation_placers = GetPlatformComputationPlacers();\n\n  auto it = computation_placers->find(platform->id());\n  if (it == computation_placers->end()) {\n    return NotFound(\n        \"could not find registered computation placer for platform %s -- check \"\n        \"target linkage\",\n        platform->Name());\n  }\n\n  if (it->second.placer == nullptr) {\n    // Lazily create the computation placer the first time it is needed.\n    it->second.placer = (*it->second.creation_function)();\n  }"
},
{
    "Id": 291,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/6aece71ebf756d32ea730576a7ff12d2cfc7b242",
    "Violation": "insufficient",
    "Bug report": "Places relatively cheap type checks for list, tuple, and dict before other more expensive checks. Specifically, this avoids calling expensive checks like isinstance(structure, collections.abc.Mapping) and nest._is_named_tuple in the most common cases (since these abc isinstance checks take ~10x as long as normal isinstance checks).",
    "Number of deleted lines": 1,
    "Deleted lines": "    yield v\n\n\ndef _yield_sorted_items(iterable):\n  \"\"\"Yield (key, value) pairs for `iterable` in a deterministic order.\n\n  For Sequences, the key will be an int, the array index of a value.\n  For Mappings, the key will be the dictionary key.\n  For objects (e.g. namedtuples), the key will be the attribute name.\n\n  In all cases, the keys will be iterated in sorted order.\n\n  Args:\n    iterable: an iterable.\n\n  Yields:\n    The iterable's (key, value) pairs, in order of sorted keys.\n  \"\"\"\n  if isinstance(iterable, _collections_abc.Mapping):\n    # Iterate through dictionaries in a deterministic order by sorting the\n    # keys. Notice this means that we ignore the original order of `OrderedDict`\n    # instances. This is intentional, to avoid potential bugs caused by mixing\n    # ordered and plain dicts (e.g., flattening a dict but using a\n    # corresponding `OrderedDict` to pack it back).\n    for key in _sorted(iterable):\n      yield key, iterable[key]\n  elif _is_attrs(iterable):\n    for item in _get_attrs_items(iterable):\n      yield item\n  elif _is_namedtuple(iterable):\n    for field in iterable._fields:\n      yield field, getattr(iterable, field)\n  elif _is_composite_tensor(iterable):\n    type_spec = iterable._type_spec  # pylint: disable=protected-access\n    yield type_spec.value_type.__name__, type_spec._to_components(iterable)  # pylint: disable=protected-access\n  elif _is_type_spec(iterable):\n    # Note: to allow CompositeTensors and their TypeSpecs to have matching\n    # structures, we need to use the same key string here.\n    yield iterable.value_type.__name__, iterable._component_specs  # pylint: disable=protected-access"
},
{
    "Id": 292,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
    "Violation": "missing",
    "Bug report": " Validate real and expected type of arguments to cwise ops. Without this validation, it is possible to trigger a `CHECK`-fail denial of service.",
    "Number of deleted lines": 0,
    "Deleted lines": "  void SetComputeError(OpKernelContext* ctx);\n};\n\n// Coefficient-wise binary operations:\n//   Device: E.g., CPUDevice, GPUDevice.\n//   Functor: defined in cwise_ops.h. E.g., functor::add.\ntemplate <typename Device, typename Functor>\nclass BinaryOp : public BinaryOpShared {\n public:\n  typedef typename Functor::in_type Tin;    // Input scalar data type.\n  typedef typename Functor::out_type Tout;  // Output scalar data type.\n\n  explicit BinaryOp(OpKernelConstruction* ctx)\n      : BinaryOpShared(ctx, DataTypeToEnum<Tout>::v(),\n                       DataTypeToEnum<Tin>::v()) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& input_0 = ctx->input(0);\n    const Tensor& input_1 = ctx->input(1);\n    const Device& eigen_device = ctx->eigen_device<Device>();\n    bool error = false;\n    bool* const error_ptr = Functor::has_errors ? &error : nullptr;\n\n    // NOTE: Handle three simple cases before building the BinaryOpState, which\n    // is relatively expensive for small operations.\n    if (input_0.shape() == input_1.shape()) {\n      // tensor op tensor with no broadcasting.\n      Tensor* out;\n      OP_REQUIRES_OK(ctx, ctx->forward_input_or_allocate_output(\n                              {0, 1}, 0, input_0.shape(), &out));\n      functor::BinaryFunctor<Device, Functor, 1>()(\n          eigen_device, out->template flat<Tout>(),\n          input_0.template flat<Tin>(), input_1.template flat<Tin>(),\n          error_ptr);\n      if (Functor::has_errors && error) {\n        SetComputeError(ctx);\n      }\n      return;\n    } else if (input_0.shape().dims() == 0) {"
},
{
    "Id": 293,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/798b2ebda0cc6f12f1ca6460611f760149771a11",
    "Violation": "missing",
    "Bug report": " Ensure the allocation type is kTfLiteCustom when doing shallow copies in DeepOrShallowCopyTensorsShapeTypeData.  This code is correct only under the assumption that the caller has correctly prepared the tensors that get passed in for shallow copying, by setting their allocation types to kTfLiteCustom. This ensures that those tensors won't be double `free`'d later on. This check simply ensures that that assumption always holds, to ensure we fail early if ever a bug is introduced that breaks that assumption.",
    "Number of deleted lines": 0,
    "Deleted lines": "      dst_tensor->bytes = 0;  // Don't allocate memory with AllocateTensors().\n      dst_tensor->data.raw = nullptr;\n    }\n  }\n  TF_LITE_ENSURE_OK(context, dst_subgraph->AllocateTensors());\n  // Deep or shallow copy the data from src subgraph to dst.\n  for (int i = 0; i < src_tensor_indices.size(); ++i) {\n    // Skip copying unused destination tensors.\n    if (dst_tensor_indices[i] == kTfLiteOptionalTensor) continue;\n    if (src_tensor_indices[i] == kTfLiteOptionalTensor) continue;\n\n    const TfLiteTensor* src_tensor =\n        src_subgraph->tensor(src_tensor_indices[i]);\n    TfLiteTensor* dst_tensor = dst_subgraph->tensor(dst_tensor_indices[i]);\n    if (IsResourceOrVariant(src_tensor)) {\n      TfLiteTensorRealloc(src_tensor->bytes, dst_tensor);\n      TF_LITE_ENSURE_OK(context, TfLiteTensorCopy(src_tensor, dst_tensor));\n    } else {\n      dst_tensor->bytes = src_tensor->bytes;\n      dst_tensor->data.raw = src_tensor->data.raw;\n    }\n  }\n  return kTfLiteOk;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n\n#endif  // TENSORFLOW_LITE_KERNELS_CONTROL_FLOW_COMMON_H_\n"
},
{
    "Id": 294,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b65d9ec2b78c7c23e368ed4eec7b4deb89dcd712",
    "Violation": "insufficient",
    "Bug report": "Fix value error generated on is_scalar check. Fix value error generated on is_scalar check. `is_scalar = shape is not None and not shape` raises a value error when shape is a scalar, \"ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\"",
    "Number of deleted lines": 1,
    "Deleted lines": "    # type, before doing anything else. When _ref types are removed in favor of\n    # resources, this line can be removed.\n    try:\n      dtype = dtype.base_dtype\n    except AttributeError:\n      # .base_dtype not existing means that we will try and use the raw dtype\n      # which was passed in - this might be a NumPy type which is valid.\n      pass\n\n    # This is the main logic of get_variable.  However, custom_getter\n    # may override this logic.  So we save it as a callable and pass\n    # it to custom_getter.\n    # Note: the parameters of _true_getter, and their documentation, match\n    # *exactly* item-for-item with the docstring of this method.\n    def _true_getter(name, shape=None, dtype=dtypes.float32,  # pylint: disable=missing-docstring\n                     initializer=None, regularizer=None, reuse=None,\n                     trainable=True, collections=None, caching_device=None,\n                     partitioner=None, validate_shape=True, use_resource=None):\n      is_scalar = shape is not None and not shape\n      # Partitioned variable case\n      if partitioner is not None and not is_scalar:\n        if not callable(partitioner):\n          raise ValueError(\n              \"Partitioner must be callable, but received: %s\" % partitioner)\n        with ops.name_scope(None):\n          return self._get_partitioned_variable(name=name,\n                                                shape=shape,\n                                                dtype=dtype,\n                                                initializer=initializer,\n                                                regularizer=regularizer,\n                                                reuse=reuse,\n                                                trainable=trainable,\n                                                collections=collections,\n                                                caching_device=caching_device,\n                                                partitioner=partitioner,\n                                                validate_shape=validate_shape,\n                                                use_resource=use_resource)\n\n      # Special case for partitioned variable to allow reuse without having to"
},
{
    "Id": 295,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9baa064387b0a114c3fcec88abaa0568834e8e34",
    "Violation": "insufficient",
    "Bug report": " Only apply check for non-tensor case ",
    "Number of deleted lines": 3,
    "Deleted lines": "    mode: One of \"CONSTANT\", \"REFLECT\", or \"SYMMETRIC\" (case-insensitive)\n    name: A name for the operation (optional).\n    constant_values: In \"CONSTANT\" mode, the scalar pad value to use. Must be\n      same type as `tensor`.\n\n  Returns:\n    A `Tensor`. Has the same type as `tensor`.\n\n  Raises:\n    ValueError: When mode is not one of \"CONSTANT\", \"REFLECT\", or \"SYMMETRIC\".\n  \"\"\"\n\n  # Convert lower/mixed case to upper for NumPy compatibility\n  # NumPy uses all lower-case modes.\n  mode = mode.upper()\n  if mode == \"CONSTANT\":\n    # TODO(rjryan): Once the forward compatibility period (3 weeks) have passed\n    # remove the \"Pad\" fallback here.\n    if constant_values != 0:\n      result = gen_array_ops.pad_v2(\n          tensor, paddings, constant_values, name=name)\n    else:\n      result = gen_array_ops.pad(tensor, paddings, name=name)\n  elif mode == \"REFLECT\":\n    result = gen_array_ops.mirror_pad(\n        tensor, paddings, mode=\"REFLECT\", name=name)\n  elif mode == \"SYMMETRIC\":\n    result = gen_array_ops.mirror_pad(\n        tensor, paddings, mode=\"SYMMETRIC\", name=name)\n  else:\n    raise ValueError(\"Unknown padding mode: %s\" % mode)\n\n  # Restore shape information where possible.\n  if not context.executing_eagerly():\n    paddings_constant = tensor_util.constant_value(\n        result.op.inputs[1], partial=True)\n    input_shape = result.op.inputs[0].shape\n    if (input_shape.ndims is not None and\n        not result.shape.is_fully_defined() and paddings_constant is not None):\n      new_shape = []\n      for padding, dim in zip(paddings_constant, input_shape.as_list()):\n        if padding is None or dim is None or any((x is None for x in padding)):\n          new_shape.append(None)"
},
{
    "Id": 296,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cb2828a844ccaf0394e602d15fd95e45073729a2",
    "Violation": "missing",
    "Bug report": " Check that the type of an implicitly dereferenced tensor matches the expected input type. The dtype of a tensor reference can change between the point when it is \"produced\" by an operation and consumed by the next operation. This evades checks in the executor that the type of tensor on each edge matches the type signatures of the producing and consuming operation, which could lead to undefined behavior. Although there is no existing operation that changes the type of a tensor reference, it is possible to use the OpKernelContext API to do so, so we add a further check in the runtime to defend against operations that might be added in the future.",
    "Number of deleted lines": 0,
    "Deleted lines": "      }\n      if (expect_ref) {\n        inp->mutex_if_ref = entry->ref_mu;\n        inp->tensor = entry->ref;\n      } else {\n        // Automatically deref the tensor ref when the op expects a\n        // tensor but is given a ref to a tensor.  Need to deref it\n        // under the mutex.\n        {\n          mutex_lock l(*(entry->ref_mu));\n          DCHECK(!entry->val_field_is_set);\n          entry->val.Init(*entry->ref);\n          entry->val_field_is_set = true;\n        }\n        entry->ref = nullptr;\n        entry->ref_mu = nullptr;\n\n        inp->tensor = entry->val.get();\n      }\n    }\n  }\n  return Status::OK();\n}\n\nStatus ExecutorState::ProcessOutputs(const NodeItem& item, OpKernelContext* ctx,\n                                     EntryVector* outputs,\n                                     NodeExecStatsWrapper* stats) {\n  const Node* node = item.node;\n  DCHECK_EQ(0, outputs->size());\n  outputs->resize(item.num_outputs);\n\n  Status s = ctx->status();\n  if (!s.ok()) {\n    s = AttachDef(s, item.kernel->def());\n    // TODO(misard) Replace with a finer-grain enabling flag once we\n    // add better optional debugging support.\n    if (vlog_ && VLOG_IS_ON(1)) {\n      LOG(WARNING) << this << \" Compute status: \" << s;"
},
{
    "Id": 297,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/924f80a4fdb34230965a7a8a4476901847463645",
    "Violation": "missing",
    "Bug report": "Add stricter type checking for tf.math.real. Fix for tf.math.real so that it only accepts tensors with numeric entries as input.",
    "Number of deleted lines": 1,
    "Deleted lines": "  x = tf.constant([-2.25 + 4.75j, 3.25 + 5.75j])\n  tf.math.real(x)  # [-2.25, 3.25]\n  ```\n\n  If `input` is already real, it is returned unchanged.\n\n  Args:\n    input: A `Tensor`. Must have numeric type.\n    name: A name for the operation (optional).\n\n  Returns:\n    A `Tensor` of type `float32` or `float64`.\n  \"\"\"\n  with ops.name_scope(name, \"Real\", [input]) as name:\n    input = ops.convert_to_tensor(input, name=\"input\")\n    if input.dtype.is_complex:\n      real_dtype = input.dtype.real_dtype\n      return gen_math_ops.real(input, Tout=real_dtype, name=name)\n    else:\n      return input\n\n\n@tf_export(\"math.imag\", v1=[\"math.imag\", \"imag\"])\n@dispatch.register_unary_elementwise_api\n@dispatch.add_dispatch_support\n@deprecation.deprecated_endpoints(\"imag\")\ndef imag(input, name=None):\n  r\"\"\"Returns the imaginary part of a complex (or real) tensor.\n\n  Given a tensor `input`, this operation returns a tensor of type `float` that\n  is the imaginary part of each element in `input` considered as a complex\n  number. If `input` is real, a tensor of all zeros is returned.\n\n  For example:\n\n  ```python\n  x = tf.constant([-2.25 + 4.75j, 3.25 + 5.75j])\n  tf.math.imag(x)  # [4.75, 5.75]\n  ```\n"
},
{
    "Id": 298,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e6df768b81e973f2123bc83a18a60773fc4da99e",
    "Violation": "insufficient",
    "Bug report": "[TFG] Fix IsAdd string type check in tf_op_names ",
    "Number of deleted lines": 1,
    "Deleted lines": "distributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"mlir/IR/Operation.h\"  // from @llvm-project\n#include \"mlir/IR/OperationSupport.h\"  // from @llvm-project\n#include \"tensorflow/core/ir/dialect.h\"\n#include \"tensorflow/core/ir/tf_op_wrapper.h\"\n\nnamespace mlir {\nnamespace tfg {\n\nbool TFGraphDialect::IsAdd(TFOp op) const {\n  StringAttr op_name = op->getName().getIdentifier();\n\n  if (op_name == add_v2_) return true;\n  if (op_name == add_) return !op->getAttrOfType<StringAttr>(\"T\");\n  return false;\n}\n\nbool TFGraphDialect::IsAddN(TFOp op) const {\n  StringAttr op_name = op->getName().getIdentifier();\n  return op_name == add_n_;\n}\n\nbool TFGraphDialect::IsAll(TFOp op) const {\n  StringAttr op_name = op->getName().getIdentifier();\n  return op_name == all_;\n}\n\nbool TFGraphDialect::IsAngle(TFOp op) const {\n  StringAttr op_name = op->getName().getIdentifier();\n  return op_name == angle_;\n}\n\nbool TFGraphDialect::IsAny(TFOp op) const {\n  StringAttr op_name = op->getName().getIdentifier();"
},
{
    "Id": 299,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4f4a0276a2cf9186c0541072964676159368286e",
    "Violation": "missing",
    "Bug report": " Add appropriate PyObject type check for bool. This PR fixes an issue where PyObject type in tf's C bindings does not check if an input is a boolean and will always cast to bool.",
    "Number of deleted lines": 2,
    "Deleted lines": "  if (PyUnicode_Check(py_value)) {\n    Py_ssize_t size = 0;\n    const char* buf = PyUnicode_AsUTF8AndSize(py_value, &size);\n    if (buf == nullptr) return false;\n    *value = tensorflow::StringPiece(buf, size);\n    return true;\n  }\n#endif\n  TF_SetStatus(\n      status, TF_INVALID_ARGUMENT,\n      tensorflow::strings::StrCat(\"Expecting a string value for attr \", key,\n                                  \", got \", py_value->ob_type->tp_name)\n          .c_str());\n  return false;\n}\n\nbool ParseBoolValue(const string& key, PyObject* py_value, TF_Status* status,\n                    unsigned char* value) {\n  *value = PyObject_IsTrue(py_value);\n  return true;\n}\n\n// The passed in py_value is expected to be an object of the python type\n// dtypes.DType or an int.\nbool ParseTypeValue(const string& key, PyObject* py_value, TF_Status* status,\n                    int* value) {\n  if (IsInteger(py_value)) {\n    return ParseIntValue(key, py_value, status, value);\n  }\n\n  tensorflow::Safe_PyObjectPtr py_type_enum(\n      PyObject_GetAttrString(py_value, \"_type_enum\"));\n  if (py_type_enum == nullptr) {\n    PyErr_Clear();\n    TF_SetStatus(\n        status, TF_INVALID_ARGUMENT,\n        tensorflow::strings::StrCat(\"Expecting a DType.dtype for attr \", key,\n                                    \", got \", py_value->ob_type->tp_name)\n            .c_str());\n    return false;"
},
{
    "Id": 300,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/88609e2e22fa5c296de2e27e04d1cc4743b2dfcd",
    "Violation": "missing",
    "Bug report": " Add appropriate dtype check for tf.boolean_mask's mask. This PR tries to address the issue raised in 54412 where mask's dtype was checked in tf.boolean_mask and an invalid result has been returned instead.",
    "Number of deleted lines": 0,
    "Deleted lines": "      axis <= N.\n\n  Returns:\n    (N-K+1)-dimensional tensor populated by entries in `tensor` corresponding\n    to `True` values in `mask`.\n\n  Raises:\n    ValueError:  If shapes do not conform.\n  \"\"\"\n\n  def _apply_mask_1d(reshaped_tensor, mask, axis=None):\n    \"\"\"Mask tensor along dimension 0 with a 1-D mask.\"\"\"\n    indices = squeeze(where_v2(mask), axis=[1])\n    return gather(reshaped_tensor, indices, axis=axis)\n\n  with ops.name_scope(name, values=[tensor, mask]):\n    tensor = ops.convert_to_tensor(tensor, name=\"tensor\")\n    mask = ops.convert_to_tensor(mask, name=\"mask\")\n\n    shape_mask = mask.get_shape()\n    ndims_mask = shape_mask.ndims\n    shape_tensor = tensor.get_shape()\n    if ndims_mask == 0:\n      raise ValueError(\"mask cannot be scalar.\")\n    if ndims_mask is None:\n      raise ValueError(\n          \"Number of mask dimensions must be specified, even if some dimensions\"\n          \" are None.  E.g. shape=[None] is ok, but shape=None is not.\")\n    axis = 0 if axis is None else axis\n    axis_value = tensor_util.constant_value(axis)\n    if axis_value is not None:\n      axis = axis_value\n      shape_tensor[axis:axis + ndims_mask].assert_is_compatible_with(shape_mask)\n\n    leading_size = gen_math_ops.prod(shape(tensor)[axis:axis + ndims_mask], [0])\n    tensor = reshape(\n        tensor,\n        concat(["
},
{
    "Id": 301,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a76646d4b4ad5d56b5e63c139985bbd1eb98dd90",
    "Violation": "misleading",
    "Bug report": " Add type checking at the beginning of tpu.shard(). Otherwise a message like \"TypeError: Tensor objects are only iterable when eager execution is enabled. To iterate over this tensor use tf.map_fn.\" will be thrown, which is confusing.",
    "Number of deleted lines": 1,
    "Deleted lines": "    device_assignment: If not `None`, a `DeviceAssignment` describing the\n      mapping between logical cores in the computation with physical cores in\n      the TPU topology. Uses a default device assignment if `None`. The\n      `DeviceAssignment` may be omitted if each shard of the computation uses\n      only one core, and there is either only one shard, or the number of shards\n      is equal to the number of cores in the TPU system.\n    name: (Deprecated) Does nothing.\n  Returns:\n    A list of output tensors.\n  Raises:\n    ValueError: If num_shards <= 0\n    ValueError: If len(input_shard_axes) != len(inputs)\n    ValueError: If len(output_shard_axes) != len(outputs from `computation`)\n  \"\"\"\n\n  if num_shards <= 0:\n    raise ValueError(\"num_shards must be a positive integer.\")\n\n  # Converts inputs to Tensors.\n  inputs = [] if inputs is None else [ops.convert_to_tensor(x) for x in inputs]\n\n  if input_shard_axes is None:\n    input_shard_axes = [0] * len(inputs)\n  if len(inputs) != len(input_shard_axes):\n    raise ValueError(\"Length of input_shard_axes must be equal to the number \"\n                     \"of inputs.\")\n\n  if inputs:\n    # Splits the `inputs` along the corresponding `input_shard_axes`, giving\n    # lists with layout [input][shard]\n    split_inputs = [\n        array_ops.split(x, num_shards, axis=axis)\n        for (axis, x) in zip(input_shard_axes, inputs)]\n\n    # Transposes the input lists to have layout [shard][input]\n    transposed_inputs = [list(i) for i in zip(*split_inputs)]\n  else:\n    transposed_inputs = [[]] * num_shards\n\n  outputs = replicate("
},
{
    "Id": 302,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1c49c13ba59961cf7581e3e29b951db8faca94f5",
    "Violation": "missing",
    "Bug report": "Add type check for reduction axis in reducer operation. ",
    "Number of deleted lines": 0,
    "Deleted lines": "      break;\n    case kTfLiteInt8:\n      temp_sum->type = kTfLiteInt32;\n      break;\n    case kTfLiteBool:\n      temp_sum->type = kTfLiteBool;\n      break;\n    default:\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  OpContext op_context(context, node);\n  TF_LITE_ENSURE_OK(context, InitializeTemporaries(context, node, &op_context));\n\n  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n  // Leaves work to Eval if axis is not constant; else resizes output.\n  if (!IsConstantTensor(op_context.axis)) {\n    SetTensorToDynamic(op_context.output);\n    SetTensorToDynamic(resolved_axis);\n    return kTfLiteOk;\n  }\n  resolved_axis->allocation_type = kTfLiteArenaRw;\n  TF_LITE_ENSURE_OK(context,\n                    ResizeTempAxis(context, &op_context, resolved_axis));\n  TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n  return kTfLiteOk;\n}\n\nTfLiteStatus PrepareAny(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteBool);"
},
{
    "Id": 303,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b6f3366a716ca9b5a1e6114a3bea050c80d8a475",
    "Violation": "missing",
    "Bug report": " Don't check for if null after already dereferenced. I'm not sure how it could be null at this point (and obviously it is nowhere else we'd have seen failures), but keeping the check as is and just moving it to where it would catch it before dereferencing.",
    "Number of deleted lines": 3,
    "Deleted lines": "  auto construction_context_iter = fdef.attr().find(\"_construction_context\");\n  if (construction_context_iter != fdef.attr().end()) {\n    if (construction_context_iter->second.s() == \"kEagerRuntime\") {\n      graph->SetConstructionContext(ConstructionContext::kEagerRuntime);\n    } else {\n      DCHECK(false) << \"Unknown _construction_context attribute: \"\n                    << construction_context_iter->second.s();\n    }\n  }\n\n  GraphConstructorOptions opts;\n  opts.allow_internal_ops = true;\n  opts.expect_device_spec = false;\n  TF_RETURN_IF_ERROR(ConvertNodeDefsToGraph(opts, result.nodes, graph.get()));\n\n  const StackTracesMap& stack_traces =\n      lib_def->GetStackTraces(fdef.signature().name());\n  for (Node* n : graph->nodes()) {\n    auto it = stack_traces.find(n->name());\n    if (n && it != stack_traces.end()) {\n      n->SetStackTrace(it->second);\n    }\n  }\n\n  // Call BuildControlFlowInfo to validate that this function body has\n  // well-formed control flow.\n  std::vector<ControlFlowInfo> dummy;\n  TF_RETURN_IF_ERROR(BuildControlFlowInfo(graph.get(), &dummy));\n\n  *fbody = absl::make_unique<FunctionBody>(fdef, result.arg_types,\n                                           result.ret_types, graph.release());\n  return Status::OK();\n}\n\nStatus FunctionDefToBodyHelper(const FunctionDef& fdef, const AttrSlice& attrs,\n                               const FunctionLibraryDefinition* lib_def,\n                               std::unique_ptr<FunctionBody>* fbody) {\n  const auto get_func_sig = [&lib_def](const string& op, const OpDef** sig) {\n    return lib_def->LookUpOpDef(op, sig);\n  };\n  return FunctionDefToBodyHelper(fdef, attrs, lib_def, get_func_sig, fbody);"
},
{
    "Id": 304,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/89fa1ae2cb34eab0e6137e72e6fab01f6c5bc164",
    "Violation": "improper",
    "Bug report": "Fix check for cloning FunctionLibraryRuntime",
    "Number of deleted lines": 1,
    "Deleted lines": "  Item* item = nullptr;\n  LocalHandle local_handle = parent_->GetHandleOnDevice(device_name_, handle);\n  Status s = GetOrCreateItem(local_handle, &item);\n  if (s.ok()) {\n    return tensorflow::DebugString(item->graph);\n  } else {\n    return s.ToString();\n  }\n}\n\nStatus FunctionLibraryRuntimeImpl::Clone(\n    std::unique_ptr<FunctionLibraryDefinition>* out_lib_def,\n    std::unique_ptr<ProcessFunctionLibraryRuntime>* out_pflr,\n    FunctionLibraryRuntime** out_flr, bool skip_flib_def) {\n  TF_RETURN_IF_ERROR(parent_->Clone(\n      env_, graph_def_version_, optimizer_.options(), custom_kernel_creator_,\n      out_lib_def, out_pflr, skip_flib_def));\n  *out_flr = (*out_pflr)->GetFLR(device_->name());\n  if (out_flr != nullptr) {\n    return Status::OK();\n  } else {\n    return errors::Internal(\"Cloning FunctionLibraryRuntime failed.\");\n  }\n}\n\nnamespace {\n\nstruct CustomCreatorSingleton {\n  mutex mu;\n  CustomKernelCreator* custom_creator = nullptr;\n\n  void Set(CustomKernelCreator* cb) {\n    mutex_lock l(mu);\n    custom_creator = cb;\n  }\n\n  CustomKernelCreator* Get() {\n    mutex_lock l(mu);\n    return custom_creator;"
},
{
    "Id": 305,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/3a7b36bca7f43ce4f0d0791ce0e0d84ece8683d9",
    "Violation": "improper",
    "Bug report": " [Grappler] Remove DCHECK from a MutableGraphView CanDedupControlWithRegularInput check.",
    "Number of deleted lines": 2,
    "Deleted lines": "}\n\n// Determines if node input can be deduped by regular inputs when used as a\n// control dependency. Specifically, if a node is an Identity that leads to a\n// Switch node, when used as a control dependency, that control dependency\n// should not be deduped even though the same node is used as a regular input.\nbool CanDedupControlWithRegularInput(const MutableGraphView& graph,\n                                     const NodeDef& control_node) {\n  return !IsIdentityConsumingSwitch(graph, control_node);\n}\n\n// Determines if node input can be deduped by regular inputs when used as a\n// control dependency. Specifically, if a node is an Identity that leads to a\n// Switch node, when used as a control dependency, that control dependency\n// should not be deduped even though the same node is used as a regular input.\nbool CanDedupControlWithRegularInput(const MutableGraphView& graph,\n                                     absl::string_view control_node_name) {\n  NodeDef* control_node = graph.GetNode(control_node_name);\n  DCHECK(control_node != nullptr)\n      << \"Didn't find a node for control dependency: \" << control_node_name;\n  return CanDedupControlWithRegularInput(graph, *control_node);\n}\n\nbool HasRegularFaninNode(const MutableGraphView& graph, const NodeDef& node,\n                         absl::string_view fanin_node_name) {\n  const int num_regular_fanins =\n      graph.NumFanins(node, /*include_controlling_nodes=*/false);\n  for (int i = 0; i < num_regular_fanins; ++i) {\n    if (ParseTensorName(node.input(i)).node() == fanin_node_name) {\n      return true;\n    }\n  }\n  return false;\n}\n\nusing FanoutsMap =\n    absl::flat_hash_map<MutableGraphView::OutputPort,\n                        absl::flat_hash_set<MutableGraphView::InputPort>>;\n\nvoid SwapControlledFanoutInputs(const MutableGraphView& graph,"
},
{
    "Id": 306,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c5019e2156c749d35ec786ff7946a55006d9ba91",
    "Violation": "missing",
    "Bug report": "missing checking on null pointer dereference",
    "Number of deleted lines": 1,
    "Deleted lines": "\nabsl::optional<AllocatorStats> GpuCudaMallocAsyncAllocator::GetStats() {\n  if (!stats_) return absl::nullopt;\n  mutex_lock l(lock_);\n  return *stats_;\n}\n\nbool GpuCudaMallocAsyncAllocator::ClearStats() {\n  if (!stats_) return false;\n  mutex_lock l(lock_);\n  stats_->num_allocs = 0;\n  stats_->peak_bytes_in_use = stats_->bytes_in_use;\n  stats_->largest_alloc_size = 0;\n  return true;\n}\n\nvoid GpuCudaMallocAsyncAllocator::SetStream(void* stream) {\n#if TF_CUDA_MALLOC_ASYNC_SUPPORTED\n  uint64_t pool_size_64 = 0;\n  if (auto status = cuMemPoolGetAttribute(\n          pool_, CU_MEMPOOL_ATTR_RELEASE_THRESHOLD, &pool_size_64)) {\n    LOG(FATAL) <<  // Crash OK.\n        \"Failed to get CUDA pool attribute: \" << GetCudaErrorMessage(status);\n\n  }\n  cuda_stream_ = *(reinterpret_cast<CUstream*>(stream));\n  int64 prealloc_size = 0;\n  // TF_CUDA_MALLOC_ASYNC_SUPPORTED_PREALLOC=-1 is a special value that\n  // preallocates the total pool size.\n  TF_CHECK_OK(ReadInt64FromEnvVar(\"TF_CUDA_MALLOC_ASYNC_SUPPORTED_PREALLOC\", 0,\n                                  &prealloc_size));\n  if (prealloc_size == -1) {\n    prealloc_size = pool_size_64;\n  } else if (reserve_memory_) {\n    prealloc_size = pool_size_64;\n  }\n\n  if (prealloc_size != 0) {\n    void* ptr = AllocateRaw(0, prealloc_size);\n    DeallocateRaw(ptr);\n    VLOG(2) << Name() << \" GpuCudaMallocAsyncAllocator reserved the pool for \"\n            << prealloc_size << \" bytes\"\n            << \". First ptr: \" << ptr;\n    ClearStats();"
},
{
    "Id": 307,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a7908e924af3105c3007988e219855174b26774f",
    "Violation": "missing",
    "Bug report": "Added check for output buffer ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  jpeg_read_header(&cinfo, TRUE);\n  jpeg_start_decompress(&cinfo);  // required to transfer image size to cinfo\n  if (width) *width = cinfo.output_width;\n  if (height) *height = cinfo.output_height;\n  if (components) *components = cinfo.output_components;\n\n  jpeg_destroy_decompress(&cinfo);\n\n  return true;\n}\n\n// -----------------------------------------------------------------------------\n// Compression\n\nnamespace {\nbool CompressInternal(const uint8* srcdata, int width, int height,\n                      const CompressFlags& flags, tstring* output) {\n  output->clear();\n  const int components = (static_cast<int>(flags.format) & 0xff);\n\n  int64 total_size = static_cast<int64>(width) * static_cast<int64>(height);\n  // Some of the internal routines do not gracefully handle ridiculously\n  // large images, so fail fast.\n  if (width <= 0 || height <= 0) {\n    LOG(ERROR) << \"Invalid image size: \" << width << \" x \" << height;\n    return false;\n  }\n  if (total_size >= (1LL << 29)) {\n    LOG(ERROR) << \"Image too large: \" << total_size;\n    return false;\n  }\n\n  int in_stride = flags.stride;\n  if (in_stride == 0) {\n    in_stride = width * (static_cast<int>(flags.format) & 0xff);\n  } else if (in_stride < width * components) {\n    LOG(ERROR) << \"Incompatible input stride\";"
},
{
    "Id": 308,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/04b97cde86550995da57d16d81084006456ccce5",
    "Violation": "missing",
    "Bug report": "Fix segmentation fault with tf.stack an keras's Input in TF2.0. This fix adds the `PySequence_Fast` and checks the return value to make sure it is not nullptr.",
    "Number of deleted lines": 2,
    "Deleted lines": "  // TODO(nareshmodi): fix\n  return false;\n}\n\nbool CheckInputsOk(PyObject* seq, int start_index,\n                   const tensorflow::OpDef& op_def) {\n  for (int i = 0; i < op_def.input_arg_size(); i++) {\n    PyObject* item = PyTuple_GET_ITEM(seq, i + start_index);\n    if (!op_def.input_arg(i).number_attr().empty() ||\n        !op_def.input_arg(i).type_list_attr().empty()) {\n      // This item should be a seq input.\n      if (!PySequence_Check(item)) {\n        VLOG(1) << \"Falling back to slow path for Op \\\"\" << op_def.name()\n                << \"\\\", Input \\\"\" << op_def.input_arg(i).name()\n                << \"\\\" since we expected a sequence, but got \"\n                << item->ob_type->tp_name;\n        return false;\n      }\n      for (Py_ssize_t j = 0; j < PySequence_Fast_GET_SIZE(item); j++) {\n        PyObject* inner_item = PySequence_Fast_GET_ITEM(item, j);\n        if (!CheckOneInput(inner_item)) {\n          VLOG(1) << \"Falling back to slow path for Op \\\"\" << op_def.name()\n                  << \"\\\", Input \\\"\" << op_def.input_arg(i).name()\n                  << \"\\\", Index \" << j\n                  << \" since we expected an EagerTensor/ResourceVariable, \"\n                     \"but got \"\n                  << inner_item->ob_type->tp_name;\n          return false;\n        }\n      }\n    } else if (!CheckOneInput(item)) {\n      VLOG(1)\n          << \"Falling back to slow path for Op \\\"\" << op_def.name()\n          << \"\\\", Input \\\"\" << op_def.input_arg(i).name()\n          << \"\\\" since we expected an EagerTensor/ResourceVariable, but got \"\n          << item->ob_type->tp_name;\n      return false;\n    }\n  }\n"
},
{
    "Id": 309,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/cd8d0bf58ad554588012898161c91fa453bbf7f0",
    "Violation": "missing",
    "Bug report": "Address edge case where runStats is null and the interface is closed.",
    "Number of deleted lines": 1,
    "Deleted lines": "      runStats = new RunStats();\n    }\n  }\n\n  /** Returns the last stat summary string if logging is enabled. */\n  public String getStatString() {\n    return (runStats == null) ? \"\" : runStats.summary();\n  }\n\n  /**\n   * Cleans up the state associated with this Object. initializeTensorFlow() can then be called\n   * again to initialize a new session.\n   */\n  public void close() {\n    closeFeeds();\n    closeFetches();\n    sess.close();\n    g.close();\n    runStats.close();\n    runStats = null;\n    enableStats = false;\n  }\n\n  // Methods for taking a native Tensor and filling it with values from Java arrays.\n\n  /**\n   * Given a source array with shape {@link dims} and content {@link src}, copy the contents into\n   * the input Tensor with name {@link inputName}. The source array {@link src} must have at least\n   * as many elements as that of the destination Tensor. If {@link src} has more elements than the\n   * destination has capacity, the copy is truncated.\n   */\n  public void fillNodeFloat(String inputName, int[] dims, float[] src) {\n    addFeed(inputName, Tensor.create(mkDims(dims), FloatBuffer.wrap(src)));\n  }\n\n  /**\n   * Given a source array with shape {@link dims} and content {@link src}, copy the contents into\n   * the input Tensor with name {@link inputName}. The source array {@link src} must have at least\n   * as many elements as that of the destination Tensor. If {@link src} has more elements than the"
},
{
    "Id": 310,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1a1a381b5be7701843c3f1e34aa1846ae2a1d0ce",
    "Violation": "improper",
    "Bug report": "Fix a SIGSEGV bug in InferShapeForXlaGatherOp. Since `ComputeOutputComponent` may return nullptr, we need to check for null attributes explicitly to be safe.",
    "Number of deleted lines": 1,
    "Deleted lines": "  xla::Shape input_shape = xla::TypeToShape(op.getOperand().getType());\n  if (input_shape == xla::Shape() || input_shape.is_unbounded_dynamic())\n    return false;\n\n  xla::Shape start_indices_shape =\n      xla::TypeToShape(op.getStartIndices().getType());\n  if (start_indices_shape == xla::Shape()) return false;\n\n  xla::GatherDimensionNumbers gather_dim_numbers;\n  if (!gather_dim_numbers.ParseFromString(op.getDimensionNumbers().str()))\n    return false;\n\n  DenseIntElementsAttr slice_sizes_attr;\n  if (DenseIntElementsAttr attr;\n      matchPattern(op.getSliceSizes(), m_Constant(&attr))) {\n    slice_sizes_attr = attr;\n  } else if (const auto it = results_.find(ValuePort(op.getSliceSizes()));\n             it != results_.end() &&\n             llvm::isa<DenseIntElementsAttr>(it->second)) {\n    slice_sizes_attr = llvm::cast<DenseIntElementsAttr>(it->second);\n  } else {\n    return false;\n  }\n\n  llvm::SmallVector<int64_t> slice_sizes;\n  for (const auto& attr : slice_sizes_attr.getValues<APInt>()) {\n    slice_sizes.push_back(attr.getSExtValue());\n  }\n\n  auto output_shape = xla::ShapeInference::InferGatherShape(\n      input_shape, start_indices_shape, gather_dim_numbers, slice_sizes);\n  if (!output_shape.ok()) {\n    op->emitError() << output_shape.status().message();\n    return false;\n  }\n\n  auto refined_type = xla::ConvertShapeToType<RankedTensorType>(\n      *output_shape, mlir::Builder(op));\n  if (!refined_type.ok()) {"
},
{
    "Id": 311,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9720b405905dee209a3f7d003de21d388e1aaef4",
    "Violation": "improper",
    "Bug report": " Avoid nullptr as row offsets to cusparseCreateCsr. As of CUDA 12.2 additional input validation allows NULL for the row offsets only when rows=0.",
    "Number of deleted lines": 1,
    "Deleted lines": "                         a_input_dense_shape(a_input_dense_shape.size() - 2),\n                         a_input_dense_shape(a_input_dense_shape.size() - 1),\n                         a_input_matrix->col_indices_vec(a_batch).size(),\n                         a_input_matrix->row_pointers_vec(a_batch).data(),\n                         a_input_matrix->col_indices_vec(a_batch).data(),\n                         a_input_matrix->values_vec<T>(a_batch).data()));\n      OP_REQUIRES_OK(ctx,\n                     matB.InitializeCsr(\n                         b_input_dense_shape(b_input_dense_shape.size() - 2),\n                         b_input_dense_shape(b_input_dense_shape.size() - 1),\n                         b_input_matrix->col_indices_vec(b_batch).size(),\n                         b_input_matrix->row_pointers_vec(b_batch).data(),\n                         b_input_matrix->col_indices_vec(b_batch).data(),\n                         b_input_matrix->values_vec<T>(b_batch).data()));\n      OP_REQUIRES_OK(ctx,\n                     matC.InitializeCsr<int, T>(\n                         a_input_dense_shape(a_input_dense_shape.size() - 2),\n                         b_input_dense_shape(b_input_dense_shape.size() - 1), 0,\n                         nullptr, nullptr, nullptr));\n\n      // Check required size for buffer1 and possibly re-allocate\n      size_t bufferSize1;\n      OP_REQUIRES_OK(\n          ctx, cudaSparse.SpGEMM_workEstimation<T>(matA, matB, matC, gemmDesc,\n                                                   &bufferSize1, nullptr));\n      if (bufferSize1 > buffer1_t.NumElements()) {\n        OP_REQUIRES_OK(\n            ctx, ctx->allocate_temp(\n                     DT_INT8, TensorShape({static_cast<int64_t>(bufferSize1)}),\n                     &buffer1_t));\n      }\n      void* buffer1 = buffer1_t.flat<int8>().data();\n\n      // Do workEstimation using buffer1.\n      // buffer1 implicitly captured in gemmDesc for use in the compute call.\n      OP_REQUIRES_OK(\n          ctx, cudaSparse.SpGEMM_workEstimation<T>(matA, matB, matC, gemmDesc,\n                                                   &bufferSize1, buffer1));\n"
},
{
    "Id": 312,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/47eaa828a1dd4bf50ec4203ef4bbb348b3ef0dd0",
    "Violation": "missing",
    "Bug report": "Add nullptr check",
    "Number of deleted lines": 0,
    "Deleted lines": "int TF_NumInputs(TF_OpKernelContext* ctx) {\n  auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);\n  return cc_ctx->num_inputs();\n}\n\nint TF_NumOutputs(TF_OpKernelContext* ctx) {\n  auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);\n  return cc_ctx->num_outputs();\n}\n\nvoid TF_GetInput(TF_OpKernelContext* ctx, int i, TF_Tensor** tensor,\n                 TF_Status* status) {\n  auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);\n  if (i < 0 || i >= cc_ctx->num_inputs()) {\n    TF_SetStatus(status, TF_OUT_OF_RANGE, \"input index out of range\");\n    return;\n  }\n  const ::tensorflow::Tensor& cc_tensor(cc_ctx->input(i));\n  TF_Tensor* result =\n      ::tensorflow::TF_TensorFromTensor(cc_tensor, &status->status);\n  if (TF_GetCode(status) == TF_OK) {\n    *tensor = result;\n  }\n}\n\nvoid TF_InputRange(TF_OpKernelContext* ctx, const char* name,\n                   TF_InputRange_Args* args) {\n  auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);\n  int start = -1, stop = -1;\n  auto status = cc_ctx->op_kernel().InputRange(name, &start, &stop);\n  args->start = start;\n  args->stop = stop;\n  tensorflow::Set_TF_Status_from_Status(args->status, status);\n}\n\nTF_DataType TF_InputDatatype(TF_OpKernelContext* ctx, int index) {\n  auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);\n  CHECK_GE(index, 0);                     // Crash OK"
},
{
    "Id": 313,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c2fc1f2b5a8b8152c43b81cf31394f3e0a2cb837",
    "Violation": "missing",
    "Bug report": "Add null pointer check",
    "Number of deleted lines": 0,
    "Deleted lines": "        LOG(WARNING) << \"GEMM ldb (\" << ldb << \") was smaller than k (\" << k\n                     << \") (no transpose case); precondition violation\";\n      }\n    } else {\n      if (ldb < static_cast<int64_t>(n)) {\n        LOG(WARNING) << \"GEMM ldb was smaller than n (transpose case); \"\n                        \"precondition violation\";\n      }\n    }\n  }\n\n  VLOG(1) << absl::StrFormat(\n      \"doing cuBLAS SGEMM: at=%d bt=%d m=%u n=%u \"\n      \"k=%u alpha=%p a=%p lda=%d b=%p ldb=%d beta=%p \"\n      \"c=%p ldc=%d\",\n      static_cast<int>(transa), static_cast<int>(transb), m, n, k, alpha,\n      a.opaque(), lda, b.opaque(), ldb, beta, c->opaque(), ldc);\n\n  switch (dtype) {\n    case blas::DataType::kHalf: {\n#if CUDA_VERSION < 7050\n      return tsl::errors::Internal(\n          \"fp16 sgemm is not implemented in this cuBLAS version \"\n          \"(need at least CUDA 7.5)\");\n#endif\n\n      return DoBlasInternalImpl(\n          cublasSgemmEx, stream, true /* = pointer_mode_host */, math_type,\n          AsCublasOperation(transa), AsCublasOperation(transb), m, n, k,\n          static_cast<const float *>(alpha), a.opaque(), SE_CUDA_DATA_HALF, lda,\n          b.opaque(), SE_CUDA_DATA_HALF, ldb, static_cast<const float *>(beta),\n          c->opaque(), SE_CUDA_DATA_HALF, ldc);\n    }\n#if CUDA_VERSION > 11000\n    case blas::DataType::kBF16: {\n      return DoBlasInternalImpl(\n          cublasSgemmEx, stream, true /* = pointer_mode_host */, math_type,\n          AsCublasOperation(transa), AsCublasOperation(transb), m, n, k,"
},
{
    "Id": 314,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b677392e4af8095dbde8068b0ceb60bca815e94b",
    "Violation": "missing",
    "Bug report": " Reject non-PjRt devices in PjRtArray::Reshard(). PjRt buffers traditionally support some degree of interoperability between PjRt clients (e.g., CPU and TPU). However, this is not universally true between arbitrary IFRT clients that may use a non-PjRt-compatible runtime. This change adds extra checks to make sure that non-PjRt devices are not accidentally used in PjRtArray's destination devices.",
    "Number of deleted lines": 0,
    "Deleted lines": "  for (int i = 0; i < pjrt_buffers_.size(); ++i) {\n    if (pjrt_buffers_[i]->device() == new_sharding->devices()[i]) {\n      switch (semantics) {\n        case ArrayCopySemantics::kAlwaysCopy:\n          // TODO(hyeontaek): kAlwaysCopy should clone the buffer, but the PjRt\n          // API does not have efficient buffer cloning on the same device.\n          buffers.push_back(pjrt_buffers_[i]);\n          break;\n        case ArrayCopySemantics::kReuseInput:\n          buffers.push_back(pjrt_buffers_[i]);\n          break;\n        case ArrayCopySemantics::kDonateInput:\n          // TODO(hyeontaek): We may try std::move(pjrt_buffers_[i]), but this\n          // would be unsafe if there is a subsequent access to the buffer.\n          buffers.push_back(pjrt_buffers_[i]);\n          break;\n      }\n    } else {\n      TF_ASSIGN_OR_RETURN(\n          std::unique_ptr<xla::PjRtBuffer> copied_buffer,\n          pjrt_buffers_[i]->CopyToDevice(new_sharding->devices()[i]));\n      if (semantics == ArrayCopySemantics::kDonateInput) {\n        pjrt_buffers_[i] = nullptr;\n      }\n      buffers.push_back(std::shared_ptr<PjRtBuffer>(copied_buffer.release()));\n    }\n  }\n  return PjRtArray::Create(client_, dtype_, shape_, std::move(new_sharding),\n                           std::move(buffers));\n}\n\nFuture<Status> PjRtArray::GetReadyFuture() const {\n  DCHECK(this);\n  if (pjrt_buffers_.size() == 1) {\n    return pjrt_buffers_.front()->GetReadyFuture();\n  }\n  std::vector<Future<Status>> futures;\n  futures.reserve(pjrt_buffers_.size());"
},
{
    "Id": 315,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/aaa3fb49374d59c89115730c8e2f672e70b9e3fa",
    "Violation": "missing",
    "Bug report": " [TFLite] Bucketize op: Fix processing of bucket boundary array. The param value may be a nullptr, which is an error; we should catch this and avoid dereferencing it.",
    "Number of deleted lines": 0,
    "Deleted lines": "    case BuiltinOperator_RANDOM_STANDARD_NORMAL: {\n      auto params = safe_allocator.Allocate<TfLiteRandomParams>();\n      TF_LITE_ENSURE(error_reporter, params != nullptr);\n      if (const auto* random_std_normal_params =\n              op->builtin_options_as_RandomOptions()) {\n        params->seed = random_std_normal_params->seed();\n        params->seed2 = random_std_normal_params->seed2();\n      }\n      *builtin_data = params.release();\n      return kTfLiteOk;\n    }\n    case BuiltinOperator_BUCKETIZE: {\n      auto params = safe_allocator.Allocate<TfLiteBucketizeParams>();\n      TF_LITE_ENSURE(error_reporter, params != nullptr);\n      if (const auto* bucketize_params =\n              op->builtin_options_as_BucketizeOptions()) {\n        const flatbuffers::Vector<float>* boundaries =\n            bucketize_params->boundaries();\n        params->num_boundaries = boundaries->size();\n        params->boundaries = boundaries->data();\n      }\n      *builtin_data = params.release();\n      return kTfLiteOk;\n    }\n    case BuiltinOperator_RANDOM_UNIFORM: {\n      auto params = safe_allocator.Allocate<TfLiteRandomParams>();\n      TF_LITE_ENSURE(error_reporter, params != nullptr);\n      if (const auto* random_uniform_params =\n              op->builtin_options_as_RandomOptions()) {\n        params->seed = random_uniform_params->seed();\n        params->seed2 = random_uniform_params->seed2();\n      }\n      *builtin_data = params.release();\n      return kTfLiteOk;\n    }\n    // Below are the ops with no builtin_data structure.\n    // TODO(aselle): Implement call in BuiltinOptions, but nullptrs are\n    // ok for now, since there is no call implementation either.\n    case BuiltinOperator_CALL:"
},
{
    "Id": 316,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1835465ac5a9c823f7187cb0dd5786da9c360838",
    "Violation": "missing",
    "Bug report": " Add error_reporter DCHECK back into SimpleMemoryAllocator. This check was removed due to an internal build problem.",
    "Number of deleted lines": 0,
    "Deleted lines": "\nSimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,\n                                             uint8_t* buffer_head,\n                                             uint8_t* buffer_tail)\n    : error_reporter_(error_reporter),\n      buffer_head_(buffer_head),\n      buffer_tail_(buffer_tail),\n      head_(buffer_head),\n      tail_(buffer_tail) {}\n\nSimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,\n                                             uint8_t* buffer,\n                                             size_t buffer_size)\n    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}\n\n/* static */\nSimpleMemoryAllocator* SimpleMemoryAllocator::Create(\n    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {\n  TFLITE_DCHECK(buffer_head != nullptr);\n  SimpleMemoryAllocator tmp =\n      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);\n\n  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.\n  // The new instance will use the current adjusted tail buffer from the tmp\n  // allocator instance.\n  uint8_t* allocator_buffer = tmp.AllocateFromTail(\n      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));\n  // Use the default copy constructor to populate internal states.\n  return new (allocator_buffer) SimpleMemoryAllocator(tmp);\n}\n\nSimpleMemoryAllocator::~SimpleMemoryAllocator() {}\n\nuint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,\n                                                 size_t alignment) {\n  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);\n  const size_t available_memory = tail_ - aligned_result;\n  if (available_memory < size) {"
},
{
    "Id": 317,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/7578e120de2a3a5282ced8d41881f19363f83466",
    "Violation": "missing",
    "Bug report": " Fix crash on closing the app when classifier failed to initialize. When testing on an API 21 emulator, the classifier fails to initialize. The fix is to check for null before calling `.close()`.",
    "Number of deleted lines": 1,
    "Deleted lines": "    // a camera and start preview from here (otherwise, we wait until the surface is ready in\n    // the SurfaceTextureListener).\n    if (textureView.isAvailable()) {\n      openCamera(textureView.getWidth(), textureView.getHeight());\n    } else {\n      textureView.setSurfaceTextureListener(surfaceTextureListener);\n    }\n  }\n\n  @Override\n  public void onPause() {\n    closeCamera();\n    stopBackgroundThread();\n    super.onPause();\n  }\n\n  @Override\n  public void onDestroy() {\n    classifier.close();\n    super.onDestroy();\n  }\n\n  /**\n   * Sets up member variables related to camera.\n   *\n   * @param width The width of available size for camera preview\n   * @param height The height of available size for camera preview\n   */\n  private void setUpCameraOutputs(int width, int height) {\n    Activity activity = getActivity();\n    CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\n    try {\n      for (String cameraId : manager.getCameraIdList()) {\n        CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);\n\n        // We don't use a front facing camera in this sample.\n        Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);\n        if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {\n          continue;"
},
{
    "Id": 318,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c1b9ac9f215a3a83f7f0b6233bf4cef0b3e74598",
    "Violation": "missing",
    "Bug report": "Error checking in c/python code.",
    "Number of deleted lines": 0,
    "Deleted lines": "  Py_ssize_t size = PyList_Size(keys);\n  for (Py_ssize_t i = 0; i < size; ++i) {\n    // We know that key and item will not be deleted because nested owns\n    // a reference to them and callers of flatten must not modify nested\n    // while the method is running.\n    PyObject* key = PyList_GET_ITEM(keys, i);\n    PyObject* item = PyDict_GetItem(nested, key);\n    Py_INCREF(item);\n    next_values->emplace_back(item);\n  }\n  Py_DECREF(keys);\n  return true;\n}\n\nbool GetNextValuesForIterable(PyObject* nested,\n                              std::vector<Safe_PyObjectPtr>* next_values) {\n  PyObject* item;\n  PyObject* iterator = PyObject_GetIter(nested);\n  while ((item = PyIter_Next(iterator)) != nullptr) {\n    next_values->emplace_back(item);\n  }\n  Py_DECREF(iterator);\n  return true;\n}\n\n// GetNextValues returns the values that the FlattenHelper function will recurse\n// over next.\nbool GetNextValues(PyObject* nested,\n                   std::vector<Safe_PyObjectPtr>* next_values) {\n  if (PyDict_Check(nested)) {\n    // if nested is dictionary, sort it by key and recurse on each value\n    return GetNextValuesForDict(nested, next_values);\n  }\n  // iterate and recurse\n  return GetNextValuesForIterable(nested, next_values);\n}\n\n// Similar to above, just specialized for the functions in the data pacakage."
},
{
    "Id": 319,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/ed043aec4962dfdc3c58e2ad90dacb557dafcf4e",
    "Violation": "missing",
    "Bug report": " Lite: ResizeTensor Dim size check added to avoid reallocation if no change",
    "Number of deleted lines": 0,
    "Deleted lines": "      return ReportOpError(context_, node, registration, node_index,\n                           \"failed to invoke\");\n    }\n\n    // Force execution prep for downstream ops if the latest op triggered the\n    // resize of a dynamic tensor.\n    if (tensor_resized_since_op_invoke_ &&\n        HasDynamicTensor(*context_, node.outputs)) {\n      next_execution_plan_index_to_prepare_ = execution_plan_index + 1;\n    }\n  }\n\n  return status;\n}\n\nTfLiteStatus Subgraph::ResizeTensor(TfLiteContext* context,\n                                    TfLiteTensor* tensor,\n                                    TfLiteIntArray* new_size) {\n  // Note here that context->impl_ is recovering the this pointer for an\n  // instance of Interpreter to call into the member function ResizeTensorImpl\n  // (this function is static).\n  return static_cast<Subgraph*>(context->impl_)\n      ->ResizeTensorImpl(tensor, new_size);\n}\n\nvoid Subgraph::ReportErrorImpl(const char* format, va_list args) {\n  error_reporter_->Report(format, args);\n}\n\nvoid Subgraph::ReportErrorC(TfLiteContext* context, const char* format, ...) {\n  va_list args;\n  va_start(args, format);\n  auto* f = static_cast<Subgraph*>(context->impl_);\n  // Note here that context->impl_ is recovering the this pointer for an\n  // instance of Subgraph to call into the member function ReportErrorImpl\n  // (this function is static).\n  f->ReportErrorImpl(format, args);\n  va_end(args);"
},
{
    "Id": 320,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/20d54796563631c23c27548b321487e8b0c982a9",
    "Violation": "insufficient",
    "Bug report": " Add a nil check before init the device_name string, and also assign an empty string as a placeholder.",
    "Number of deleted lines": 1,
    "Deleted lines": "      // For quantized models, actual outputs of GPU graph are float tensors, so they should be\n      // quantized to be the 8-bit outputs of delegate.\n      if (options_.enable_quantization &&\n          quant_conversion_map_.find(tensor_index) != quant_conversion_map_.end()) {\n        tensor_index = quant_conversion_map_[tensor_index];\n        tensor = &context->tensors[tensor_index];\n      }\n      const auto* output = find_value(tensor_index);\n      if (!output || tensor->type != TfLiteType::kTfLiteFloat32) {\n        return absl::NotFoundError(\"Output tensor is not found in the graph.\");\n      }\n\n      outputs_.push_back(output->id);\n      output_tensor_ids_.push_back(tensor_index);\n      tensor->buffer_handle = output->id;\n      tensor->delegate = &delegate_;\n    }\n\n    std::string device_name = std::string([[metal_device_ name] UTF8String]);\n    GpuInfo gpu_info;\n    GetGpuInfoFromDeviceDescription(device_name, GpuApi::kMetal, &gpu_info);\n    size_t storage_type_size;\n    CalculationsPrecision precision;\n    if (options_.allow_precision_loss) {\n      storage_type_size = sizeof(HalfBits);\n      if (gpu_info.IsRoundToNearestSupported()) {\n        precision = CalculationsPrecision::F16;\n      } else {\n        precision = CalculationsPrecision::F32_F16;\n      }\n    } else {\n      storage_type_size = sizeof(float);\n      precision = CalculationsPrecision::F32;\n    }\n\n    CreateGpuModelInfo create_info;\n    create_info.precision = precision;\n    create_info.storage_type = GetFastestStorageType(gpu_info);\n    create_info.hints.Add(ModelHints::kAllowSpecialKernels);"
},
{
    "Id": 321,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/db10718b38b2884cb5ed46d33c135c079f649d16",
    "Violation": "missing",
    "Bug report": "With some memory allocators, attempting to allocate 0 bytes will return a null pointer. This specifically happens when building tensorflow with mkl support. If TF_TensorData returns null, the go code to create a slice from the data leads to a null pointer exception. This fixes the issue by checking for the nil return and returning a slice zero value to (nil) to the caller. ",
    "Number of deleted lines": 0,
    "Deleted lines": "// WriteContentsTo writes the serialized contents of t to w.\n//\n// Returns the number of bytes written. See ReadTensor for\n// reconstructing a Tensor from the serialized form.\n//\n// WARNING: WriteContentsTo is not comprehensive and will fail\n// if t.DataType() is non-numeric (e.g., String). See\n// https://github.com/tensorflow/tensorflow/issues/6003.\nfunc (t *Tensor) WriteContentsTo(w io.Writer) (int64, error) {\n\tif err := isTensorSerializable(t.DataType()); err != nil {\n\t\treturn 0, err\n\t}\n\treturn io.Copy(w, bytes.NewReader(tensorData(t.c)))\n}\n\nfunc tensorData(c *C.TF_Tensor) []byte {\n\t// See: https://github.com/golang/go/wiki/cgo#turning-c-arrays-into-go-slices\n\tcbytes := C.TF_TensorData(c)\n\tlength := int(C.TF_TensorByteSize(c))\n\tslice := (*[1 << 30]byte)(unsafe.Pointer(cbytes))[:length:length]\n\treturn slice\n}\n\nvar types = []struct {\n\ttyp      reflect.Type\n\tdataType C.TF_DataType\n}{\n\t{reflect.TypeOf(float32(0)), C.TF_FLOAT},\n\t{reflect.TypeOf(float64(0)), C.TF_DOUBLE},\n\t{reflect.TypeOf(int32(0)), C.TF_INT32},\n\t{reflect.TypeOf(uint32(0)), C.TF_UINT32},\n\t{reflect.TypeOf(uint8(0)), C.TF_UINT8},\n\t{reflect.TypeOf(int16(0)), C.TF_INT16},\n\t{reflect.TypeOf(int8(0)), C.TF_INT8},\n\t{reflect.TypeOf(\"\"), C.TF_STRING},\n\t{reflect.TypeOf(complex(float32(0), float32(0))), C.TF_COMPLEX64},\n\t{reflect.TypeOf(int64(0)), C.TF_INT64},\n\t{reflect.TypeOf(uint64(0)), C.TF_UINT64},"
},
{
    "Id": 322,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/2465d4e77654f0d4f7799bc46d5fd5812590acc6",
    "Violation": "missing",
    "Bug report": " Add a check in auto-sharding setup and die if the input mesh shape contains more than two shardable dimensions, which is currently not supported.",
    "Number of deleted lines": 0,
    "Deleted lines": "    if (device_mesh_shape.empty()) {\n      return tsl::errors::OutOfRange(\n          \"device_mesh_shape is empty and it needs to be specified.\");\n    }\n    if (device_mesh_shape.size() > 3) {\n      return tsl::errors::OutOfRange(\n          absl::StrCat(\"Not supported: the length of device_mesh_shape is \"\n                       \"greater than 3, actual length: \",\n                       device_mesh_shape.size()));\n    }\n    // All values in device_mesh_shape must be greater than 0.\n    if (absl::c_any_of(device_mesh_shape,\n                       [](const int64_t i) { return i <= 0; })) {\n      return tsl::errors::OutOfRange(\n          absl::StrCat(\"device_mesh_shape values need to be larger than 0: \"\n                       \"device_mesh_shape=\",\n                       absl::StrJoin(device_mesh_shape, \",\")));\n    }\n    if (device_mesh_alpha.empty()) {\n      // Generates simple device_mesh_alpha based on the size of\n      // device_mesh_shape.\n      device_mesh_alpha =\n          std::vector(device_mesh_shape.size(), kDeviceMeshAlpha);\n      VLOG(0) << \"Using default values for device_mesh_alpha: \"\n              << absl::StrJoin(device_mesh_alpha, \",\");\n    }\n    if (device_mesh_beta.empty()) {\n      // Generates simple device_mesh_beta based on the size of\n      // device_mesh_shape.\n      device_mesh_beta = std::vector(device_mesh_shape.size(), kDeviceMeshBeta);\n      VLOG(0) << \"Using default values for device_mesh_beta: \"\n              << absl::StrJoin(device_mesh_beta, \",\");\n    }\n\n    // If device_mesh_shape has only one value, append 1 to it\n    if (device_mesh_shape.size() == 1) {\n      device_mesh_shape.push_back(1);\n      device_mesh_alpha.push_back(1.0);"
},
{
    "Id": 323,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/3e0152a8b4aad03dd06274e0dd3b94bd5f8bf5d3",
    "Violation": "missing",
    "Bug report": "Fix invalid syntax error when import carla is present. The issue is that, when `import carla` is invoked, I/O operation for `std::ostringstream s` might fail, which caused the conversion of AttrValue to string as empty. This PR check `s.good()` to make sure the I/O operation is OK, and, fallback to normal conversion if locale-neutral I/O operation fails.",
    "Number of deleted lines": 1,
    "Deleted lines": "// NOTE: The return value may contain spaces (for example, it could be\n// a string \"foo bar\" with an embedded space) and is not safe to pass\n// to WordWrap().\nstring AttrValueToPython(const string& type, const AttrValue& value,\n                         const string& dtype_module) {\n  if (type == \"string\") {\n    return StringToPython(value.s());\n  } else if (type == \"int\") {\n    return strings::StrCat(value.i());\n  } else if (type == \"float\") {\n    if (std::isnan(value.f()) || std::isinf(value.f())) {\n      return strings::StrCat(\"float('\", value.f(), \"')\");\n    } else {\n      // Use locale-independent conversion.\n      static_assert(FLT_DIG < 10, \"FLT_DIG is too big\");\n      std::ostringstream s;\n      s.imbue(std::locale::classic());\n      s << std::setprecision(FLT_DIG) << value.f();\n      return s.str();\n    }\n  } else if (type == \"bool\") {\n    return value.b() ? \"True\" : \"False\";\n  } else if (type == \"type\") {\n    return DataTypeToPython(value.type(), dtype_module);\n  } else if (type == \"shape\") {\n    return ShapeToPython(value.shape());\n  } else if (type == \"tensor\") {\n    return TensorToPython(value.tensor());\n  } else if (type == \"func\") {\n    return StringToPython(value.func().name());\n  } else if (absl::StartsWith(type, \"list(\")) {\n    return strings::StrCat(\"[\", AttrListToPython(value, dtype_module), \"]\");\n  } else {\n    return \"?\";\n  }\n}\n\nvoid GenerateLowerCaseOpName(const string& str, string* result) {\n  const char joiner = '_';"
},
{
    "Id": 324,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/0317f64491ba42376d96b157983a02d8b31b679e",
    "Violation": "improper",
    "Bug report": " Update RNNCell._rnn_get_variable to use Variable._trainable in TF2 mode. When using a legacy RNNCell in TF2 mode within a tf.function the \"var in trainable_variables()\" check led to treating a tf.bool tensor as a Python bool. This change makes use within a tf.function use the same logic that is used in Eager mode.",
    "Number of deleted lines": 2,
    "Deleted lines": "        the arity and shapes of `state`.\n    \"\"\"\n    if scope is not None:\n      with vs.variable_scope(\n          scope, custom_getter=self._rnn_get_variable) as scope:\n        return super(RNNCell, self).__call__(inputs, state, scope=scope)\n    else:\n      scope_attrname = \"rnncell_scope\"\n      scope = getattr(self, scope_attrname, None)\n      if scope is None:\n        scope = vs.variable_scope(\n            vs.get_variable_scope(), custom_getter=self._rnn_get_variable)\n        setattr(self, scope_attrname, scope)\n      with scope:\n        return super(RNNCell, self).__call__(inputs, state)\n\n  def _rnn_get_variable(self, getter, *args, **kwargs):\n    variable = getter(*args, **kwargs)\n    if context.executing_eagerly():\n      trainable = variable._trainable  # pylint: disable=protected-access\n    else:\n      trainable = (\n          variable in tf_variables.trainable_variables() or\n          (isinstance(variable, tf_variables.PartitionedVariable) and\n           list(variable)[0] in tf_variables.trainable_variables()))\n    if trainable and all(variable is not v for v in self._trainable_weights):\n      self._trainable_weights.append(variable)\n    elif not trainable and all(\n        variable is not v for v in self._non_trainable_weights):\n      self._non_trainable_weights.append(variable)\n    return variable\n\n  @property\n  def state_size(self):\n    \"\"\"size(s) of state(s) used by this cell.\n\n    It can be represented by an Integer, a TensorShape or a tuple of Integers\n    or TensorShapes.\n    \"\"\"\n    raise NotImplementedError(\"Abstract method\")"
},
{
    "Id": 325,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b8c517ab4ef0bd851ef2f8187935fd3a90261af5",
    "Violation": "missing",
    "Bug report": "Reinstate eager check inside _GradientsHelper",
    "Number of deleted lines": 0,
    "Deleted lines": "  for func in func_graphs:\n    for input_t, placeholder in _Captures(func).items():\n      if input_t == t:\n        consumers.extend(_Consumers(placeholder, func_graphs))\n  return consumers\n\n\ndef _GradientsHelper(ys,\n                     xs,\n                     grad_ys=None,\n                     name=\"gradients\",\n                     colocate_gradients_with_ops=False,\n                     gate_gradients=False,\n                     aggregation_method=None,\n                     stop_gradients=None,\n                     unconnected_gradients=UnconnectedGradients.NONE,\n                     src_graph=None):\n  \"\"\"Implementation of gradients().\"\"\"\n  if src_graph is None:\n    src_graph = ops.get_default_graph()\n  try:\n    unconnected_gradients = UnconnectedGradients(unconnected_gradients)\n  except ValueError:\n    raise ValueError(\n        \"Unknown value for unconnected_gradients: %r\" % unconnected_gradients)\n\n  # If src_graph is a _FuncGraph (i.e. a function body), gather it and all\n  # ancestor graphs. This is necessary for correctly handling captured values.\n  func_graphs = []\n  curr_graph = src_graph\n  while _IsFunction(curr_graph):\n    func_graphs.append(curr_graph)\n    if isinstance(curr_graph, FuncGraph):\n      curr_graph = curr_graph.outer_graph\n    else:\n      assert isinstance(curr_graph, framework_function._FuncGraph)  # pylint: disable=protected-access\n      curr_graph = curr_graph._outer_graph  # pylint: disable=protected-access\n"
},
{
    "Id": 326,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c9b4689bc4d4024aa16b7d6cfc1c65fa1ed8486e",
    "Violation": "improper",
    "Bug report": "Removed no longer supported call to in_eager_execution. Swapped context.in_eager_execution() to the currently supported context.executing_eagerly(). Added negation to eager check. In all likelihood, the negation was always supposed to be there since getting default graph in eager mode does not make sense",
    "Number of deleted lines": 1,
    "Deleted lines": "\n@tf_export('profiler.advise')\ndef advise(graph=None, run_meta=None, options=_DEFAULT_ADVISE_OPTIONS):\n  \"\"\"Auto profile and advise.\n\n    Builds profiles and automatically check anomalies of various\n    aspects. For more details:\n    https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/profiler/README.md\n\n  Args:\n    graph: tf.Graph. If None and eager execution is not enabled, use\n        default graph.\n    run_meta: optional tensorflow.RunMetadata proto. It is necessary to\n        to support run time information profiling, such as time and memory.\n    options: see ALL_ADVICE example above. Default checks everything.\n  Returns:\n    Returns AdviceProto proto\n  \"\"\"\n  if not graph and context.in_eager_execution():\n    graph = ops.get_default_graph()\n\n  if options == _DEFAULT_ADVISE_OPTIONS:\n    options = ALL_ADVICE.copy()\n\n  # pylint: disable=protected-access\n  op_log = tfprof_logger.merge_default_with_oplog(\n      graph, None, run_meta, add_trace=True)\n  # pylint: enable=protected-access\n\n  run_meta_str = run_meta.SerializeToString() if run_meta else b''\n\n  opts = _build_advisor_options(options)\n  ret = tfprof_output_pb2.AdviceProto()\n  ret.ParseFromString(\n      print_mdl.PrintModelAnalysis(\n          _graph_string(graph), run_meta_str, op_log.SerializeToString(),\n          'advise'.encode('utf-8'), opts.SerializeToString()))\n  return ret\n"
},
{
    "Id": 327,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e5496b556734bb1d8de85311092804e0150b3009",
    "Violation": "unnecessary",
    "Bug report": " Remove extraneous check for Eager mode.The check is already made once at the start of the method",
    "Number of deleted lines": 2,
    "Deleted lines": "          (condition, \"\\n\".join(data_str)))\n    return\n\n  with ops.name_scope(name, \"Assert\", [condition, data]) as name:\n    xs = ops.convert_n_to_tensor(data)\n    if all([x.dtype in {dtypes.string, dtypes.int32} for x in xs]):\n      # As a simple heuristic, we assume that string and int32 are\n      # on host to avoid the need to use cond. If it is not case,\n      # we will pay the price copying the tensor to host memory.\n      return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n    else:\n      condition = ops.convert_to_tensor(condition, name=\"Condition\")\n\n      def true_assert():\n        return gen_logging_ops._assert(\n            condition, data, summarize, name=\"Assert\")\n\n      guarded_assert = cond(condition, no_op, true_assert, name=\"AssertGuard\")\n      if context.in_eager_mode():\n        return\n      return guarded_assert.op\n\n\ndef _Identity(data, name=None):\n  \"\"\"Return a tensor with the same shape and contents as the input tensor.\n\n  Args:\n    data: A Tensor.\n    name: A name for this operation (optional).\n\n  Returns:\n    A Tensor with the same type and value as the input Tensor.\n  \"\"\"\n  data = ops.internal_convert_to_tensor_or_indexed_slices(data, as_ref=True)\n  if isinstance(data, ops.Tensor):\n    if data.dtype._is_ref_dtype:  # pylint: disable=protected-access\n      return gen_array_ops._ref_identity(data, name=name)\n    else:\n      return array_ops.identity(data, name=name)\n  else:"
},
{
    "Id": 328,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/be5116dd131a92da298dbb68d26e0d47f66f2fe5",
    "Violation": "improper",
    "Bug report": " Correct graph check in broadcast_to gradient. ",
    "Number of deleted lines": 1,
    "Deleted lines": "  indices = op.inputs[1]\n  updates_grad = array_ops.gather_nd(grad, indices)\n  tensor_grad = array_ops.identity(grad)\n  return [tensor_grad, None, -updates_grad]\n\n\n@ops.RegisterGradient(\"ScatterNdNonAliasingAdd\")\ndef _ScatterNdNonAliasingAddGrad(op, grad):\n  indices = op.inputs[1]\n  updates_grad = array_ops.gather_nd(grad, indices)\n  return [grad, None, updates_grad]\n\n\n@ops.RegisterGradient(\"BroadcastTo\")\ndef _BroadcastToGrad(op, grad):\n  input_value = op.inputs[0]\n  broadcast_shape = op.inputs[1]\n  input_value_shape = array_ops.shape(input_value)\n  if not context.executing_eagerly():\n    broadcast_shape_static = tensor_shape.TensorShape(\n        pywrap_tf_session.TF_TryEvaluateConstant_wrapper(\n            broadcast_shape.graph._c_graph, broadcast_shape._as_tf_output()))  # pylint: disable=protected-access\n    if broadcast_shape_static.is_fully_defined():\n      broadcast_shape = constant_op.constant(\n          broadcast_shape_static.as_list(), dtype=dtypes.int32)\n  _, reduction_axes = gen_array_ops.broadcast_gradient_args(\n      broadcast_shape, input_value_shape)\n  updates_grad_reshaped = math_ops.reduce_sum(\n      grad, axis=reduction_axes, keepdims=True)\n  updates_grad = array_ops.reshape(updates_grad_reshaped, input_value_shape)\n  return [updates_grad, None]\n"
},
{
    "Id": 329,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1d6dae88efef68dd7fbeeb5c39ea0f69c1c721c1",
    "Violation": "missing",
    "Bug report": "Add check to tf.device when called with a function in eager mode. ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n\n# TODO(agarwal): currently device directives in an outer eager scope will not\n# apply to inner graph mode code. Fix that.\ndef device(device_name_or_function):\n  \"\"\"Wrapper for `Graph.device()` using the default graph.\n\n  See\n  @{tf.Graph.device}\n  for more details.\n\n  Args:\n    device_name_or_function: The device name or function to use in\n      the context.\n\n  Returns:\n    A context manager that specifies the default device to use for newly\n    created ops.\n  \"\"\"\n  if context.in_graph_mode():\n    return get_default_graph().device(device_name_or_function)\n  else:\n    # TODO(agarwal): support device functions in EAGER mode.\n    return context.device(device_name_or_function)\n\n\ndef container(container_name):\n  \"\"\"Wrapper for `Graph.container()` using the default graph.\n\n  Args:\n    container_name: The container string to use in the context.\n\n  Returns:\n    A context manager that specifies the default container to use for newly\n    created stateful ops.\n  \"\"\"\n  return get_default_graph().container(container_name)\n\n\ndef colocate_with(op, ignore_existing=False):\n  if context.in_graph_mode():\n    return get_default_graph().colocate_with(op, ignore_existing)\n  else:"
},
{
    "Id": 330,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8c3822edbb31cf71cedaf49f2167e45c1e2d0b83",
    "Violation": "missing",
    "Bug report": "Update the is_dtensor check to only run in eager mode.",
    "Number of deleted lines": 0,
    "Deleted lines": "          context.context()._handle,  # pylint: disable=protected-access\n          dtensor,\n          self._device_info)\n    except core._NotOkStatusException as e:  # pylint: disable=protected-access\n      raise core._status_to_exception(e) from None  # pylint: disable=protected-access\n    return layout_lib.Layout.from_string(layout_string)\n\n  def is_dtensor(self, tensor: Any) -> bool:\n    \"\"\"Check whether the input tensor is a DTensor.\n\n    In Python, a DTensor has the same type as a `tf.Tensor`. This method will\n    let you check and handle the tensor differently if a tf.Tensor is a DTensor.\n\n    Args:\n      tensor: an object to be checked.\n\n    Returns:\n      bool, True if the given tensor is a DTensor.\n    \"\"\"\n    if not tensor_util.is_tensor(tensor):\n      return False\n    if isinstance(tensor, variables.Variable):\n      # Get the resource handle for tf.Variable\n      tensor = tensor._handle   # pylint: disable=protected-access\n    return _pywrap_dtensor_device.IsDTensor(\n        context.context()._handle,  # pylint: disable=protected-access\n        tensor,\n        self._device_info,\n    )\n\n  def set_same_shape_policy(self, enabled):\n    \"\"\"Guess layouts using the layouts of other tensors with the same shape.\n\n    This is the default behavior, and is quite safe. The `default_layout` scope\n    overrides shape-based guesses.\n\n    Args:\n      enabled: A boolean indicating whether to use the policy.\n    \"\"\""
},
{
    "Id": 331,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a63f3006f703428ff980748cdbe24d6a13f761e2",
    "Violation": "missing",
    "Bug report": "Skip checking for graph_key in V1 optimizer when running in eager mode.",
    "Number of deleted lines": 1,
    "Deleted lines": "      # non-slot variables from _checkpoint_dependencies explicitly rather\n      # than unconditionally adding dependencies (since there may be multiple\n      # non-slot variables with the same name in different graphs, trying to\n      # save all of them would result in errors).\n      self._handle_deferred_dependencies(name=name, trackable=v)\n      self._non_slot_dict[key] = v\n\n    return v\n\n  def _trackable_children(self,\n                          save_type=trackable.SaveType.CHECKPOINT,\n                          **kwargs):\n    \"\"\"From Trackable. Gather graph-specific non-slot variables to save.\"\"\"\n    current_graph_non_slot_variables = {}\n    current_graph_key = ops.get_default_graph()._graph_key  # pylint: disable=protected-access\n    for (name, _), variable_object in sorted(self._non_slot_dict.items(),\n                                             # Avoid comparing graphs\n                                             key=lambda item: item[0][0]):\n      if variable_object._graph_key == current_graph_key:  # pylint: disable=protected-access\n        current_graph_non_slot_variables[name] = variable_object\n    current_graph_non_slot_variables.update(\n        super(Optimizer, self)._trackable_children(save_type, **kwargs))\n    return current_graph_non_slot_variables\n\n  def _lookup_dependency(self, name):\n    \"\"\"From Trackable. Find a non-slot variable in the current graph.\"\"\"\n    unconditional = super(Optimizer, self)._lookup_dependency(name)\n    if unconditional is not None:\n      return unconditional\n    graph = None if context.executing_eagerly() else ops.get_default_graph()\n    return self._get_non_slot_variable(name, graph=graph)\n\n  def _get_non_slot_variable(self, name, graph=None):\n    non_slot = self._non_slot_dict.get((name, graph), None)\n    if distribute_utils.value_container(non_slot) is not non_slot:\n      # This is a mirrored non-slot.  In order to enable code like `_finish`\n      # to assign to a non-slot, return the current context replica.\n      return non_slot.get()\n    else:"
},
{
    "Id": 332,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/dd7d791e02396346d98b7b2c58137d7e51756c0c",
    "Violation": "missing",
    "Bug report": "Add isinstance check for eager execution.",
    "Number of deleted lines": 2,
    "Deleted lines": "  # When 'v' is a ResourceVariable, the reference op is the handle creating op.\n  #\n  # What this should be is:\n  # if isinstance(v, ResourceVariable):\n  #   return v.handle.op, v\n  # However, that would require a circular import dependency.\n  # As of October 2018, there were attempts underway to remove\n  # colocation constraints altogether. Assuming that will\n  # happen soon, perhaps this hack to work around the circular\n  # import dependency is acceptable.\n  if hasattr(v, \"handle\") and isinstance(v.handle, Tensor):\n    device_only_candidate = lambda: None\n    device_only_candidate.device = v.device\n    device_only_candidate.name = v.name\n    if graph.building_function:\n      return graph.capture(v.handle).op, device_only_candidate\n    else:\n      return v.handle.op, device_only_candidate\n\n  if isinstance(v, internal.NativeObject):\n    return v.op, None\n  else:\n    return convert_to_tensor(v, as_ref=True).op, None\n\n\ndef _is_keras_symbolic_tensor(x):\n  return hasattr(x, \"graph\") and getattr(x.graph, \"name\", None) == \"keras_graph\"\n\n\n# Helper functions for op wrapper modules generated by `python_op_gen`.\n\n\ndef to_raw_op(f):\n  \"\"\"Make a given op wrapper function `f` raw.\n\n  Raw op wrappers can only be called with keyword arguments.\n\n  Args:\n    f: An op wrapper function to make raw.\n"
},
{
    "Id": 333,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/0a9b39caefd437fec742ae48b25061abd6e2699b",
    "Violation": "missing",
    "Bug report": " When allocating GPU constants, check to see if the destination. tensor is intialized early (because we ran out of memory) and report it as such.",
    "Number of deleted lines": 0,
    "Deleted lines": "  AllocatorAttributes attr;\n  attr.set_on_host(true);\n  attr.set_gpu_compatible(true);\n  Allocator* host_alloc = GetAllocator(attr);\n  Tensor parsed(tensor_proto.dtype());\n  if (!parsed.FromProto(host_alloc, tensor_proto)) {\n    return errors::InvalidArgument(\"Cannot parse tensor from proto: \",\n                                   tensor_proto.DebugString());\n  }\n  Status status;\n  if (alloc_attrs.on_host()) {\n    *tensor = parsed;\n  } else {\n    if (!DMAHelper::CanUseDMA(&parsed)) {\n      return errors::Internal(\"GPU copy from non-DMA \",\n                              DataTypeString(parsed.dtype()), \" tensor\");\n    }\n    Tensor copy(GetAllocator(alloc_attrs), parsed.dtype(), parsed.shape());\n    port::Tracing::ScopedAnnotation annotation(\"MakeTensorFromProto\");\n    Notification n;\n    device_contexts_[0]->CopyCPUTensorToDevice(&parsed, this, &copy,\n                                               [&n, &status](const Status& s) {\n                                                 status = s;\n                                                 n.Notify();\n                                               });\n    n.WaitForNotification();\n    *tensor = copy;\n  }\n  return status;\n}\n\nnamespace {\nclass ConcretePerOpGpuDevice : public PerOpGpuDevice {\n public:\n  ConcretePerOpGpuDevice() : device_(&stream_device_) {}\n\n  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\n                    int gpu_id, Allocator* base_allocator, char* scratch) {"
},
{
    "Id": 334,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/d8df06a9403b1434aea8b82a193fc30a4ab29bbb",
    "Violation": "missing",
    "Bug report": " Add assert in Operation->printAssembly to check improperly created Op's. We allow the name of an operation to be different from the name of the 'ConcreteType' op it was instantiated with. This can happen when you sub-class an existing op and provide a getOperationName for it. Such a situation leads to an assertion too deep and at a place seeminly unrelated, and typically when the module is printed with the trace: printOperation, printAssembly, Op::print, getOperand, dyn_cast<OperationStmt>, isa. 'isa' will complain about being called on a null pointer, and the null pointer actually comes from the getAs<> in printAssembly. This should have been caught in printAssembly.",
    "Number of deleted lines": 1,
    "Deleted lines": "  /// This hook can be overridden with a more specific implementation in\n  /// the subclass of Base.\n  ///\n  static bool isClassFor(const Operation *op) {\n    return op->getName().getStringRef() == ConcreteType::getOperationName();\n  }\n\n  /// This is the hook used by the AsmParser to parse the custom form of this\n  /// op from an .mlir file.  Op implementations should provide a parse method,\n  /// which returns boolean true on failure.  On success, they should return\n  /// false and fill in result with the fields to use.\n  static bool parseAssembly(OpAsmParser *parser, OperationState *result) {\n    return ConcreteType::parse(parser, result);\n  }\n\n  /// This is the hook used by the AsmPrinter to emit this to the .mlir file.\n  /// Op implementations should provide a print method.\n  static void printAssembly(const Operation *op, OpAsmPrinter *p) {\n    op->getAs<ConcreteType>()->print(p);\n  }\n\n  /// This is the hook that checks whether or not this instruction is well\n  /// formed according to the invariants of its opcode.  It delegates to the\n  /// Traits for their policy implementations, and allows the user to specify\n  /// their own verify() method.\n  ///\n  /// On success this returns false; on failure it emits an error to the\n  /// diagnostic subsystem and returns true.\n  static bool verifyInvariants(const Operation *op) {\n    return BaseVerifier<Traits<ConcreteType>...>::verifyTrait(op) ||\n           op->getAs<ConcreteType>()->verify();\n  }\n\n  // TODO: Provide a dump() method.\n\nprotected:\n  explicit Op(const Operation *state) : OpState(state) {}\n\nprivate:"
},
{
    "Id": 335,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250",
    "Violation": "missing",
    "Bug report": " Prevent null dereference read in GetInitOp. We have a map of maps. We test that the key exists in the first map but then we don't have any validation that this also means the second map has the needed key. In the scenariosc where this is not the case, we'll dereference a nullptr, if we don't have this chec",
    "Number of deleted lines": 3,
    "Deleted lines": "\n#include \"tensorflow/cc/saved_model/constants.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/protobuf_internal.h\"\n\nnamespace tensorflow {\nnamespace internal {\n\n// A SavedModel may store the name of the initialization op to run in the\n// in the SignatureDef (v2) or a collection (v1). If an init_op collection\n// exists, then the collection must contain exactly one op.\nStatus GetInitOp(const string& export_dir, const MetaGraphDef& meta_graph_def,\n                 string* init_op_name) {\n  const auto& sig_def_map = meta_graph_def.signature_def();\n  const auto& init_op_sig_it =\n      meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);\n  if (init_op_sig_it != sig_def_map.end()) {\n    *init_op_name = init_op_sig_it->second.outputs()\n                        .find(kSavedModelInitOpSignatureKey)\n                        ->second.name();\n    return Status::OK();\n  }\n\n  const auto& collection_def_map = meta_graph_def.collection_def();\n  string init_op_collection_key;\n  if (collection_def_map.find(kSavedModelMainOpKey) !=\n      collection_def_map.end()) {\n    init_op_collection_key = kSavedModelMainOpKey;\n  } else {\n    init_op_collection_key = kSavedModelLegacyInitOpKey;\n  }\n\n  const auto init_op_it = collection_def_map.find(init_op_collection_key);\n  if (init_op_it != collection_def_map.end()) {\n    if (init_op_it->second.node_list().value_size() != 1) {\n      return errors::FailedPrecondition(\n          strings::StrCat(\"Expected exactly one main op in : \", export_dir));\n    }\n    *init_op_name = init_op_it->second.node_list().value(0);\n  }"
},
{
    "Id": 336,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e7de472681079932b2547024f31c876da54f61a0",
    "Violation": "insufficient",
    "Bug report": " Fix a bug in flatbuffer importer that use tensor quantization before checking.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n// TODO(b/172664358): Creates a new op instead of reusing constant op.\n// Creates a constant op to represent stateful variable. The function static\n// variable `stateful_variable_idx` is used as a unique value for each constant\n// to avoid CSEed. `tensor` is the data structure of flatbuffer. `shaped_type`\n// is the ShapedType for the const op.\nOperation* BuildVariableOp(const tflite::TensorT& tensor,\n                           mlir::RankedTensorType shaped_type,\n                           OpBuilder builder, Location loc) {\n  static int stateful_variable_idx = 0;\n  mlir::ElementsAttr value =\n      GetSplat(shaped_type, stateful_variable_idx++, builder);\n  if (IsQuantized(tensor)) {\n    auto op = builder.create<tfl::QConstOp>(\n        loc, mlir::TypeAttr::get(shaped_type), value);\n    return op.getOperation();\n  }\n  auto op = builder.create<tfl::ConstOp>(loc, value);\n  if (!tensor.quantization->min.empty()) {\n    if (auto stats_op =\n            ConvertMinMaxToStatsOp(tensor, builder, op.getResult())) {\n      return stats_op;\n    }\n  }\n  return op.getOperation();\n}\n\nStatusOr<Operation*> BuildConstOp(const tflite::TensorT& tensor,\n                                  const std::vector<uint8_t>& buffer,\n                                  bool is_variable, OpBuilder builder,\n                                  Location loc) {\n  TF_ASSIGN_OR_RETURN(auto type, GetTensorType(tensor, builder,\n                                               /*shapeless_are_scalars=*/true,\n                                               /*is_constant=*/true));\n  auto shaped_type = type.dyn_cast<mlir::RankedTensorType>();\n  if (!shaped_type) {\n    return errors::Internal(\"Constant doesn't have a shape\");\n  }\n"
},
{
    "Id": 337,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/19b2e1b5868a044df4622ef7e26fa5570ca52e5e",
    "Violation": "insufficient",
    "Bug report": "Only perform scalar check for a tensor shape if it's not empty.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n#if GOOGLE_CUDA && GOOGLE_TENSORRT\n\nnamespace tensorflow {\nnamespace tensorrt {\n\nnamespace convert {\n\nTRT_ShapedWeights::TRT_ShapedWeights(nvinfer1::DataType type)\n    : shape_(0, DimsAdapter::StorageType{}), type_(type), volume_(0) {}\n\nStatusOr<TRT_ShapedWeights> TRT_ShapedWeights::CreateWithTensor(\n    nvinfer1::DataType type, DimsAdapter dims, Tensor tensor) {\n  TRT_ShapedWeights weights(type);\n  weights.shape_ = dims;\n  weights.tensor_ = std::forward<Tensor>(tensor);\n  weights.volume_ = weights.shape_.Volume();\n  if (weights.shape_.NumDims() == 0) {\n    DCHECK(weights.shape_.IsScalar());\n  }\n  return weights;\n}\n\nnvinfer1::Weights TRT_ShapedWeights::GetTrtWeights() const {\n  return nvinfer1::Weights{type_, GetPointer<int8>(), volume_};\n}\n\nStatus TRT_ShapedWeights::SetShape(DimsAdapter dims) {\n  if (volume_ != dims.Volume()) {\n    VLOG(2) << \"Changing shape from \" << shape_.DebugString() << \", to \"\n            << dims.DebugString();\n    return errors::Internal(\"SetShape would change number of elements\");\n  }\n  shape_ = std::move(dims);\n  return Status::OK();\n}\n\nsize_t TRT_ShapedWeights::size_bytes() const {\n  size_t data_type_size = -1;"
},
{
    "Id": 338,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9c92b50fc4b95985a0749101976d04896bf19bfe",
    "Violation": "improper",
    "Bug report": " [conv3d_transpose] Fix dim check for bias. Per discussion with @thaink, the previous way to do the dim check for bias is not correct. So we need this change.",
    "Number of deleted lines": 1,
    "Deleted lines": "  TF_LITE_ENSURE_EQ(context, NumElements(output_shape), 5);\n  TF_LITE_ENSURE_EQ(context, input->dims->size, 5);\n  TF_LITE_ENSURE_EQ(context, filter->dims->size, 5);\n\n  // Input and filter must have the same number of channels.\n  TF_LITE_ENSURE_EQ(context, SizeOfDimension(input, 4),\n                    SizeOfDimension(filter, 4));\n\n  // Check types.\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_TYPES_EQ(context, filter->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n  TF_LITE_ENSURE_TYPES_EQ(context, output_shape->type, kTfLiteInt32);\n\n  // Check bias.\n  const TfLiteTensor* bias = GetInput(context, node, 3);\n  if (bias) {\n    TF_LITE_ENSURE_TYPES_EQ(context, bias->type, input->type);\n    TF_LITE_ENSURE_EQ(context, NumElements(bias), SizeOfDimension(filter, 4));\n  }\n\n  // GenericOptimized kernel currently doesn't support dilation.\n  if (params->dilation_depth_factor > 1 || params->dilation_height_factor > 1 ||\n      params->dilation_width_factor > 1) {\n    kernel_type = kReference;\n  }\n\n  // Allocate temporary tensors.\n  TF_LITE_ENSURE_STATUS(\n      AllocateTemporaryTensorsIfRequired(context, node, kernel_type));\n\n  // Check temporary tensors.\n  TfLiteTensor* col2im = nullptr;\n  if (opdata->need_col2im) {\n    node->temporaries->data[opdata->col2im_index] = opdata->col2im_id;\n    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node,\n                                                opdata->col2im_index, &col2im));\n  }\n"
},
{
    "Id": 339,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/5bc536f1afbaff5d3d5a14a9185cd1e3cc31b302",
    "Violation": "improper",
    "Bug report": "[Fix] bug fix during check static shape.",
    "Number of deleted lines": 1,
    "Deleted lines": "// The actual LegalizeTF Pass.\nnamespace {\n\nusing xla::Status;\nusing xla::StatusOr;\n\n// Legalize operations in functions.\nstruct LegalizeTF : public FunctionPass<LegalizeTF> {\n  void runOnFunction() override;\n};\n\n// Returns true if all tensor value in `values` has static shape and same shape.\nbool HasSameStaticShapes(Operation* op) {\n  auto values = op->getOperands();\n  int index = 0;\n  ArrayRef<int64_t> shape;\n  for (Value value : values) {\n    auto shaped_type = value.getType().dyn_cast<ShapedType>();\n    if (!shaped_type && !shaped_type.hasStaticShape()) {\n      return false;\n    }\n    if (index == 0) {\n      shape = shaped_type.getShape();\n    } else {\n      if (shape != shaped_type.getShape()) {\n        return false;\n      }\n    }\n    ++index;\n  }\n  return true;\n}\n\n#include \"tensorflow/compiler/mlir/lite/transforms/generated_legalize_tf.inc\"\n\n#define DECL_CONVERT_OP(tf_op)                                             \\\n  struct ConvertTF##tf_op##Op : public RewritePattern {                    \\\n    explicit ConvertTF##tf_op##Op(MLIRContext* context)                    \\\n        : RewritePattern(TF::tf_op##Op::getOperationName(), 1, context) {} \\"
},
{
    "Id": 340,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/264eb6ed1dbfb5e078c7dd977da8d7e633106fc5",
    "Violation": "missing",
    "Bug report": " Fixed add bias transformation. Added check for convolution with dynamic weights.",
    "Number of deleted lines": 0,
    "Deleted lines": "  if (biases->data.empty()) {\n    *biases =\n        MakeZeroTensor<Linear, DataType::FLOAT32>(Linear(output_channels));\n    return {TransformStatus::APPLIED, \"Added bias\"};\n  }\n  if (biases->shape.v != output_channels) {\n    float last_value = biases->data.back();\n    biases->shape.v = output_channels;\n    biases->data.resize(output_channels, last_value);\n    return {TransformStatus::APPLIED, \"Bias extended\"};\n  }\n  return {TransformStatus::SKIPPED, \"\"};\n}\n\nclass AddBias : public NodeTransformation {\n public:\n  TransformResult ApplyToNode(Node* node, GraphFloat32* graph) final {\n    if (node->operation.type == ToString(OperationType::CONVOLUTION_2D)) {\n      auto& attr =\n          absl::any_cast<Convolution2DAttributes&>(node->operation.attributes);\n      return FillBias(attr.weights.shape.o, &attr.bias);\n    }\n    if (node->operation.type ==\n        ToString(OperationType::CONVOLUTION_TRANSPOSED)) {\n      auto& attr = absl::any_cast<ConvolutionTransposedAttributes&>(\n          node->operation.attributes);\n      return FillBias(attr.weights.shape.o, &attr.bias);\n    }\n    if (node->operation.type ==\n        ToString(OperationType::DEPTHWISE_CONVOLUTION)) {\n      auto& attr = absl::any_cast<DepthwiseConvolution2DAttributes&>(\n          node->operation.attributes);\n      return FillBias(attr.weights.shape.o * attr.weights.shape.i, &attr.bias);\n    }\n    if (node->operation.type == ToString(OperationType::FULLY_CONNECTED)) {\n      auto& attr =\n          absl::any_cast<FullyConnectedAttributes&>(node->operation.attributes);\n      return FillBias(attr.weights.shape.o, &attr.bias);"
},
{
    "Id": 341,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8cef4cda26e08256b6698e942820d9a3ac1bcc94",
    "Violation": "missing",
    "Bug report": "Add minor checks for data_format and padding value ",
    "Number of deleted lines": 2,
    "Deleted lines": "              OpT, Conv2DOpAdaptor, Conv3DOpAdaptor>::value>::type* = nullptr>\nstatic LogicalResult inferConvReturnTypes(\n    OpT op, llvm::SmallVectorImpl<mlir::Type>& inferredReturnTypes,\n    llvm::Optional<mlir::Location> location,\n    ArrayRef<Attribute> explicit_padding) {\n  const int64_t num_spatial_dims = std::is_same<OpT, Conv2DOpAdaptor>() ? 2 : 3;\n  const int64_t num_dims = 2 + num_spatial_dims;\n  const Value input = op.input();\n  const Value filter = op.filter();\n  const TensorType input_ty = input.getType().template cast<TensorType>();\n  const TensorType filter_ty = filter.getType().template cast<TensorType>();\n  const StringRef paddings = op.padding().getValue();\n\n  ArrayRef<Attribute> strides = op.strides().getValue();\n  StringRef data_format = op.data_format().getValue();\n  ArrayRef<Attribute> dilations = op.dilations().getValue();\n\n  tensorflow::TensorFormat format;\n  FormatFromString(data_format.str(), &format);\n  tensorflow::Padding padding;\n  GetPaddingFromString(paddings.str(), &padding);\n  auto get_int = [](Attribute attr) {\n    return attr.template cast<IntegerAttr>().getInt();\n  };\n\n  // Necessary sanity checks.\n  // Verifies that,\n  // * Ranks of operands and result are valid\n  // * Length of explicit_paddings attribute is valid and has non negative\n  //   elements\n  // * strides and dilations attributes have positive elements\n  if (!IsOfRankOrUnranked(input, num_dims) ||\n      !IsOfRankOrUnranked(filter, num_dims))\n    return emitOptionalError(location, \"requires operands to be \", num_dims,\n                             \"D tensor\");\n\n  if (padding == tensorflow::Padding::EXPLICIT) {\n    if (explicit_padding.size() == 0) {\n      return emitOptionalError(location,\n                               \"requires attribute 'explicit_paddings' with \"\n                               \"'EXPLICIT' padding mode\");"
},
{
    "Id": 342,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/0d5668cbdc6b46d099bd3abd93374c09b2e8121f",
    "Violation": "improper",
    "Bug report": " [XLA:SHAPE_UTIL] Return nullopt instead of a check failure if the input dimensions are not sorted.",
    "Number of deleted lines": 1,
    "Deleted lines": "  for (size_t i = 0; i < common_factors.size() - 1;) {\n    if (1 != common_factors[i + 1].first - common_factors[i].first ||\n        1 != common_factors[i + 1].second - common_factors[i].second) {\n      common_factors.erase(common_factors.begin() + i);\n    } else {\n      ++i;\n    }\n  }\n  // `CommonFactors(a, b).back() == (a.rank, b.rank)` so we must pop it.\n  common_factors.pop_back();\n  return std::vector<std::pair<int64_t, int64_t>>(common_factors.begin(),\n                                                  common_factors.end());\n}\n\n/* static */ absl::optional<std::vector<int64_t>>\nShapeUtil::ReshapeLeavesDimensionsUnmodified(\n    const Shape& from_shape, const Shape& to_shape,\n    absl::Span<const int64_t> input_dim_indices) {\n  CHECK(std::is_sorted(input_dim_indices.begin(), input_dim_indices.end()));\n\n  std::vector<int64_t> output_dim_indices;\n  std::vector<std::pair<int64_t, int64_t>> unmodified_dims =\n      ShapeUtil::DimensionsUnmodifiedByReshape(from_shape, to_shape);\n  size_t i = 0;  // index to unmodified_dims\n  for (int64_t input_dim_index : input_dim_indices) {\n    // Search unmodified_dims for input_dim_index. We can search from the last\n    // matching position because input_dim_indices is guaranteed to be sorted.\n    while (i < unmodified_dims.size() &&\n           unmodified_dims[i].first < input_dim_index) {\n      ++i;\n    }\n    if (i >= unmodified_dims.size() ||\n        unmodified_dims[i].first != input_dim_index) {\n      return absl::nullopt;\n    }\n    output_dim_indices.push_back(unmodified_dims[i].second);\n  }\n  return output_dim_indices;\n}"
},
{
    "Id": 343,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/824af2acfa0cdf897c08d91224aea0958c1afc02",
    "Violation": "missing",
    "Bug report": " Add ndmin check. Added ndmin check to allow maximum 32 ndmin to make same behavior as numpy. Currently it is crashing when very large ndmin is passed.",
    "Number of deleted lines": 0,
    "Deleted lines": "    # while np.array allows them. We need to convert-then-cast.\n\n    # EagerTensor conversion complains about \"mixed types\" when converting\n    # tensors with no dtype information. This is because it infers types based\n    # on one selected item in the list. So e.g. when converting [2., 2j]\n    # to a tensor, it will select float32 as the inferred type and not be able\n    # to convert the list to a float 32 tensor.\n    # Since we have some information about the final dtype we care about, we\n    # supply that information so that convert_to_tensor will do best-effort\n    # conversion to that dtype first.\n    result_t = np_arrays.convert_to_tensor(result_t, dtype_hint=dtype)\n    result_t = math_ops.cast(result_t, dtype=dtype)\n  elif dtype:\n    result_t = math_ops.cast(result_t, dtype)\n\n  if copy:\n    result_t = array_ops.identity(result_t)\n\n  if ndmin == 0:\n    return result_t\n\n  ndims = array_ops.rank(result_t)\n\n  def true_fn():\n    old_shape = array_ops.shape(result_t)\n    new_shape = array_ops.concat(\n        [array_ops.ones(ndmin - ndims, dtypes.int32), old_shape], axis=0)\n    return array_ops.reshape(result_t, new_shape)\n\n  result_t = np_utils.cond(\n      np_utils.greater(ndmin, ndims), true_fn, lambda: result_t)\n  return result_t\n\n\n# TODO(wangpeng): investigate whether we can make `copy` default to False.\n# pylint: disable=g-short-docstring-punctuation,g-no-space-after-docstring-summary,g-doc-return-or-yield,g-doc-args\n@np_utils.np_doc_only('array')\ndef array(val, dtype=None, copy=True, ndmin=0):  # pylint: disable=redefined-outer-name"
},
{
    "Id": 344,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b73a3c21a224f479af8d3b8af320c220a091906c",
    "Violation": "missing",
    "Bug report": "[XLA] Add check for potential out-of-bound access.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  if (VLOG_IS_ON(3)) {\n    for (int64_t i = 0; i < sort->operand_count(); ++i) {\n      VLOG(3) << \"HandleSort operand \" << i << \" literal: \"\n              << GetEvaluatedLiteralFor(sort->operand(i)).ToString();\n    }\n  }\n  Shape key_shape = sort->operand(0)->shape();\n  auto rank = key_shape.rank();\n  std::vector<Literal> result_literals;\n  result_literals.reserve(sort->operand_count());\n  for (int64_t i = 0; i < sort->operand_count(); ++i) {\n    result_literals.emplace_back(sort->operand(i)->shape());\n  }\n  std::vector<int64_t> zero_base(rank, 0);\n  std::vector<int64_t> increment(rank, 1);\n  int64_t sort_dim = sort->dimensions(0);\n  int64_t sort_dim_elements = key_shape.dimensions(sort_dim);\n  increment[sort_dim] = sort_dim_elements;\n  HloEvaluator embedded_evaluator(max_loop_iterations_);\n  // Iterate through each dimension except 'sort_dim'.\n  TF_RETURN_IF_ERROR(ShapeUtil::ForEachIndexWithStatus(\n      key_shape, zero_base, AsInt64Slice(key_shape.dimensions()), increment,\n      [&](absl::Span<const int64_t> indices) -> StatusOr<bool> {\n        // Extract a slice from each operand literal that corresponds to\n        // exactly the row in dimension 'sort_dim'.\n        std::vector<int64_t> limit_indices(indices.begin(), indices.end());\n        absl::c_for_each(limit_indices, [](int64_t& index) { ++index; });\n        limit_indices[sort_dim] = sort_dim_elements;\n        std::vector<Literal> literals_to_sort;\n        literals_to_sort.reserve(sort->operand_count());\n        for (int64_t i = 0; i < sort->operand_count(); ++i) {\n          TF_ASSIGN_OR_RETURN(auto literal_to_sort,\n                              GetEvaluatedLiteralFor(sort->operand(i))\n                                  .Slice(indices, limit_indices)\n                                  .Reshape({sort_dim_elements}));\n          literals_to_sort.push_back(std::move(literal_to_sort));\n        }"
},
{
    "Id": 345,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/63753d5f1531b17cf8cbbf1d8b77c16edcfb9711",
    "Violation": "improper",
    "Bug report": " Change DCHECK_LE to DCHECK_LT when checking invariant on original indices for sorted items Indices of items should be strictly smaller than the size of the vector.",
    "Number of deleted lines": 1,
    "Deleted lines": "// stored in `original_indices[i]`.\nvoid CreateSortedNamesAndOriginalIndices(absl::Span<const std::string> names,\n                                         std::vector<std::string>& sorted_names,\n                                         std::vector<int>& original_indices) {\n  DCHECK(sorted_names.empty());\n  DCHECK(original_indices.empty());\n\n  // Generate indices.\n  original_indices.resize(names.size());\n  std::iota(original_indices.begin(), original_indices.end(), 0);\n\n  // Sort indices by comparing the corresponding names.\n  std::sort(original_indices.begin(), original_indices.end(),\n            [&](int x, int y) { return names[x] < names[y]; });\n\n  // Use sorted indices to generate sorted names.\n  sorted_names.reserve(names.size());\n  for (int original_index : original_indices) {\n    DCHECK_LE(original_index, names.size());\n    sorted_names.push_back(names[original_index]);\n  }\n}\n\n}  // namespace\n\nstruct SavedModelImpl::JoinedSignature {\n  // A unique name for the joined signature.\n  std::string name;\n  // The feed nodes for the corresponding inputs, but they might not be in the\n  // original order and if there are more than one original inputs mapped to the\n  // same feed node, only one is picked here.\n  tensorflow::GraphImportConfig::InputArrays input_nodes;\n  // The fetch nodes for the outputs, which should be in the original order.\n  std::vector<std::string> output_nodes;\n  // The target nodes that should be run but not returned as outputs.\n  std::vector<std::string> target_nodes;\n};\n\ntensorflow::Status SavedModelImpl::RunMultipleSignatures("
},
{
    "Id": 346,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/7f9929732ced22fe8ef42a695dae39c1caf44608",
    "Violation": "missing",
    "Bug report": " For gather op, if params.shape[:batch_dims] is not the same as indice s.shape[:batch_dims], return an error instead of check fail ",
    "Number of deleted lines": 0,
    "Deleted lines": "\n      if (!axis_is_set) axis = batch_dims_;\n\n      OP_REQUIRES(\n          c, batch_dims_ >= -indices.dims() && batch_dims_ < indices.dims(),\n          errors::InvalidArgument(\"Expected batch_dims in the range [\",\n                                  -indices.dims(), \", \", indices.dims(),\n                                  \"), but got \", batch_dims_));\n\n      OP_REQUIRES(c, batch_dims_ < params.dims(),\n                  errors::InvalidArgument(\"batch_dims (\", batch_dims_,\n                                          \") must be less than rank(params) (\",\n                                          params.dims(), \").\"));\n\n      OP_REQUIRES(c, axis >= batch_dims_,\n                  errors::InvalidArgument(\"batch_dims (\", batch_dims_,\n                                          \") must be less than or equal to \",\n                                          \"axis (\", axis, \").\"));\n    }\n\n    // Check that we have enough index space\n    int64 gather_dim_size = params.dim_size(axis);\n    const int64 N = indices.NumElements();\n    OP_REQUIRES(\n        c, gather_dim_size <= std::numeric_limits<Index>::max(),\n        errors::InvalidArgument(\"params.shape[\", axis, \"] too large for \",\n                                DataTypeString(DataTypeToEnum<Index>::v()),\n                                \" indexing: \", gather_dim_size, \" > \",\n                                std::numeric_limits<Index>::max()));\n\n    // The result shape is params.shape[:axis] + indices.shape[batch_dims:] +\n    // params.shape[axis + 1:].\n    TensorShape result_shape;\n    int64 batch_size = 1;\n    int64 outer_size = 1;\n    int64 inner_size = 1;\n\n    for (int i = 0; i < batch_dims_; ++i) {"
},
{
    "Id": 347,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69",
    "Violation": "missing",
    "Bug report": "Add more validation to RequantizationRangePerChannel. ",
    "Number of deleted lines": 0,
    "Deleted lines": "      : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"clip_value_max\", &clip_value_max_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& input = ctx->input(kInputTensorIndex);\n    const Tensor& input_min = ctx->input(kInputMinIndex);\n    const Tensor& input_max = ctx->input(kInputMaxIndex);\n\n    const size_t depth = input_max.NumElements();\n    OP_REQUIRES(\n        ctx, input_min.dim_size(0) == depth,\n        errors::InvalidArgument(\"input_min has incorrect size, expected \",\n                                depth, \" was \", input_min.dim_size(0)));\n    OP_REQUIRES(\n        ctx, input_max.dim_size(0) == depth,\n        errors::InvalidArgument(\"input_max has incorrect size, expected \",\n                                depth, \" was \", input_max.dim_size(0)));\n\n    const float* input_min_data = input_min.flat<float>().data();\n    const float* input_max_data = input_max.flat<float>().data();\n    std::vector<float> ranges(depth);\n    bool is_non_negative = true;\n    Eigen::array<int, 2> shuffling({1, 0});\n    auto input_matrix = input.flat_inner_dims<qint32>();\n\n    // TODO: verify performance of not transposing and finding the min max\n    // directly from input_matrix vs the one presented below of transposing and\n    // using the transposed matrix as the transposing operation in itself might\n    // be more costly.\n    // Note that this operation is a calibration step for quantization and will\n    // cease to exist in the final inference graph(will exist as a const node).\n    auto transposed_input = input_matrix.shuffle(shuffling);\n\n    // Find the ranges of each channel in parallel.\n    float out_min_max = std::numeric_limits<float>::min();\n\n#ifdef ENABLE_ONEDNN_OPENMP"
},
{
    "Id": 348,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/ba91c04e001f417641e757a6417e5325c1c4e15e",
    "Violation": "insufficient",
    "Bug report": "Add more check to sparsity parameter verifier.",
    "Number of deleted lines": 1,
    "Deleted lines": "\n      // Need to reset num_elements when seeing a sparse dimension.\n      num_elements = array_indices->size();\n    }\n  }\n\n  return num_elements;\n}\n\nabsl::optional<uint64_t> VerifyAndCountSparseElements(const Tensor& tensor) {\n  const auto* sparsity = tensor.sparsity();\n  if (sparsity->traversal_order() == nullptr ||\n      sparsity->dim_metadata() == nullptr) {\n    return absl::nullopt;\n  }\n\n  const int total_dims = sparsity->traversal_order()->size();\n\n  if (sparsity->dim_metadata()->size() != total_dims) {\n    return absl::nullopt;\n  }\n\n  const int block_rank = total_dims - tensor.shape()->size();\n  if (block_rank > 0 && (sparsity->block_map() == nullptr ||\n                         sparsity->block_map()->size() != block_rank)) {\n    return absl::nullopt;\n  }\n\n  // For a n-dimensional tensor (d0, ..., dn-1) with k-dimensional block (dn,\n  // ..., dn+k-1), the expanded_dim_sizes holds the size of each dimension in\n  // the order of (d0, ..., dn-1, dn, ..., dn+k-1), not the traversal order.\n  // For example, a 4x4 tensor with 2x2 block has expanded_dim_sizes = {2, 2, 2,\n  // 2}.\n  std::vector<int> expanded_dim_sizes;\n  expanded_dim_sizes.resize(total_dims);\n  const int original_rank = tensor.shape()->size();\n  // First go through the original tensor dimensions, populate their sizes.\n  for (int i = 0; i < original_rank; i++) {\n    expanded_dim_sizes[i] = tensor.shape()->Get(i);"
},
{
    "Id": 349,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1610f391833738972b538e4ee97f90dbd30fc745",
    "Violation": "improper",
    "Bug report": " Replace DCHECK with actual validation in AddRangeStats",
    "Number of deleted lines": 2,
    "Deleted lines": "  for (int stat_dim = logits_dims; stat_dim < stats_dims; ++stat_dim) {\n    stats[stat_dim] += hessians(instance, stat_dim - logits_dims);\n  }\n}\n\n// Add statistics to StatsPartitionMap for bucket_id ranging from\n// (start_instance, start_feature_dim) to (end_instance, end_feature_dim),\n// inclusive on start and end instances, exclusive on end feature dim.\nstatic void AddRangeStats(OpKernelContext* const context,\n                          const int start_instance, const int end_instance,\n                          const int start_feature_dim,\n                          const int end_feature_dim,\n                          StatsPartitionMap* stats_map,\n                          const TTypes<float>::ConstMatrix& gradients,\n                          const TTypes<float>::ConstMatrix& hessians,\n                          const TTypes<int32>::ConstVec& node_ids,\n                          const int32_t feature_dims, const int32_t bucket_id,\n                          const int32_t logits_dims, const int32_t stats_dims) {\n  DCHECK_LE(start_instance, end_instance);\n  if (start_instance == end_instance) {\n    DCHECK_LT(start_feature_dim, end_feature_dim);\n  }\n  for (int32_t instance = start_instance; instance <= end_instance;\n       ++instance) {\n    const int32_t start_f_dim =\n        (instance == start_instance) ? start_feature_dim + 1 : 0;\n    const int32_t end_f_dim =\n        (instance == end_instance) ? end_feature_dim : feature_dims;\n    for (int32_t f_dim = start_f_dim; f_dim < end_f_dim; ++f_dim) {\n      AddInstanceStatsToMap(instance, f_dim, bucket_id, logits_dims, stats_dims,\n                            stats_map, gradients, hessians, node_ids);\n    }\n  }\n}\n\nclass BoostedTreesSparseAggregateStatsOp : public OpKernel {\n public:\n  explicit BoostedTreesSparseAggregateStatsOp(\n      OpKernelConstruction* const context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"max_splits\", &max_splits_));"
},
{
    "Id": 350,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/150a6c06b281246cb5a075a704fceeb257bb63af",
    "Violation": "missing",
    "Bug report": "Add a check on the 0th dimension of filter for DepthwiseConv.",
    "Number of deleted lines": 0,
    "Deleted lines": "  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);\n\n  // The parameter 'depth_multiplier' is redundant, so we check here to make\n  // sure it is consistent with the given dimensions.\n  TF_LITE_ENSURE_EQ(context,\n                    params->depth_multiplier * SizeOfDimension(input, 3),\n                    SizeOfDimension(filter, 3));\n\n  const TfLiteType data_type = input->type;\n  TF_LITE_ENSURE(context, data_type == kTfLiteFloat32 ||\n                              data_type == kTfLiteUInt8 ||\n                              data_type == kTfLiteInt8);\n  TF_LITE_ENSURE_EQ(context, output->type, data_type);\n  TF_LITE_ENSURE_EQ(context, filter->type, data_type);\n\n  if (hasBias) {\n    bias = GetInput(context, node, kBiasTensor);\n    if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {\n      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteInt32);\n      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);\n    } else {\n      TF_LITE_ENSURE_EQ(context, bias->type, data_type);\n    }\n    TF_LITE_ENSURE_EQ(context, NumDimensions(bias), 1);\n    TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 3),\n                      SizeOfDimension(bias, 0));\n  }\n\n  int channels_out = SizeOfDimension(filter, 3);\n  int width = SizeOfDimension(input, 2);\n  int height = SizeOfDimension(input, 1);\n  int filter_width = SizeOfDimension(filter, 2);\n  int filter_height = SizeOfDimension(filter, 1);\n  int batches = SizeOfDimension(input, 0);"
},
{
    "Id": 351,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/bf686faeddcca97be6ad7b6421cb26ab1c3cea2c",
    "Violation": "missing",
    "Bug report": "TFLite: Enhance input check for ResizeNearestNeghbor",
    "Number of deleted lines": 2,
    "Deleted lines": "                                TfLiteTensor* output) {\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  const int32* size_data = GetTensorData<int32>(size);\n  output_size->data[1] = size_data[0];\n  output_size->data[2] = size_data[1];\n  output_size->data[3] = input->dims->data[3];\n  return context->ResizeTensor(context, output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  // TODO(ahentz): Our current implementations rely on the inputs being 4D.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(size), 1);\n\n  TF_LITE_ENSURE_EQ(context, size->type, kTfLiteInt32);\n  output->type = input->type;\n\n  if (!IsConstantTensor(size)) {\n    SetTensorToDynamic(output);\n    return kTfLiteOk;\n  }\n  return ResizeOutputTensor(context, input, size, output);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(context,"
},
{
    "Id": 352,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c040db5e9003cc20016586df9f2964db83b98c4f",
    "Violation": "missing",
    "Bug report": " [XLA] Add a defensive check in dynamic dimension inference to prevent scalar reshape with dynamic dimension. In theory we can just ignore a [1] -> [] reshape, but adding a check here for now.",
    "Number of deleted lines": 3,
    "Deleted lines": "}\n\nStatus DynamicDimensionInferenceVisitor::HandleElementwiseUnary(\n    HloInstruction* hlo) {\n  return PassThroughDynamicDimension(hlo);\n}\n\nStatus DynamicDimensionInferenceVisitor::HandleSelect(HloInstruction* hlo) {\n  return PassThroughDynamicDimension(hlo);\n}\n\nStatus DynamicDimensionInferenceVisitor::HandleElementwiseBinary(\n    HloInstruction* hlo) {\n  return PassThroughDynamicDimension(hlo);\n}\n\nStatus DynamicDimensionInferenceVisitor::HandleReshape(HloInstruction* hlo) {\n  return ForEachOperandDynamicDimension(\n      hlo, [&](HloInstruction* operand, ShapeIndex index, int64 dimension,\n               int64 operand_index, HloInstruction* dynamic_size,\n               DimensionConstraint constraint) {\n        HloInstruction* reshape = hlo;\n        // Reshape is supported as long as it is the most\n        // major one and it is combining with other non-dynamic dimensions.\n        const int64 output_most_major = reshape->shape().dimensions(0);\n        const int64 input_most_major = operand->shape().dimensions(0);\n        if (dimension == 0) {\n          if (output_most_major > input_most_major) {\n            const int64 multiplier =\n                reshape->shape().dimensions(0) / operand->shape().dimensions(0);\n            HloInstruction* multiplier_hlo =\n                hlo->parent()->AddInstruction(HloInstruction::CreateConstant(\n                    LiteralUtil::CreateR0<int32>(multiplier)));\n\n            HloInstruction* new_dynamic_size =\n                hlo->parent()->AddInstruction(HloInstruction::CreateBinary(\n                    dynamic_size->shape(), HloOpcode::kMultiply, dynamic_size,\n                    multiplier_hlo));\n            parent_->SetDynamicSize(reshape, {}, 0, new_dynamic_size,\n                                    {.stride = 1, .multiple_of = multiplier});\n            return Status::OK();\n          } else if (output_most_major < input_most_major) {"
},
{
    "Id": 353,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/48393637f8154be16088d84742485a0e153ecbb2",
    "Violation": "improper",
    "Bug report": "Change check to allow tensors with up to 6 dims.",
    "Number of deleted lines": 2,
    "Deleted lines": "void ProcessOpWithShapeInput(Model* model, Operator* op) {\n  CHECK_EQ(op->outputs.size(), 1);\n  auto& output_array = model->GetArray(op->outputs[0]);\n  if (output_array.has_shape()) {\n    // We have already run\n    return;\n  }\n\n  auto& dims_array = model->GetArray(op->inputs[0]);\n  if (!dims_array.has_shape()) {\n    // Yield until dims shape been resolved.\n    return;\n  }\n  if (!dims_array.buffer) {\n    // Yield until the dims are constant\n    return;\n  }\n  CHECK(dims_array.data_type == ArrayDataType::kInt32) << \"dims must be int32\";\n  CHECK_LE(RequiredBufferSizeForShape(dims_array.shape()), 4)\n      << \"dims vector can be no larger than 4 values\";\n\n  std::vector<int32> const& dims =\n      dims_array.GetBuffer<ArrayDataType::kInt32>().data;\n  *(output_array.mutable_shape()->mutable_dims()) = dims;\n}\n\nvoid ProcessFullyConnectedOperator(Model* model, FullyConnectedOperator* op) {\n  const auto& input_array = model->GetArray(op->inputs[0]);\n  // Yield until input dims have been resolved.\n  if (!input_array.has_shape()) {\n    return;\n  }\n  const auto& input_shape = input_array.shape();\n  CHECK_GE(input_shape.dimensions_count(), 1);\n\n  const auto& weights_array = model->GetArray(op->inputs[1]);\n  // Yield until weights dims have been resolved.\n  if (!weights_array.has_shape()) {\n    return;\n  }"
},
{
    "Id": 354,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/662128e8ca3411286b234553a7efc1356353d0f5",
    "Violation": "missing",
    "Bug report": " add rank checking for MEAN op. The MEAN op of NNAPI only supports a tensor with rank <= 4. Check the rank of the input tensor before delegating the op.",
    "Number of deleted lines": 0,
    "Deleted lines": "    case kTfLiteBuiltinMean: {\n      ExpectMaxOpVersion(version, 2, &val_ctx);\n      ExpectMinAndroidSdkVersion(android_sdk_version, kMinSdkVersionForNNAPI11,\n                                 &val_ctx);\n      if (android_sdk_version >= kMinSdkVersionForNNAPI12) {\n        Expect(context->tensors[node->inputs->data[0]].type == kTfLiteFloat32 ||\n                   IsQuantized(context->tensors[node->inputs->data[0]].type),\n               NNAPIValidationFailureType::kUnsupportedInputType,\n               \"Expected Float32 or Quantized input\", &val_ctx);\n      } else {\n        Expect(context->tensors[node->inputs->data[0]].type == kTfLiteFloat32,\n               NNAPIValidationFailureType::kUnsupportedInputType,\n               \"Expected Float32 input\", &val_ctx);\n      }\n      Expect(context->tensors[node->outputs->data[0]].dims->size > 0,\n             NNAPIValidationFailureType::kUnsupportedOutputType,\n             \"NNAPI does not support generating a scalar as output for MEAN.\",\n             &val_ctx);\n    } break;\n    case kTfLiteBuiltinEmbeddingLookup: {\n      ExpectOpVersion(version, 1, &val_ctx);\n      Expect(context->tensors[node->inputs->data[1]].type == kTfLiteFloat32,\n             NNAPIValidationFailureType::kUnsupportedInputType,\n             \"NNAPI only support float32 values.\", &val_ctx);\n    } break;\n    case kTfLiteBuiltinHashtableLookup: {\n      ExpectOpVersion(version, 1, &val_ctx);\n      Expect(context->tensors[node->outputs->data[0]].type == kTfLiteFloat32,\n             NNAPIValidationFailureType::kUnsupportedOutputType,\n             \"NNAPI only support float32 output.\", &val_ctx);\n    } break;\n    case kTfLiteBuiltinMaximum:\n    case kTfLiteBuiltinMinimum: {\n      ExpectMaxOpVersion(version, 3, &val_ctx);\n      ExpectMinAndroidSdkVersion(android_sdk_version, kMinSdkVersionForNNAPI12,\n                                 &val_ctx);\n      const auto input_type = context->tensors[node->inputs->data[0]].type;\n      EXPECT_INPUT_TYPE_IN(input_type, kTfLiteFloat32, kTfLiteUInt8,"
},
{
    "Id": 355,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9b947dd6377c022091c8aa005cdcff52c53ff5f0",
    "Violation": "insufficient",
    "Bug report": "Also check dst_format",
    "Number of deleted lines": 1,
    "Deleted lines": "  return IsAlongAxis(tensor, indices({'N', 'H', 'W', 'C'}), kRank) ||\n         IsAlongAxis(tensor, indices({'H', 'W', 'C'}), kRank) ||\n         IsAlongAxis(tensor, indices({'N', 'H', 'W'}), kRank) ||\n         IsAlongAxis(tensor, indices({'H', 'W'}), kRank) ||\n         IsAlongAxis(tensor, indices({'C'}), kRank);\n}\n\nStatus ReduceTransposer::TransposeNode(TransposeContext* context,\n                                       utils::MutableNodeView* node) {\n  DCHECK(IsReduceOp(*node->node()));\n  const auto& regular_fanin = node->GetRegularFanin(0);\n  const auto* output_shape_attr =\n      regular_fanin.node_view()->GetAttr(kAttrOutputShape);\n  const auto& shape = output_shape_attr->list().shape(0);\n  const int rank = shape.dim_size();\n  std::string src_format = context->src_format;\n  std::string dst_format = context->dst_format;\n  // Update the format from 4D to 5D layout if necessary.\n  bool allow_5d = rank == 5 && (src_format == \"NHWC\" || src_format == \"NCHW\");\n  if (allow_5d) {\n    std::string src_format_3d = src_format == \"NHWC\" ? \"NDHWC\" : \"NCDHW\";\n    std::string dst_format_3d = dst_format == \"NHWC\" ? \"NDHWC\" : \"NCDHW\";\n    context->AssignDeviceAndDataFormats(context->target_device, src_format_3d,\n                                        dst_format_3d);\n  }\n  if (!ShouldProcess(*context, *node) || !IsFaninPortRankN(*node, 0, rank) ||\n      !IsReduceAxisSupported(*context, *node) ||\n      !IsAfterDstToSrcTransform(*context, *node)) {\n    // Change back to the original layout due to early exit.\n    if (allow_5d) {\n      context->AssignDeviceAndDataFormats(context->target_device, src_format,\n                                          dst_format);\n    }\n    return Status::OK();\n  }\n  VLOG(3) << \"GenericLayoutOptimizer: transforming node '\" << node->GetName()\n          << \"' with op '\" << node->GetOp() << \"' from data format '\"\n          << context->src_format << \"' to '\" << context->dst_format << \"'\";\n  TF_RETURN_IF_ERROR(UpdateFaninEdgesWithOp(context, {0}, node, kOpTranspose));"
},
{
    "Id": 356,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/450dec35448a73b3fcb5d4f82108d5fdcb3f59b4",
    "Violation": "missing",
    "Bug report": "Internal change, add some checks on the sparseTensor format checking.",
    "Number of deleted lines": 1,
    "Deleted lines": "                                  int32* row_ids_before_padding) {\n  // The only difference between dense tensor, sparse tensor and ragged tensor\n  // is the row ids output.\n  if (indices_or_row_splits.NumElements() == 0) {\n    // Dense tensor to COO format.\n    // Row ids are just the index ids.\n    for (int32 i = 0; i < total_id_count; ++i) {\n      *(row_ids_before_padding + i) = i;\n    }\n  } else if (indices_or_row_splits.dims() == 2 &&\n             indices_or_row_splits.NumElements() > 0) {\n    // Sparse tensor to COO format.\n    // TODO(pineapplejuice233): should we support arbitrary rank of sparse tensor and\n    // convert it to 2D?\n    // For 2D sparse tensor, as we always combine on the last dimension.\n    // The row ids are just the sample ids which is the first dim of the\n    // indices.\n    auto indices_matrix = indices_or_row_splits.matrix<int32>();\n    for (int32 i = 0; i < total_id_count; ++i) {\n      *(row_ids_before_padding + i) = indices_matrix(i, 0);\n    }\n  } else if (indices_or_row_splits.dims() == 1 &&\n             indices_or_row_splits.NumElements() > 0) {\n    // Ragged tensor to COO format.\n    const int32* indices_or_row_splits_ptr =\n        indices_or_row_splits.flat<int32>().data();\n    int32 current_row_id = -1;\n    for (int32 i = 0; i < total_id_count; ++i) {\n      while (i == *(indices_or_row_splits_ptr + 1 + current_row_id)) {\n        current_row_id += 1;\n      }\n      *(row_ids_before_padding + i) = current_row_id;\n    }\n  } else {\n    return absl::InvalidArgumentError(\n        absl::StrCat(\"Invalid indices_or_row_splits input, Got dimension of \",\n                     indices_or_row_splits.dims(), \" and size of \",\n                     indices_or_row_splits.NumElements(), \".\"));\n  }\n  return OkStatus();"
},
{
    "Id": 357,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/356f360e8772a2697ec0d30036237342549803f5",
    "Violation": "missing",
    "Bug report": " Add additional shape validation to compute_accidental_hits. In `compute_accidental_hits`, the `sampled_candidates` must be a vector, as is shown in the kernel implementation in `tensorflow/core/kernels candidate_sampler_ops.cc`. This fix adds shape validation of `sampled_candidates` in the shape function whenever possible.",
    "Number of deleted lines": 1,
    "Deleted lines": "    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn(CandidateSamplerShapeFn)\n    .SetIsStateful();\n\nREGISTER_OP(\"ComputeAccidentalHits\")\n    .Input(\"true_classes: int64\")\n    .Input(\"sampled_candidates: int64\")\n    .Output(\"indices: int32\")\n    .Output(\"ids: int64\")\n    .Output(\"weights: float\")\n    .Attr(\"num_true: int\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      int64 num_true;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"num_true\", &num_true));\n\n      // Validate true_classes.\n      ShapeHandle true_classes;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &true_classes));\n      DimensionHandle unused;\n      TF_RETURN_IF_ERROR(\n          c->WithValue(c->Dim(true_classes, 1), num_true, &unused));\n\n      // All three outputs are the same shape.\n      ShapeHandle v = c->Vector(InferenceContext::kUnknownDim);\n      c->set_output(0, v);\n      c->set_output(1, v);\n      c->set_output(2, v);\n      return Status::OK();\n    });\n\n}  // namespace tensorflow\n"
},
{
    "Id": 358,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/7c88788e63f3a747d2794175076db551d768734e",
    "Violation": "missing",
    "Bug report": " Shape validation of max_features in QuantizedReluX. In shape function of QuantizedReluX, `max_value` and `min_features` have shape validation but not `max_features`. This fix add restriction to `max_features` as well.",
    "Number of deleted lines": 0,
    "Deleted lines": "      return Status::OK();\n    });\n\nREGISTER_OP(\"QuantizedReluX\")\n    .Input(\"features: Tinput\")\n    .Input(\"max_value: float\")\n    .Input(\"min_features: float\")\n    .Input(\"max_features: float\")\n    .Output(\"activations: out_type\")\n    .Output(\"min_activations: float\")\n    .Output(\"max_activations: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .Attr(\"out_type: quantizedtype = DT_QUINT8\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"QuantizedBatchNormWithGlobalNormalization\")\n    .Input(\"t: Tinput\")\n    .Input(\"t_min: float\")\n    .Input(\"t_max: float\")\n    .Input(\"m: Tinput\")\n    .Input(\"m_min: float\")\n    .Input(\"m_max: float\")\n    .Input(\"v: Tinput\")\n    .Input(\"v_min: float\")\n    .Input(\"v_max: float\")\n    .Input(\"beta: Tinput\")\n    .Input(\"beta_min: float\")\n    .Input(\"beta_max: float\")\n    .Input(\"gamma: Tinput\")\n    .Input(\"gamma_min: float\")"
},
{
    "Id": 359,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/ff6be80a1ec3c353ebd0d17e2f0b46d9097310db",
    "Violation": "missing",
    "Bug report": " Improve the shape function for ParameterizedTruncatedNormal.  The parameters of ParameterizedTruncatedNormal should be 0-D or 1-D, which is checked in ther kernel functions. There is no check in the shape function of the ops. This fix improves the shape function and checks the parameters of ParameterizedTruncatedNormal whever possible.",
    "Number of deleted lines": 1,
    "Deleted lines": "    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"dtype: {half,bfloat16,float,double}\")\n    .Attr(\"T: {int32, int64}\")\n    .SetShapeFn(shape_inference::RandomShape);\n\nREGISTER_OP(\"ParameterizedTruncatedNormal\")\n    .Input(\"shape: T\")\n    .Input(\"means: dtype\")\n    .Input(\"stdevs: dtype\")\n    .Input(\"minvals: dtype\")\n    .Input(\"maxvals: dtype\")\n    .SetIsStateful()\n    .Output(\"output: dtype\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"dtype: {half,bfloat16,float,double}\")\n    .Attr(\"T: {int32, int64}\")\n    .SetShapeFn(shape_inference::RandomShape);\n\nREGISTER_OP(\"TruncatedNormal\")\n    .Input(\"shape: T\")\n    .SetIsStateful()\n    .Output(\"output: dtype\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"dtype: {half,bfloat16,float,double}\")\n    .Attr(\"T: {int32, int64}\")\n    .SetShapeFn(shape_inference::RandomShape);\n\nREGISTER_OP(\"RandomShuffle\")\n    .Input(\"value: T\")\n    .SetIsStateful()\n    .Output(\"output: T\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"T: type\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n"
},
{
    "Id": 360,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683",
    "Violation": "missing",
    "Bug report": " Prevent array write out-of-bounds. If user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.",
    "Number of deleted lines": 0,
    "Deleted lines": "\nconstexpr int kInputTensor = 0;\nconstexpr int kAxis = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\n                          const TfLiteTensor* axis, TfLiteTensor* output) {\n  int axis_value;\n  // Retrive all 8 bytes when axis type is kTfLiteInt64 to avoid data loss.\n  if (axis->type == kTfLiteInt64) {\n    axis_value = static_cast<int>(*GetTensorData<int64_t>(axis));\n  } else {\n    axis_value = *GetTensorData<int>(axis);\n  }\n  if (axis_value < 0) {\n    axis_value += NumDimensions(input);\n  }\n\n  // Copy the input dimensions to output except the axis dimension.\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\n  int j = 0;\n  for (int i = 0; i < NumDimensions(input); ++i) {\n    if (i != axis_value) {\n      output_dims->data[j] = SizeOfDimension(input, i);\n      ++j;\n    }\n  }\n  return context->ResizeTensor(context, output, output_dims);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"
},
{
    "Id": 361,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/e82a377de614fed51da8a7c5242a90a7967169f2",
    "Violation": "missing",
    "Bug report": "Correct axis check",
    "Number of deleted lines": 3,
    "Deleted lines": "// PackOp\n//===----------------------------------------------------------------------===//\n\n// TODO(b/133486129): Implement shape inference for pack\n\nstatic LogicalResult Verify(PackOp op) {\n  // TODO(antiagainst): Implement other checks as in\n  // tensorflow/lite/kernels/pack.cc\n\n  if (op.getOperation()->getNumOperands() != op.values_count())\n    return op.emitOpError(\"input count should match 'values_count' attribute\");\n\n  Value operand0 = op.getOperand(0);\n  auto input_type = operand0.getType().cast<ShapedType>();\n\n  // Check axis bounds.\n  if (input_type.hasRank()) {\n    int64_t axis_value = op.axis().getSExtValue();\n    if (abs(axis_value) > input_type.getRank())\n      return op.emitOpError(\"op attribute 'axis' is out of bounds, got \")\n             << axis_value;\n  }\n\n  // Make sure all inputs have the same shape and element type.\n  // TODO(b/135032063): Simplify once fixed.\n  for (Type operand_type : op.getOperandTypes()) {\n    if (failed(mlir::verifyCompatibleShape(input_type, operand_type)))\n      return op.emitOpError(\"operands should be of the same type. got \")\n             << input_type << \", \" << operand_type;\n  }\n\n  return success();\n}\n\n//===----------------------------------------------------------------------===//\n// PReluOp\n//===----------------------------------------------------------------------===//\n\nstatic LogicalResult Verify(PReluOp op) {\n  auto input_type = op.input().getType().cast<ShapedType>();\n  auto alpha_type = op.alpha().getType().cast<ShapedType>();"
},
{
    "Id": 362,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/27de8e717c1bec91398f5a6be6c7287b657fc960",
    "Violation": "missing",
    "Bug report": " Improve shape function for CudnnRNNParamsSize. In cudnn_rnn_ops.cc, the CudnnRNNParamsSize does not have restrictions on num_layers, num_units, and input_size, though they all should be scalars. This fix adds the shape check of num_layers, num_units, and input_size for CudnnRNNParamsSize.",
    "Number of deleted lines": 0,
    "Deleted lines": "using shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\n\nREGISTER_OP(\"CudnnRNNParamsSize\")\n    .Input(\"num_layers: int32\")\n    .Input(\"num_units: int32\")\n    .Input(\"input_size: int32\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"S: {int32, int64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Output(\"params_size: S\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->Vector(1));\n      return Status::OK();\n    });\n\n\nREGISTER_OP(\"CudnnRNN\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .SetIsStateful()\n    .Output(\"output: T\")\n    .Output(\"output_h: T\")\n    .Output(\"output_c: T\")\n    .Output(\"reserve_space: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")"
},
{
    "Id": 363,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4a1d1c8413a3752af7dc91a7128e202660b0f05c",
    "Violation": "improper",
    "Bug report": " Fix mismatch of shape restriction in DrawBoundingBoxes. In the kernel of DrawBoundingBoxes, the shape of the input images should be 4-D. Though in the shape function, at the end `UnchangedShapeWithRankAtLeast(c, 3)` was used instead (at the beginning of the shape function the validation is `WithRank(c->input(0), 4, &images)` which is correct). This fix address the discrepancy by changing to `UnchangedShape`.",
    "Number of deleted lines": 1,
    "Deleted lines": "      ShapeHandle images;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 4, &images));\n      // Channel depth should be either 1 (GRY), 3 (RGB), or 4 (RGBA).\n      if (c->ValueKnown(c->Dim(images, 3))) {\n        int64 depth = c->Value(c->Dim(images, 3));\n        if (!(depth == 1 || depth == 3 || depth == 4)) {\n          return errors::InvalidArgument(\"Channel depth should be either 1 (GRY), \"\n                                         \"3 (RGB), or 4 (RGBA)\");\n        }\n      }\n\n      // The rank of boxes is 3: [batch, num_bounding_boxes, 4].\n      ShapeHandle boxes;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 3, &boxes));\n      // The last value of boxes shape is 4.\n      DimensionHandle unused;\n      TF_RETURN_IF_ERROR(c->WithValue(c->Dim(boxes, 2), 4, &unused));\n\n      return shape_inference::UnchangedShapeWithRankAtLeast(c, 3);\n    });\n\n// --------------------------------------------------------------------------\nREGISTER_OP(\"SampleDistortedBoundingBox\")\n    .Input(\"image_size: T\")\n    .Input(\"bounding_boxes: float\")\n    .Output(\"begin: T\")\n    .Output(\"size: T\")\n    .Output(\"bboxes: float\")\n    .Attr(\"T: {uint8, int8, int16, int32, int64}\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"min_object_covered: float = 0.1\")\n    .Attr(\"aspect_ratio_range: list(float) = [0.75, 1.33]\")\n    .Attr(\"area_range: list(float) = [0.05, 1.0]\")\n    .Attr(\"max_attempts: int = 100\")\n    .Attr(\"use_image_if_no_bounding_boxes: bool = false\")\n    .SetIsStateful()\n    .SetShapeFn([](InferenceContext* c) {\n      // Get inputs and validate ranks."
},
{
    "Id": 364,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/181ca305a7954ce86a453a39db0b4f6d10b82720",
    "Violation": "missing",
    "Bug report": " Add shape validation in shape function of MapAndBatchDataset. In MapAndBatchDataset, batch_size, num_parallel_batches, and drop_remainder are 0-D scalars. This fix adds the shape check to those Inputs. Note since the Input of `other_arguments` is a list and is before `batch_size`, the shape of the `batch_size` and others could not be obtained through index like `c->input(2)` etc directly. It is still possible to obtain the ShapeHandle with names `c >input(\"batch_size\", &batch_size)`, though.",
    "Number of deleted lines": 1,
    "Deleted lines": "    .Output(\"handle: variant\")\n    .Attr(\"f: func\")\n    .Attr(\"Targuments: list(type) >= 0\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"MapAndBatchDataset\")\n    .Input(\"input_dataset: variant\")\n    .Input(\"other_arguments: Targuments\")\n    .Input(\"batch_size: int64\")\n    .Input(\"num_parallel_batches: int64\")\n    .Input(\"drop_remainder: bool\")\n    .Output(\"handle: variant\")\n    .Attr(\"f: func\")\n    .Attr(\"Targuments: list(type) >= 0\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"MapAndBatchDatasetV2\")\n    .Input(\"input_dataset: variant\")\n    .Input(\"other_arguments: Targuments\")\n    .Input(\"batch_size: int64\")\n    .Input(\"num_parallel_calls: int64\")\n    .Input(\"drop_remainder: bool\")\n    .Output(\"handle: variant\")\n    .Attr(\"f: func\")\n    .Attr(\"Targuments: list(type) >= 0\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"PrefetchDataset\")\n    .Input(\"input_dataset: variant\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")"
},
{
    "Id": 365,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/6e153325b66330dafea4e4e8b67b5d56b1a37852",
    "Violation": "missing",
    "Bug report": " [XLA:GPU] Handle edge case in Triton Softmax rewriter where bitcast produces a scalar. This avoids crashing within last_dimension when attempting to match.",
    "Number of deleted lines": 0,
    "Deleted lines": "    case HloOpcode::kConvert:\n    case HloOpcode::kParameter:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Returns true if a trivially connected producer of 'consumer' with opcode\n// 'opcode' exists. If such an instruction is found, the value of 'producer' is\n// set to it. The definition of \"trivial\" operations is as given in\n// 'IsTriviallyFusible'.\nbool TrivialEdge(HloInstruction** producer, HloInstruction* consumer,\n                 HloOpcode opcode);\n\nbool BitcastIsTilingNoop(HloInstruction* bitcast) {\n  CHECK_EQ(bitcast->opcode(), HloOpcode::kBitcast);\n\n  // In the Softmax rewriter for now, tiling is derived from a hero reduction\n  // operation, which should be reducing its input on the last axis. Therefore,\n  // a bitcast is always a no-op with regards to a tile if\n  //   (1) it does not change the size of the reduction dimension of its input\n  //       (the last one); if its input is already reduced, then (1) is true\n  //       by default\n  //   (2) the layout of its output is ordered in the same way as the layout of\n  //       its input. This is a fuzzy definition, but since we assume fusible\n  //       ops to always have a default layout, we can just check if both the\n  //       bitcast and its input have a default layout\n  auto last_dimension = [](const HloInstruction* instr) {\n    return instr->shape().dimensions().back();\n  };\n\n  HloInstruction* reduce = nullptr;\n  TrivialEdge(&reduce, bitcast->mutable_operand(0), HloOpcode::kReduce);\n\n  return (HasDefaultLayout(bitcast->shape()) &&\n          HasDefaultLayout(bitcast->operand(0)->shape()) &&\n          (reduce != nullptr ||"
},
{
    "Id": 366,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/d94ffe08a65400f898241c0374e9edc6fa8ed257",
    "Violation": "missing",
    "Bug report": " Prevent an OOB read in expand_dims.cc. The for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).",
    "Number of deleted lines": 0,
    "Deleted lines": "#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace expand_dims {\n\n// Input indices\nenum { kInput = 0, kAxis };\n\nnamespace {\nTfLiteStatus ExpandTensorDim(TfLiteContext* context, const TfLiteTensor& input,\n                             int axis, TfLiteTensor* output) {\n  const TfLiteIntArray& input_dims = *input.dims;\n  if (axis < 0) {\n    axis = input_dims.size + 1 + axis;\n  }\n  TF_LITE_ENSURE(context, axis <= input_dims.size);\n\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\n  for (int i = 0; i < output_dims->size; ++i) {\n    if (i < axis) {\n      output_dims->data[i] = input_dims.data[i];\n    } else if (i == axis) {\n      output_dims->data[i] = 1;\n    } else {\n      output_dims->data[i] = input_dims.data[i - 1];\n    }\n  }\n\n  return context->ResizeTensor(context, output, output_dims);\n}\n\nTfLiteStatus GetAxisValueFromTensor(TfLiteContext* context,\n                                    const TfLiteTensor& axis, int* axis_value) {\n  TF_LITE_ENSURE_EQ(context, NumElements(&axis), 1);\n  switch (axis.type) {\n    case kTfLiteInt32:"
},
{
    "Id": 367,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a680ed0bf03d5ca3b2c4a70c0d95eeebc20da6d6",
    "Violation": "missing",
    "Bug report": " For Substr check pos and len rank equality only when their rank is known. This fixes a bug where len has unknown rank, while pos has known shape. The WithRank(...) check returned error in such a case. Here we compare their ranks only when both pos and len have known rank.",
    "Number of deleted lines": 2,
    "Deleted lines": "    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"DecodeBase64\")\n    .Input(\"input: string\")\n    .Output(\"output: string\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Substr\")\n    .Input(\"input: string\")\n    .Input(\"pos: T\")\n    .Input(\"len: T\")\n    .Output(\"output: string\")\n    .Attr(\"T: {int32, int64}\")\n    .Attr(\"unit: {'BYTE', 'UTF8_CHAR'} = 'BYTE'\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle pos_shape = c->input(1);\n      ShapeHandle len_shape = c->input(2);\n      ShapeHandle unused;\n      // Check that pos/len have same rank\n      TF_RETURN_IF_ERROR(c->WithRank(pos_shape, c->Rank(len_shape), &unused));\n      // Check that dimensions are equal\n      for (int32 i = 0; i < c->Rank(pos_shape); ++i) {\n        DimensionHandle pos_dim = c->Dim(pos_shape, i);\n        DimensionHandle len_dim = c->Dim(len_shape, i);\n        if (c->Value(pos_dim) != c->Value(len_dim)) {\n          return errors::InvalidArgument(\n              \"pos and len shapes must match: \", c->DebugString(pos_shape),\n              \" vs. \", c->DebugString(len_shape));\n        }\n      }\n      // c->input(0) is the ShapeHandle to input strings\n      // BroadcastBinaryOpShapeFn infers shape from c->input(0) and c->input(1).\n      return shape_inference::BroadcastBinaryOpShapeFn(c);\n    });\n\nREGISTER_OP(\"UnicodeScript\")\n    .Input(\"input: int32\")\n    .Output(\"output: int32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n"
},
{
    "Id": 368,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9187be7adff07be82856add498aa3ff4b5f95998",
    "Violation": "missing",
    "Bug report": "add checks for compression_type and buffer_size also",
    "Number of deleted lines": 0,
    "Deleted lines": "    .Input(\"filename: string\")\n    .Output(\"handle: variant\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"TextLineDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"compression_type: string\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      shape_inference::ShapeHandle unused;\n      // `filenames` must be a scalar or a vector.\n      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(0), 1, &unused));\n      return shape_inference::ScalarShape(c);\n    });\n\nREGISTER_OP(\"SqlDataset\")\n    .Input(\"driver_name: string\")\n    .Input(\"data_source_name: string\")\n    .Input(\"query: string\")\n    .Output(\"handle: variant\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"FixedLengthRecordDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"header_bytes: int64\")\n    .Input(\"record_bytes: int64\")\n    .Input(\"footer_bytes: int64\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")"
},
{
    "Id": 369,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/779664494d43b18a812361197dcbea2f25912c02",
    "Violation": "missing",
    "Bug report": "Add shape check to TextLineDataset op",
    "Number of deleted lines": 4,
    "Deleted lines": "    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"CacheDataset\")\n    .Input(\"input_dataset: variant\")\n    .Input(\"filename: string\")\n    .Output(\"handle: variant\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"TextLineDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"compression_type: string\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);  // TODO(mrry): validate\n                                                // that `filenames` is\n                                                // a scalar or a\n                                                // vector.\n\nREGISTER_OP(\"SqlDataset\")\n    .Input(\"driver_name: string\")\n    .Input(\"data_source_name: string\")\n    .Input(\"query: string\")\n    .Output(\"handle: variant\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"FixedLengthRecordDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"header_bytes: int64\")\n    .Input(\"record_bytes: int64\")\n    .Input(\"footer_bytes: int64\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked"
},
{
    "Id": 370,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c4dea2255c71037c9cade9cbd1d7820b3429b3fa",
    "Violation": "missing",
    "Bug report": "Add shape check for buffer_size with TFRecordDataset",
    "Number of deleted lines": 0,
    "Deleted lines": "    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"TFRecordDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"compression_type: string\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      shape_inference::ShapeHandle unused;\n      // `filenames` must be a scalar or a vector.\n      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(0), 1, &unused));\n      // `compression_type` could only be a scalar.\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused) );\n      return shape_inference::ScalarShape(c);\n    });\n\nREGISTER_OP(\"Iterator\")\n    .Output(\"handle: resource\")\n    .Attr(\"shared_name: string\")\n    .Attr(\"container: string\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"MakeIterator\")\n    .Input(\"dataset: variant\")\n    .Input(\"iterator: resource\")\n    .SetShapeFn(shape_inference::NoOutputs);\n\nREGISTER_OP(\"OneShotIterator\")\n    .Output(\"handle: resource\")\n    .Attr(\"dataset_factory: func\")\n    .Attr(\"output_types: list(type) >= 1\")"
},
{
    "Id": 371,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/d97ffbdf362fa7d06ef8d946c8620ff7a3a50a08",
    "Violation": "missing",
    "Bug report": "Add shape check for compression_type in TFrecordDataset",
    "Number of deleted lines": 0,
    "Deleted lines": "    .Input(\"footer_bytes: int64\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"TFRecordDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"compression_type: string\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      shape_inference::ShapeHandle unused;\n      // `filenames` must be a scalar or a vector.\n      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(0), 1, &unused));\n      return shape_inference::ScalarShape(c);\n    });\n\nREGISTER_OP(\"Iterator\")\n    .Output(\"handle: resource\")\n    .Attr(\"shared_name: string\")\n    .Attr(\"container: string\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"MakeIterator\")\n    .Input(\"dataset: variant\")\n    .Input(\"iterator: resource\")\n    .SetShapeFn(shape_inference::NoOutputs);\n\nREGISTER_OP(\"OneShotIterator\")\n    .Output(\"handle: resource\")\n    .Attr(\"dataset_factory: func\")\n    .Attr(\"output_types: list(type) >= 1\")"
},
{
    "Id": 372,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/7586dee9aa8b4b63143ab658ca59658aaed0df97",
    "Violation": "missing",
    "Bug report": " Add shape check to TFRecordDataset. The inputs of TFRecordDataset have the requirements for shapes. However, the check was not done in the shape function. This fix adds shape checks whenever possible.",
    "Number of deleted lines": 1,
    "Deleted lines": "REGISTER_OP(\"FixedLengthRecordDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"header_bytes: int64\")\n    .Input(\"record_bytes: int64\")\n    .Input(\"footer_bytes: int64\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"TFRecordDataset\")\n    .Input(\"filenames: string\")\n    .Input(\"compression_type: string\")\n    .Input(\"buffer_size: int64\")\n    .Output(\"handle: variant\")\n    .SetIsStateful()  // TODO(b/65524810): Source dataset ops must be marked\n                      // stateful to inhibit constant folding.\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"Iterator\")\n    .Output(\"handle: resource\")\n    .Attr(\"shared_name: string\")\n    .Attr(\"container: string\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .SetShapeFn(shape_inference::ScalarShape);\n\nREGISTER_OP(\"MakeIterator\")\n    .Input(\"dataset: variant\")\n    .Input(\"iterator: resource\")\n    .SetShapeFn(shape_inference::NoOutputs);\n\nREGISTER_OP(\"OneShotIterator\")\n    .Output(\"handle: resource\")\n    .Attr(\"dataset_factory: func\")\n    .Attr(\"output_types: list(type) >= 1\")\n    .Attr(\"output_shapes: list(shape) >= 1\")\n    .Attr(\"container: string = ''\")"
},
{
    "Id": 373,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/851177fee860211e2fabcb019d644e75b7f701b0",
    "Violation": "missing",
    "Bug report": "Add shape check for shift of tf.roll",
    "Number of deleted lines": 0,
    "Deleted lines": "#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\n// --------------------------------------------------------------------------\nREGISTER_OP(\"Roll\")\n    .Input(\"input: T\")\n    .Input(\"shift: Tshift\")\n    .Input(\"axis: Taxis\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .Attr(\"Tshift: {int32,int64}\")\n    .Attr(\"Taxis: {int32,int64}\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      shape_inference::ShapeHandle unused;\n      // The `input` must be 1-D or higher\n      TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &unused));\n      // The `axis` must be scalar or 1-D.\n      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(2), 1, &unused));\n\n      return shape_inference::UnchangedShape(c);\n    });\n\n}  // namespace tensorflow\n"
},
{
    "Id": 374,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/3f796ff8c9e6d7ff88f99c056b78e88fb0b31114",
    "Violation": "missing",
    "Bug report": "Add axis shape check for tf.roll",
    "Number of deleted lines": 0,
    "Deleted lines": "#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\n// --------------------------------------------------------------------------\nREGISTER_OP(\"Roll\")\n    .Input(\"input: T\")\n    .Input(\"shift: Tshift\")\n    .Input(\"axis: Taxis\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .Attr(\"Tshift: {int32,int64}\")\n    .Attr(\"Taxis: {int32,int64}\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      shape_inference::ShapeHandle unused;\n      // The `input` must be 1-D or higher\n      TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &unused));\n\n      return shape_inference::UnchangedShape(c);\n    });\n\n}  // namespace tensorflow\n"
},
{
    "Id": 375,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/10467d29e05d9957a6e3cb2335f8eeba1fd8896e",
    "Violation": "missing",
    "Bug report": " Improve shape function check for tf.roll. The `tf.roll` op has requirements for the shape of inputs. However, the shape of the inputs are only done at the runtime inside the kernel. This fix improve the shape function so that the check could be done early if shape is already known in the shape function.",
    "Number of deleted lines": 1,
    "Deleted lines": "limitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\n// --------------------------------------------------------------------------\nREGISTER_OP(\"Roll\")\n    .Input(\"input: T\")\n    .Input(\"shift: Tshift\")\n    .Input(\"axis: Taxis\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .Attr(\"Tshift: {int32,int64}\")\n    .Attr(\"Taxis: {int32,int64}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n}  // namespace tensorflow\n"
},
{
    "Id": 376,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/41deb95a7bde735d3c8b9adedd8b1fe8c1ef2732",
    "Violation": "missing",
    "Bug report": "support unknown rank, check rank>=0",
    "Number of deleted lines": 0,
    "Deleted lines": "\nShapeHandle InferenceContext::MakeShape(\n    std::initializer_list<DimensionOrConstant> dims) {\n  std::vector<DimensionHandle> dims_actual;\n  dims_actual.reserve(dims.size());\n  for (const DimensionOrConstant& d : dims) {\n    dims_actual.push_back(MakeDim(d));\n  }\n\n  return shape_manager_.MakeShape(dims_actual);\n}\n\nShapeHandle InferenceContext::UnknownShape() {\n  return shape_manager_.UnknownShape();\n}\n\nShapeHandle InferenceContext::UnknownShapeOfRank(int64 rank) {\n  CHECK_LE(rank, kint32max) << \"rank must be less than kint32max\";\n  std::vector<DimensionHandle> dims(rank);\n  for (int32 i = 0; i < rank; ++i) {\n    dims[i] = UnknownDim();\n  }\n  return MakeShape(dims);\n}\n\nShapeHandle InferenceContext::Scalar() { return MakeShape({}); }\n\nShapeHandle InferenceContext::Vector(DimensionOrConstant dim) {\n  return MakeShape({dim});\n}\n\nShapeHandle InferenceContext::Matrix(DimensionOrConstant dim1,\n                                     DimensionOrConstant dim2) {\n  return MakeShape({dim1, dim2});\n}\n\nStatus InferenceContext::MakeShapeFromShapeTensor(int input_idx,\n                                                  ShapeHandle* out) {"
},
{
    "Id": 377,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8b742f8559e88474735d0a2c03e00da65e40b412",
    "Violation": "missing",
    "Bug report": "Fix check error on shape overflow.",
    "Number of deleted lines": 2,
    "Deleted lines": "      }\n    } else {\n      // Make sure that all inputs have the same rank and outer dimensions.\n      OP_REQUIRES(context, input_rank == in.dims(),\n                  errors::InvalidArgument(\n                      \"All input tensors must have the same rank.\"));\n      for (int dim = 0; dim < input_rank - 2; ++dim) {\n        OP_REQUIRES(\n            context, in.dim_size(dim) == batch_shape->dim_size(dim),\n            errors::InvalidArgument(\n                \"All input tensors must have the same outer dimensions.\"));\n      }\n    }\n\n    const int row_dimension = input_rank - 2;\n    const int col_dimension = input_rank - 1;\n    const int64_t num_rows = in.dim_size(row_dimension);\n    const int64_t num_cols = in.dim_size(col_dimension);\n    input_matrix_shapes->emplace_back(\n        std::initializer_list<int64_t>({num_rows, num_cols}));\n    inputs->emplace_back(&in);\n    OP_REQUIRES(\n        context, in.dtype() == DataTypeToEnum<InputScalar>::v(),\n        errors::InvalidArgument(\"Invalid input dtype \", in.dtype(), \" vs \",\n                                DataTypeToEnum<InputScalar>::v()));\n  }\n  // Have the derived class validate that the inputs are as expected.\n  ValidateInputMatrixShapes(context, *input_matrix_shapes);\n}\n\ntemplate <class InputScalar, class OutputScalar>\nvoid LinearAlgebraOp<InputScalar, OutputScalar>::PrepareOutputs(\n    OpKernelContext* context, const TensorShapes& input_matrix_shapes,\n    const TensorShape& batch_shape, TensorOutputs* outputs,\n    TensorShapes* output_matrix_shapes) {\n  // Get shape for each of the matrix outputs produced by the derived class.\n  *output_matrix_shapes = GetOutputMatrixShapes(input_matrix_shapes);\n  const int num_outputs = output_matrix_shapes->size();\n\n  // Make sure the number of op outputs is what the derived class expects."
},
{
    "Id": 378,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1595906c2192b7f402f746652042a592ad290378",
    "Violation": "missing",
    "Bug report": " Prevent CHECK-fail DOS in BoostedTreesSparseAggregateStatsOp. Calling `tensor->matrix` should only happen after checking that the tensor shape implies a matrix.",
    "Number of deleted lines": 0,
    "Deleted lines": "        context, TensorShapeUtils::IsMatrix(gradients_t->shape()),\n        errors::InvalidArgument(\"gradients must be a matrix, received shape \",\n                                gradients_t->shape().DebugString()));\n    const auto gradients = gradients_t->matrix<float>();\n\n    // hessians.\n    const Tensor* hessians_t;\n    OP_REQUIRES_OK(context, context->input(\"hessians\", &hessians_t));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsMatrix(hessians_t->shape()),\n        errors::InvalidArgument(\"hessians must be a matrix, received shape \",\n                                hessians_t->shape().DebugString()));\n    const auto hessians = hessians_t->matrix<float>();\n\n    // feature indices.\n    const Tensor* feature_indices_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_indices\", &feature_indices_t));\n    const auto feature_indices = feature_indices_t->matrix<int32>();\n\n    // feature values.\n    const Tensor* feature_values_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_values\", &feature_values_t));\n    const auto feature_values = feature_values_t->vec<int32>();\n\n    // feature shape.\n    const Tensor* feature_shape_t;\n    OP_REQUIRES_OK(context, context->input(\"feature_shape\", &feature_shape_t));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(feature_shape_t->shape()),\n                errors::InvalidArgument(\n                    \"Input shapes should be a vector but received shapes \",\n                    feature_shape_t->shape().DebugString()));\n    const auto feature_shape = feature_shape_t->vec<int32>();\n\n    const int64_t batch_size = gradients_t->dim_size(0);\n    const int64_t logits_dims = gradients_t->dim_size(1);\n    const int64_t hessians_dims = hessians_t->dim_size(1);"
},
{
    "Id": 379,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/54c94431e5dd17fc46d99da1a3f132c76414c161",
    "Violation": "missing",
    "Bug report": " Prevent CHECK-fail DOS in BoostedTreesSparseAggregateStatsOp. Calling `tensor->matrix` should only happen after checking that the tensor shape implies a matrix.",
    "Number of deleted lines": 0,
    "Deleted lines": "  void Compute(OpKernelContext* const context) override {\n    // node_ids.\n    const Tensor* node_ids_t;\n    OP_REQUIRES_OK(context, context->input(\"node_ids\", &node_ids_t));\n    const auto node_ids = node_ids_t->vec<int32>();\n\n    // gradients.\n    const Tensor* gradients_t;\n    OP_REQUIRES_OK(context, context->input(\"gradients\", &gradients_t));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsMatrix(gradients_t->shape()),\n        errors::InvalidArgument(\"gradients must be a matrix, received shape \",\n                                gradients_t->shape().DebugString()));\n    const auto gradients = gradients_t->matrix<float>();\n\n    // hessians.\n    const Tensor* hessians_t;\n    OP_REQUIRES_OK(context, context->input(\"hessians\", &hessians_t));\n    const auto hessians = hessians_t->matrix<float>();\n\n    // feature indices.\n    const Tensor* feature_indices_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_indices\", &feature_indices_t));\n    const auto feature_indices = feature_indices_t->matrix<int32>();\n\n    // feature values.\n    const Tensor* feature_values_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_values\", &feature_values_t));\n    const auto feature_values = feature_values_t->vec<int32>();\n\n    // feature shape.\n    const Tensor* feature_shape_t;\n    OP_REQUIRES_OK(context, context->input(\"feature_shape\", &feature_shape_t));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(feature_shape_t->shape()),\n                errors::InvalidArgument(\n                    \"Input shapes should be a vector but received shapes \","
},
{
    "Id": 380,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/5d96267d907ac2119cbccf1416b749195e8fd8de",
    "Violation": "missing",
    "Bug report": " Prevent CHECK-fail DOS in BoostedTreesSparseAggregateStatsOp. Calling `tensor->matrix` should only happen after checking that the tensor shape implies a matrix.",
    "Number of deleted lines": 0,
    "Deleted lines": "class BoostedTreesSparseAggregateStatsOp : public OpKernel {\n public:\n  explicit BoostedTreesSparseAggregateStatsOp(\n      OpKernelConstruction* const context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"max_splits\", &max_splits_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_buckets\", &num_buckets_));\n  }\n\n  void Compute(OpKernelContext* const context) override {\n    // node_ids.\n    const Tensor* node_ids_t;\n    OP_REQUIRES_OK(context, context->input(\"node_ids\", &node_ids_t));\n    const auto node_ids = node_ids_t->vec<int32>();\n\n    // gradients.\n    const Tensor* gradients_t;\n    OP_REQUIRES_OK(context, context->input(\"gradients\", &gradients_t));\n    const auto gradients = gradients_t->matrix<float>();\n\n    // hessians.\n    const Tensor* hessians_t;\n    OP_REQUIRES_OK(context, context->input(\"hessians\", &hessians_t));\n    const auto hessians = hessians_t->matrix<float>();\n\n    // feature indices.\n    const Tensor* feature_indices_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_indices\", &feature_indices_t));\n    const auto feature_indices = feature_indices_t->matrix<int32>();\n\n    // feature values.\n    const Tensor* feature_values_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_values\", &feature_values_t));\n    const auto feature_values = feature_values_t->vec<int32>();\n\n    // feature shape."
},
{
    "Id": 381,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/41ab69692ede0db3422fa70bc5889d470741e69c",
    "Violation": "missing",
    "Bug report": " Check for tensors to be vectors in BoostedTreesSparseAggregateStatsOp. Calling `tensor->vec` should only happen after checking that the tensor shape implies a vector. Otherwise, we can get denial of service via `CHECK`-fails",
    "Number of deleted lines": 0,
    "Deleted lines": "        errors::InvalidArgument(\"hessians must be a matrix, received shape \",\n                                hessians_t->shape().DebugString()));\n    const auto hessians = hessians_t->matrix<float>();\n\n    // feature indices.\n    const Tensor* feature_indices_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_indices\", &feature_indices_t));\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(feature_indices_t->shape()),\n                errors::InvalidArgument(\n                    \"feature_indices must be a matrix, received shape \",\n                    feature_indices_t->shape().DebugString()));\n    const auto feature_indices = feature_indices_t->matrix<int32>();\n\n    // feature values.\n    const Tensor* feature_values_t;\n    OP_REQUIRES_OK(context,\n                   context->input(\"feature_values\", &feature_values_t));\n    const auto feature_values = feature_values_t->vec<int32>();\n\n    // feature shape.\n    const Tensor* feature_shape_t;\n    OP_REQUIRES_OK(context, context->input(\"feature_shape\", &feature_shape_t));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(feature_shape_t->shape()),\n                errors::InvalidArgument(\n                    \"Input shapes should be a vector but received shapes \",\n                    feature_shape_t->shape().DebugString()));\n    const auto feature_shape = feature_shape_t->vec<int32>();\n\n    const int64_t batch_size = gradients_t->dim_size(0);\n    const int64_t logits_dims = gradients_t->dim_size(1);\n    const int64_t hessians_dims = hessians_t->dim_size(1);\n    const int64_t stats_dims = logits_dims + hessians_dims;\n    const int64_t num_sparse_entries = feature_indices_t->dim_size(0);\n    const int32_t feature_dims = feature_shape(1);\n    OP_REQUIRES(context, num_sparse_entries <= batch_size * feature_dims,\n                errors::InvalidArgument(\n                    \"feature_indices dim0 should be <= gradients dim0 * \""
},
{
    "Id": 382,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8d733ecdb270dd90b2b5f53fd220d5ce17a5e20f",
    "Violation": "missing",
    "Bug report": " Check for tensors to be vectors in BoostedTreesSparseAggregateStatsOp. Calling `tensor->vec` should only happen after checking that the tensor shape implies a vector. Otherwise, we can get denial of service via `CHECK`-fails",
    "Number of deleted lines": 0,
    "Deleted lines": "                            stats_map, gradients, hessians, node_ids);\n    }\n  }\n}\n\nclass BoostedTreesSparseAggregateStatsOp : public OpKernel {\n public:\n  explicit BoostedTreesSparseAggregateStatsOp(\n      OpKernelConstruction* const context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"max_splits\", &max_splits_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_buckets\", &num_buckets_));\n  }\n\n  void Compute(OpKernelContext* const context) override {\n    // node_ids.\n    const Tensor* node_ids_t;\n    OP_REQUIRES_OK(context, context->input(\"node_ids\", &node_ids_t));\n    const auto node_ids = node_ids_t->vec<int32>();\n\n    // gradients.\n    const Tensor* gradients_t;\n    OP_REQUIRES_OK(context, context->input(\"gradients\", &gradients_t));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsMatrix(gradients_t->shape()),\n        errors::InvalidArgument(\"gradients must be a matrix, received shape \",\n                                gradients_t->shape().DebugString()));\n    const auto gradients = gradients_t->matrix<float>();\n\n    // hessians.\n    const Tensor* hessians_t;\n    OP_REQUIRES_OK(context, context->input(\"hessians\", &hessians_t));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsMatrix(hessians_t->shape()),\n        errors::InvalidArgument(\"hessians must be a matrix, received shape \",\n                                hessians_t->shape().DebugString()));\n    const auto hessians = hessians_t->matrix<float>();\n"
},
{
    "Id": 383,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f482488b481a799ca07e7e2d153cf47b8e91a60c",
    "Violation": "missing",
    "Bug report": " TFLite OpenGL ES delegate: out of boundary writes fixed for bhwc->phwc4 conversion.",
    "Number of deleted lines": 1,
    "Deleted lines": "  *converter = ConverterBhwcToPhwc4(std::move(program), workgroup_size);\n  return OkStatus();\n}\n\nStatus ConverterBhwcToPhwc4::Convert(const BHWC& shape, const GlBuffer& source,\n                                     CommandQueue* command_queue,\n                                     GlBuffer* destination) {\n  if (source.bytes_size() < BytesForBHWC(shape)) {\n    return InvalidArgumentError(\n        \"BhwcToPhwc4: Input data size does not match expected size.\");\n  }\n  if (destination->bytes_size() < BytesForPHWC4(shape)) {\n    return InvalidArgumentError(\n        \"BhwcToPhwc4: output data size does not match expected size.\");\n  }\n  if (shape.b != 1) {\n    return UnimplementedError(\"BhwcToPhwc4: Batch size is not equal to 1.\");\n  }\n  uint3 workload = uint3(shape.w, shape.h, shape.c);\n  uint3 num_workgroups = IntegralDivideRoundUp(workload, workgroup_size_);\n\n  RETURN_IF_ERROR(program_.SetParameter(\n      {\"sizes_\",\n       int4(static_cast<int32_t>(workload.x), static_cast<int32_t>(workload.y),\n            static_cast<int32_t>(workload.z), static_cast<int32_t>(shape.c))}));\n  RETURN_IF_ERROR(source.BindToIndex(0));\n  RETURN_IF_ERROR(destination->BindToIndex(1));\n  if (command_queue) {\n    return command_queue->Dispatch(program_, num_workgroups);\n  }\n  return program_.Dispatch(num_workgroups);\n}\n\n}  // namespace gl\n}  // namespace gpu\n}  // namespace tflite\n"
},
{
    "Id": 384,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/58759659ee547a957c5d36e72f2274ab34fdb6cb",
    "Violation": "improper",
    "Bug report": "Fix OOB check for result_index in header generation",
    "Number of deleted lines": 1,
    "Deleted lines": "  }\n  for (const tf2xla::Fetch& fetch : config.fetch()) {\n    if (!fetch.name().empty()) {\n      TF_RETURN_IF_ERROR(ValidateCppIdent(fetch.name(), \"fetch name\"));\n    }\n  }\n  return Status::OK();\n}\n\n}  // namespace\n\nStatus GenerateHeader(const CodegenOpts& opts, const tf2xla::Config& config,\n                      const CompileResult& compile_result,\n                      const MetadataResult& metadata_result, string* header) {\n  TF_RETURN_IF_ERROR(ValidateConfig(config));\n  TF_RETURN_IF_ERROR(ValidateFeedFetchCppNames(config));\n  const int64 result_index = compile_result.aot->result_buffer_index();\n  const xla::BufferSizes& temp_sizes = compile_result.aot->buffer_sizes();\n  if (result_index < 0 || result_index > temp_sizes.size()) {\n    return errors::InvalidArgument(\"result index: \", result_index,\n                                   \" is outside the range of temp sizes: [0,\",\n                                   temp_sizes.size(), \")\");\n  }\n\n  // Compute sizes and generate methods.\n  std::vector<int64> arg_sizes;\n  TF_RETURN_IF_ERROR(ComputeArgSizes(compile_result, &arg_sizes));\n  const xla::ProgramShape& ps = compile_result.program_shape;\n  string methods_arg, methods_result;\n  TF_RETURN_IF_ERROR(GenArgMethods(config, ps, compile_result, &methods_arg));\n  TF_RETURN_IF_ERROR(GenResultMethods(config, ps, &methods_result));\n  const std::vector<intptr_t> iarg(arg_sizes.begin(), arg_sizes.end());\n  const std::vector<intptr_t> itemp(temp_sizes.begin(), temp_sizes.end());\n  const size_t arg_bytes_aligned =\n      runtime::aligned_buffer_bytes(iarg.data(), iarg.size());\n  const size_t arg_bytes_total = total_buffer_bytes(iarg.data(), iarg.size());\n  const size_t temp_bytes_aligned =\n      runtime::aligned_buffer_bytes(itemp.data(), itemp.size());\n  const size_t temp_bytes_total ="
},
{
    "Id": 385,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/80b65ab79bf8dd6ec03c570b59a1208bb27fec24",
    "Violation": "improper",
    "Bug report": " Small fix to axis check for tfl.pack to tosa. There was an off-by-one error when checking the axis value based on the input rank.",
    "Number of deleted lines": 1,
    "Deleted lines": "    RankedTensorType reshape_rank1_size1_type =\n        tensorflow::GetTypeFromTFTensorShape(reshape_rank1_size1_shape,\n                                             result_type.getElementType());\n    DenseI64ArrayAttr shape_rank1_size1_attr = rewriter.getDenseI64ArrayAttr(\n        tensorflow::ConvertMlirShapeToTF(reshape_rank1_size1_shape));\n    for (int i = 0; i < inputs.size(); i++) {\n      auto a0_reshape_op = CreateOpAndInfer<tosa::ReshapeOp>(\n          rewriter, op->getLoc(), reshape_rank1_size1_type, inputs[i],\n          shape_rank1_size1_attr);\n      inputs[i] = a0_reshape_op.getResult();\n    }\n  }\n\n  // Sanity check 2: axis can be from [0, rank(input)+1]\n  // Where rank(input)+1 means create a new dimension\n  // Negative values are also allowed up to -(rank(input)+1)\n  // where the axis \"wraps around\".\n  if (axis < 0) axis += input_tensor_rank;\n  if ((axis < 0) || (axis > (input_tensor_rank + 1))) {\n    (void)rewriter.notifyMatchFailure(op, \"axis out of valid range\");\n    return std::nullopt;\n  }\n\n  // Sanity check 2: if input shape is [A, B, C], output shape should be [N,\n  // A, B, C]\n  // 2.a check output is rank(input) + 1\n  SmallVector<int64_t> output_shape_vals(result_type.getShape().begin(),\n                                         result_type.getShape().end());\n  if (output_shape_vals.size() != (input_tensor_rank + 1)) {\n    (void)rewriter.notifyMatchFailure(op, \"output tensor rank mismatch\");\n    return std::nullopt;\n  }\n  // 2.b check output rank 0 is N\n  if (output_shape_vals[axis] != inputs.size()) {\n    (void)rewriter.notifyMatchFailure(op, \"output tensor shape mismatch\");\n    return std::nullopt;\n  }\n  // Most of the cases when PackOp.axis() is within [0, rank(input) - 1].\n  // We can directly concatenate along that axis and perform the reshape."
},
{
    "Id": 386,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c2ff14318050e26302785a49a1719d29ddcc91b4",
    "Violation": "improper",
    "Bug report": " [XNNPACK] Fix incorrect check in slice node. begin+size == input dimension is valid, e.g. input size is 3, begin is 2, size is 1.",
    "Number of deleted lines": 2,
    "Deleted lines": "        size[i] = input_shape->data[i] - begin[i];\n      }\n      if (size[i] > input_shape->data[i]) {\n        TF_LITE_MAYBE_KERNEL_LOG(logging_context,\n                                 \"size %\" PRId64\n                                 \" must be less than or equals to input \"\n                                 \"dimension %d in SLICE node #%d\",\n                                 size[i], input_shape->data[i], node_index);\n        return kTfLiteError;\n      }\n      if (size[i] != output_shape->data[i]) {\n        TF_LITE_MAYBE_KERNEL_LOG(logging_context,\n                                 \"size %\" PRId64\n                                 \" does not match output shape %d at \"\n                                 \"dimension %d in SLICE node #%d\",\n                                 size[i], output_shape->data[i], i, node_index);\n        return kTfLiteError;\n      }\n      if (begin[i] + size[i] >= input_shape->data[i]) {\n        TF_LITE_MAYBE_KERNEL_LOG(logging_context,\n                                 \"begin + size (%\" PRId64 \" + %\" PRId64\n                                 \") must be less input \"\n                                 \"dimension %d in SLICE node #%d\",\n                                 begin[i], size[i], input_shape->data[i],\n                                 node_index);\n        return kTfLiteError;\n      }\n    }\n\n    if (subgraph != nullptr) {\n      // Convert to size_t.\n      std::array<size_t, XNN_MAX_TENSOR_DIMS> offsets;\n      std::copy(begin.begin(), begin.end(), offsets.begin());\n      std::array<size_t, XNN_MAX_TENSOR_DIMS> sizes;\n      std::copy(size.begin(), size.end(), sizes.begin());\n\n      const xnn_status status = xnn_define_static_slice(\n          subgraph, num_dims, offsets.data(), sizes.data(),\n          xnnpack_tensors[node->inputs->data[0]],\n          xnnpack_tensors[node->outputs->data[0]], /*flags=*/0);\n      if (status != xnn_status_success) {\n        TF_LITE_KERNEL_LOG(logging_context, \"failed to delegate %s node #%d\","
},
{
    "Id": 387,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/d23458fdd2655c83ff9d54725062ded31b644ba4",
    "Violation": "improper",
    "Bug report": " [XLA:CPU] Do not check that the size of the XLA parameter buffer is exactly equal to the size of the underlying given buffer Instead, check that the underlying allocation is \"large enough\". This is also more consistent with XLA:GPU behavior. The mismatch can happen when the input comes from tf.where, which is backed by an allocation larger than is actually required.",
    "Number of deleted lines": 1,
    "Deleted lines": "  jit_->DoneCompiling();\n}\n\nCpuExecutable::~CpuExecutable() {\n  XlaDebugInfoManager::Get()->UnregisterModule(\n      ModuleUniqueName(module_name_, shared_module().get()), shared_module(),\n      buffer_assignment_);\n}\n\nstatic StatusOr<MaybeOwningDeviceMemory> MemoryForAllocation(\n    const BufferAllocation& allocation,\n    absl::Span<ExecutionInput const> arguments,\n    se::DeviceMemoryAllocator* memory_allocator, int device_ordinal) {\n  VLOG(3) << allocation.ToString();\n  if (allocation.is_entry_computation_parameter()) {\n    se::DeviceMemoryBase out = arguments[allocation.parameter_number()]\n                                   .Buffer(allocation.param_shape_index())\n                                   .AsDeviceMemoryBase();\n    CHECK_EQ(allocation.size(), out.size())\n        << \"Size mismatch on param \" << allocation.parameter_number()\n        << \" at shape index \" << allocation.param_shape_index().ToString();\n    VLOG(3) << \"allocation is a parameter\";\n    return MaybeOwningDeviceMemory{out};\n  } else if (allocation.is_constant()) {\n    VLOG(3) << \"allocation is a constant\";\n    return MaybeOwningDeviceMemory{se::DeviceMemoryBase{}};\n  } else if (allocation.is_thread_local()) {\n    VLOG(3) << \"buffer is thread-local\";\n    return MaybeOwningDeviceMemory{se::DeviceMemoryBase{}};\n  }\n\n  int64_t buffer_size = allocation.size();\n  TF_ASSIGN_OR_RETURN(se::OwningDeviceMemory out,\n                      memory_allocator->Allocate(device_ordinal, buffer_size));\n  VLOG(3) << \"buffer allocated \" << buffer_size << \" bytes [\" << out->opaque()\n          << \"]\";\n\n  // Since the output buffer and all the temporary buffers were written into\n  // by the JITed code, msan has no way of knowing their memory was"
},
{
    "Id": 388,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4863013a3ec5b97c042a38ab567bcc4a62ccde5c",
    "Violation": "insufficient",
    "Bug report": " Add checking for number of inputs in GetOptionalInputTensor to avoid indexing out of array bounds.",
    "Number of deleted lines": 1,
    "Deleted lines": "  return node->intermediates->size;\n}\n\ninline int64_t NumElements(const TfLiteIntArray* dims) {\n  int64_t count = 1;\n  for (int i = 0; i < dims->size; ++i) {\n    count *= dims->data[i];\n  }\n  return count;\n}\n\ninline int64_t NumElements(const TfLiteTensor* t) {\n  return NumElements(t->dims);\n}\n\ninline const TfLiteTensor* GetOptionalInputTensor(TfLiteContext* context,\n                                                  const TfLiteNode* node,\n                                                  int index) {\n  const bool use_tensor = node->inputs->data[index] != kTfLiteOptionalTensor;\n  if (use_tensor) {\n    return &context\n                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];\n  }\n  return nullptr;\n}\n\n// Determines whether tensor is constant.\ninline bool IsConstantTensor(const TfLiteTensor* tensor) {\n  return tensor->allocation_type == kTfLiteMmapRo;\n}\n\n// Determines whether tensor is dynamic. Note that a tensor can be non-const and\n// not dynamic. This function specifically checks for a dynamic tensor.\ninline bool IsDynamicTensor(const TfLiteTensor* tensor) {\n  return tensor->allocation_type == kTfLiteDynamic;\n}\n\n// Sets tensor to dynamic.\ninline void SetTensorToDynamic(TfLiteTensor* tensor) {"
},
{
    "Id": 389,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1e38a0025c9a983bf3229299109b5b1781215c7e",
    "Violation": "missing",
    "Bug report": " [XLA] CHECK that sparse indices are in range in MutableLiteralBase::AppendSparseElement. Previously there was no range-checking on sparse elements' indices.",
    "Number of deleted lines": 1,
    "Deleted lines": "\ntemplate <typename NativeT>\nNativeT LiteralBase::GetFirstElement() const {\n  return data<NativeT>().at(0);\n}\n\ntemplate <typename NativeT>\nNativeT LiteralBase::GetSparseElement(int64 sparse_element_number,\n                                      const ShapeIndex& shape_index) const {\n  CHECK(\n      LayoutUtil::IsSparseArray(ShapeUtil::GetSubshape(shape(), shape_index)));\n  return data<NativeT>(shape_index)[sparse_element_number];\n}\n\ntemplate <typename NativeT>\nvoid MutableLiteralBase::AppendSparseElement(\n    absl::Span<const int64> multi_index, NativeT value,\n    const ShapeIndex& shape_index) {\n  // TODO(jlebar): CHECK that multi_index is in range?\n  Piece& p = piece(shape_index);\n  const Shape& subshape = p.subshape();\n  CHECK(LayoutUtil::IsSparseArray(subshape));\n  int64 rank = subshape.rank();\n  CHECK_EQ(multi_index.size(), rank);\n  int64 last_element = p.sparse_indices()->index_count();\n  CHECK_LT(last_element, LayoutUtil::MaxSparseElements(subshape.layout()));\n  p.sparse_indices()->Append(multi_index);\n  CHECK_LT(last_element, p.data<NativeT>().size());\n  p.data<NativeT>()[last_element] = value;\n}\n\ntemplate <typename NativeT>\nvoid LiteralBase::EachCell(\n    std::function<void(absl::Span<const int64> indices, NativeT value)>\n        per_cell) const {\n  if (ShapeUtil::IsZeroElementArray(shape())) {\n    return;\n  }\n  std::vector<int64> indices(shape().rank(), 0);\n  do {\n    per_cell(indices, Get<NativeT>(indices));\n  } while (IndexUtil::BumpIndices(shape(), absl::MakeSpan(indices)));\n}\n"
},
{
    "Id": 390,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1610da3f992487bd9a8181d1e83cae99fe1e34d9",
    "Violation": "missing",
    "Bug report": "add more sanity check on AvgPoolGrad op",
    "Number of deleted lines": 0,
    "Deleted lines": "      this->PoolParamsToDims(&pool_params, &filter_dims, &strides,\n                             &padding_left, &padding_right, is_pool2d);\n\n      memory::dims orig_input_dims_mkl_order =\n          orig_input_mkl_shape.IsMklTensor()\n              ? orig_input_mkl_shape.GetSizesAsMklDnnDims()\n              : is_pool2d ? TFShapeToMklDnnDimsInNCHW(output_shape,\n                                                      this->data_format_tf_)\n                          : TFShapeToMklDnnDimsInNCDHW(output_shape,\n                                                       this->data_format_tf_);\n\n      memory::dims diff_dst_dims =\n          grad_mkl_shape.IsMklTensor()\n              ? grad_mkl_shape.GetSizesAsMklDnnDims()\n              : is_pool2d ? TFShapeToMklDnnDimsInNCHW(grad_tensor.shape(),\n                                                      this->data_format_tf_)\n                          : TFShapeToMklDnnDimsInNCDHW(grad_tensor.shape(),\n                                                       this->data_format_tf_);\n      memory::dims output_dims_mkl_order;\n      this->GetOutputDims(pool_params, &output_dims_mkl_order);\n\n      // get src memory::desc\n      memory::desc src_md =\n          orig_input_mkl_shape.IsMklTensor()\n              ? orig_input_mkl_shape.GetMklLayout()\n              : memory::desc(orig_input_dims_mkl_order, MklDnnType<T>(),\n                             this->data_format_mkldnn_);\n\n      // Get diff_dst memory::desc.\n      memory::desc diff_dst_md =\n          grad_mkl_shape.IsMklTensor()\n              ? grad_mkl_shape.GetMklLayout()\n              : memory::desc(diff_dst_dims, MklDnnType<T>(),\n                             this->data_format_mkldnn_);\n\n      // Pass prop_kind::forward_training to create a forward primitive\n      // that is used in the backward pass.\n      MklPoolingParams bwdParams("
},
{
    "Id": 391,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a68f57a24203fd49c4a5c4a8f51098d4415a93f8",
    "Violation": "missing",
    "Bug report": " [XNNPACK] Add missing return when output channels do not match in TransposeConvolution Add a check that input channels in the filter and tensor match.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n    const int* filter_tensor_dims = filter_tensor.dims->data;\n    const int output_channels = filter_tensor_dims[0];\n    const int kernel_height = filter_tensor_dims[1];\n    const int kernel_width = filter_tensor_dims[2];\n    const int input_channels = filter_tensor_dims[3];\n\n    const int32_t* output_shape = GetTensorData<int32_t>(&output_shape_tensor);\n    const int output_height = output_shape[1];\n    const int output_width = output_shape[2];\n    const int output_tensor_channels = output_shape[3];\n    if (output_channels != output_tensor_channels) {\n      TF_LITE_MAYBE_KERNEL_LOG(\n          logging_context,\n          \"transpose convolution kernel output channel dimension (%d) \"\n          \"doesn't match output shape channel dimension (%d) in node #%d: \"\n          \"4 dimensions expected\",\n          output_channels, output_tensor_channels, node_index);\n    }\n\n    int padding_top = 0;\n    int padding_bottom = 0;\n    int padding_left = 0;\n    int padding_right = 0;\n    int adjustment_height = 0;\n    int adjustment_width = 0;\n    TF_LITE_ENSURE_STATUS(CalculateTransposeConvPaddings(\n        logging_context, deconv_params->padding, input_height, input_width,\n        kernel_height, kernel_width, /*dilation_height=*/1,\n        /*dilation_width=*/1, deconv_params->stride_height,\n        deconv_params->stride_width, node_index, output_height, output_width,\n        &padding_top, &padding_bottom, &padding_left, &padding_right,\n        &adjustment_height, &adjustment_width));\n\n    if (subgraph != nullptr) {\n      const xnn_status status = xnn_define_deconvolution_2d(\n          subgraph,\n          /*padding_top=*/padding_top,"
},
{
    "Id": 392,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8",
    "Violation": "missing",
    "Bug report": "Add missing validation to sparse dense cwise ops.",
    "Number of deleted lines": 0,
    "Deleted lines": "    OP_REQUIRES_OK(ctx, ctx->input(\"sp_indices\", &indices_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"sp_values\", &values_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"sp_shape\", &shape_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"dense\", &dense_t));\n\n    // Validations.\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices_t->shape()),\n                errors::InvalidArgument(\n                    \"Input sp_indices should be a matrix but received shape: \",\n                    indices_t->shape().DebugString()));\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(values_t->shape()) &&\n                    TensorShapeUtils::IsVector(shape_t->shape()),\n                errors::InvalidArgument(\n                    \"Inputs sp_values and sp_shape should be vectors \"\n                    \"but received shapes: \",\n                    values_t->shape().DebugString(), \" and \",\n                    shape_t->shape().DebugString()));\n    OP_REQUIRES(\n        ctx, values_t->dim_size(0) == indices_t->dim_size(0),\n        errors::InvalidArgument(\n            \"The first dimension of values and indices should match. (\",\n            values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\n\n    const auto indices_mat = indices_t->matrix<int64_t>();\n    const auto shape_vec = shape_t->vec<int64_t>();\n    const auto lhs_dims = BCast::FromShape(TensorShape(shape_vec));\n    const auto rhs_dims = BCast::FromShape(dense_t->shape());\n    BCast b(lhs_dims, rhs_dims, false);  // false for keeping the same num dims.\n\n    // True iff (size(lhs) >= size(rhs)) and all dims in lhs is greater or equal\n    // to dims in rhs (from right to left).\n    auto VecGreaterEq = [](ArraySlice<int64_t> lhs, ArraySlice<int64_t> rhs) {\n      if (lhs.size() < rhs.size()) return false;\n      for (size_t i = 0; i < rhs.size(); ++i) {\n        if (lhs[lhs.size() - 1 - i] < rhs[rhs.size() - 1 - i]) return false;\n      }\n      return true;\n    };\n    OP_REQUIRES(ctx, VecGreaterEq(lhs_dims, rhs_dims) && b.IsValid(),\n                errors::InvalidArgument(\n                    \"SparseDenseBinaryOpShared broadcasts dense to sparse \"\n                    \"only; got incompatible shapes: [\","
},
{
    "Id": 393,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b51b82fe65ebace4475e3c54eb089c18a4403f1c",
    "Violation": "missing",
    "Bug report": " Add missing validation to AddManySparseToTensorsMap. Sparse tensors have a set of requirements for the 3 components and not all of them were checked.",
    "Number of deleted lines": 2,
    "Deleted lines": "  explicit AddManySparseToTensorsMapOp(OpKernelConstruction* context)\n      : SparseTensorAccessingOp(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor* input_indices;\n    const Tensor* input_values;\n    const Tensor* input_shape;\n    SparseTensorsMap* map;\n\n    OP_REQUIRES_OK(context, context->input(\"sparse_indices\", &input_indices));\n    OP_REQUIRES_OK(context, context->input(\"sparse_values\", &input_values));\n    OP_REQUIRES_OK(context, context->input(\"sparse_shape\", &input_shape));\n    OP_REQUIRES_OK(context, GetMap(context, true /* is_writing */, &map));\n\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices->shape()),\n                errors::InvalidArgument(\n                    \"Input indices should be a matrix but received shape \",\n                    input_indices->shape().DebugString()));\n\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_values->shape()),\n                errors::InvalidArgument(\n                    \"Input values should be a vector but received shape \",\n                    input_values->shape().DebugString()));\n\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape->shape()),\n                errors::InvalidArgument(\n                    \"Input shape should be a vector but received shape \",\n                    input_shape->shape().DebugString()));\n\n    int rank = input_shape->NumElements();\n\n    OP_REQUIRES(\n        context, rank > 1,\n        errors::InvalidArgument(\n            \"Rank of input SparseTensor should be > 1, but saw rank: \", rank));\n\n    auto input_shape_vec = input_shape->vec<int64_t>();\n    int new_num_elements = 1;\n    bool overflow_ocurred = false;\n    for (int i = 0; i < input_shape_vec.size(); i++) {\n      new_num_elements =\n          MultiplyWithoutOverflow(new_num_elements, input_shape_vec(i));\n      if (new_num_elements < 0) {\n        overflow_ocurred = true;\n        break;\n      }\n    }\n"
},
{
    "Id": 394,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/23968a8bf65b009120c43b5ebcceaf52dbc9e943",
    "Violation": "missing",
    "Bug report": " Fix out of bound access in DequantizeOp by adding check for axis < input dimension",
    "Number of deleted lines": 0,
    "Deleted lines": "    }\n\n    if (mode_string == \"MIN_COMBINED\") {\n      mode_ = QUANTIZE_MODE_MIN_COMBINED;\n    } else if (mode_string == \"MIN_FIRST\") {\n      mode_ = QUANTIZE_MODE_MIN_FIRST;\n    } else if (mode_string == \"SCALED\") {\n      mode_ = QUANTIZE_MODE_SCALED;\n    }\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"narrow_range\", &narrow_range_));\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"axis\", &axis_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& input = ctx->input(0);\n    const Tensor& input_min_tensor = ctx->input(1);\n    const Tensor& input_max_tensor = ctx->input(2);\n\n    int num_slices = 1;\n    if (axis_ > -1) {\n      num_slices = input.dim_size(axis_);\n    }\n    OP_REQUIRES(ctx, input_min_tensor.NumElements() == num_slices,\n                errors::InvalidArgument(\n                    \"input_min_tensor must have as many elements as input on \"\n                    \"the dequantization axis (\",\n                    axis_, \"), got \", input_min_tensor.NumElements(),\n                    \", expected \", num_slices));\n    OP_REQUIRES(ctx, input_max_tensor.NumElements() == num_slices,\n                errors::InvalidArgument(\n                    \"input_max_tensor must have as many elements as input on \"\n                    \"the dequantization axis (\",\n                    axis_, \"), got \", input_max_tensor.NumElements(),\n                    \", expected \", num_slices));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));\n    Tensor float_output ="
},
{
    "Id": 395,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4923de56ec94fff7770df259ab7f2288a74feb41",
    "Violation": "missing",
    "Bug report": " Don't do any work when reshaping 0 elements sparse tensor. If reshaping to 0 elements tensor, check that input has no elements. If reshaping no elements input, check that output has no elements.",
    "Number of deleted lines": 0,
    "Deleted lines": "    return;\n  }\n\n  Tensor *result_shape = nullptr;\n  OP_REQUIRES_OK(context, context->allocate_output(output_shape_idx,\n                                                   TensorShape({output_rank}),\n                                                   &result_shape));\n  auto output_shape_vec = result_shape->vec<int64>();\n  for (int j = 0; j < output_shape.dims(); ++j) {\n    output_shape_vec(j) = output_shape.dim_size(j);\n  }\n\n  Tensor *result_indices = nullptr;\n  OP_REQUIRES_OK(context,\n                 context->allocate_output(output_indices_idx,\n                                          TensorShape({nnz, output_rank}),\n                                          &result_indices));\n  if (nnz > 0) {\n    OP_REQUIRES_OK(context, functor::ReshapeSparseTensorFunctor<Device>()(\n                                context, input_shape, output_shape,\n                                input_indices_in.matrix<int64>(),\n                                result_indices->matrix<int64>()));\n  }\n}\n\n#define EXPLICITLY_INSTANTIATE_FUNCTION(Device)                    \\\n  template void ReshapeSparseTensor<Device>(                       \\\n      OpKernelContext * context, const Tensor &input_indices_in,   \\\n      const Tensor &input_shape_in, const Tensor &target_shape_in, \\\n      int output_indices_idx, int output_shape_idx)\nEXPLICITLY_INSTANTIATE_FUNCTION(CPUDevice);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nEXPLICITLY_INSTANTIATE_FUNCTION(GPUDevice);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#undef EXPLICITLY_INSTANTIATE_FUNCTION\n\n}  // namespace tensorflow"
},
{
    "Id": 396,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/467730fe90282a75f15f67d701b278e86cfad65e",
    "Violation": "missing",
    "Bug report": "Fix dimension check for tf.keras.losses.BinaryCrossentropy. The reason was that broadcasting was applied directly. This fix adds dimension check to throw an error if there is a mismatch.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n@keras_export('keras.backend.binary_crossentropy')\ndef binary_crossentropy(target, output, from_logits=False):\n  \"\"\"Binary crossentropy between an output tensor and a target tensor.\n\n  Arguments:\n      target: A tensor with the same shape as `output`.\n      output: A tensor.\n      from_logits: Whether `output` is expected to be a logits tensor.\n          By default, we consider that `output`\n          encodes a probability distribution.\n\n  Returns:\n      A tensor.\n  \"\"\"\n  if not from_logits:\n    if (isinstance(output, (ops.EagerTensor, variables_module.Variable)) or\n        output.op.type != 'Sigmoid'):\n      epsilon_ = _constant_to_tensor(epsilon(), output.dtype.base_dtype)\n      output = clip_ops.clip_by_value(output, epsilon_, 1. - epsilon_)\n\n      # Compute cross entropy from probabilities.\n      bce = target * math_ops.log(output + epsilon())\n      bce += (1 - target) * math_ops.log(1 - output + epsilon())\n      return -bce\n    else:\n      # When sigmoid activation function is used for output operation, we\n      # use logits from the sigmoid function directly to compute loss in order\n      # to prevent collapsing zero when training.\n      assert len(output.op.inputs) == 1\n      output = output.op.inputs[0]\n  return nn.sigmoid_cross_entropy_with_logits(labels=target, logits=output)\n\n\n@keras_export('keras.backend.sigmoid')\ndef sigmoid(x):\n  \"\"\"Element-wise sigmoid.\n"
},
{
    "Id": 397,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/7e2d53c1c371f38c7f0ef13c1c06336b22a195c0",
    "Violation": "missing",
    "Bug report": "[tf.data] Adds the expected check for better debugging.",
    "Number of deleted lines": 0,
    "Deleted lines": "        TF_RETURN_IF_ERROR(\n            input_impl_->GetNext(ctx, &next_element, end_of_sequence));\n        if (*end_of_sequence) {\n          return Status::OK();\n        }\n\n        std::vector<Tensor> args;\n        args.reserve(state_.size() + next_element.size());\n        std::copy(state_.begin(), state_.end(), std::back_inserter(args));\n        std::copy(next_element.begin(), next_element.end(),\n                  std::back_inserter(args));\n\n        std::vector<Tensor> state_and_output;\n        state_and_output.reserve(dataset()->state_types_.size() +\n                                 output_dtypes().size());\n\n        Status s = instantiated_captured_func_->Run(ctx, std::move(args),\n                                                    &state_and_output);\n        if (s.ok()) {\n          state_.clear();\n          size_t i = 0;\n          for (; i < dataset()->state_types_.size(); ++i) {\n            if (state_and_output[i].dtype() != dataset()->state_types_[i]) {\n              return errors::InvalidArgument(\n                  \"Got wrong type for scan_func return value \", i,\n                  \" (expected \", DataTypeString(dataset()->state_types_[i]),\n                  \", got \", DataTypeString(state_and_output[i].dtype()), \").\");\n            }\n            state_.push_back(std::move(state_and_output[i]));\n          }\n          for (; i < state_and_output.size(); ++i) {\n            const size_t output_index = i - dataset()->state_types_.size();\n            if (state_and_output[i].dtype() != output_dtypes()[output_index]) {\n              return errors::InvalidArgument(\n                  \"Got wrong type for scan_func return value \", i,\n                  \" (expected \",\n                  DataTypeString(dataset()->state_types_[output_index]),\n                  \", got \", DataTypeString(state_and_output[i].dtype()), \").\");"
},
{
    "Id": 398,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/a12b8c4afdca3ac2945d62b3b83ca2599ab360f9",
    "Violation": "insufficient",
    "Bug report": " [xla] Improve validation of Broadcast shape. If one misreads the semantics of this instruction, it's easy to cause an out of bounds access into the dimensions here. Add an extra check to return a proper error to the user rather than crashing in that case.",
    "Number of deleted lines": 2,
    "Deleted lines": "}\n\nStatus ShapeVerifier::HandleBitcast(HloInstruction* bitcast) {\n  return Status::OK();\n}\n\nStatus ShapeVerifier::HandleBroadcast(HloInstruction* broadcast) {\n  // HLO broadcast has no exact analog at the proto level so there is no\n  // ShapeInference method. Check the output shape explicitly.\n  const Shape& operand_shape = broadcast->operand(0)->shape();\n  // Check for mixed precision.\n  TF_RETURN_IF_ERROR(CheckShape(broadcast, broadcast->shape()));\n  TF_RET_CHECK(ShapeUtil::Rank(operand_shape) ==\n               broadcast->dimensions().size());\n  for (int64 operand_dimension = 0;\n       operand_dimension < ShapeUtil::Rank(operand_shape);\n       ++operand_dimension) {\n    int64 output_dimension = broadcast->dimensions()[operand_dimension];\n    TF_RET_CHECK(broadcast->shape().dimensions(output_dimension) ==\n                 operand_shape.dimensions(operand_dimension))\n        << broadcast->ToString() << \" operand shape \" << operand_shape;\n  }\n  return Status::OK();\n}\n\nStatus ShapeVerifier::HandleReshape(HloInstruction* reshape) {\n  // Check for mixed precision.\n  TF_RETURN_IF_ERROR(CheckShape(reshape, reshape->shape()));\n  TF_RET_CHECK(ShapeUtil::ElementsIn(reshape->shape()) ==\n               ShapeUtil::ElementsIn(reshape->operand(0)->shape()));\n  return Status::OK();\n}\n\nStatus ShapeVerifier::HandleTranspose(HloInstruction* transpose) {\n  return CheckShape(\n      transpose, ShapeInference::InferTransposeShape(\n                     transpose->operand(0)->shape(), transpose->dimensions()));\n}\n\nStatus ShapeVerifier::HandleParameter(HloInstruction* hlo) {"
},
{
    "Id": 399,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/32dc203f55a7462ddf780c68d619af574daedd46",
    "Violation": "insufficient",
    "Bug report": "Improve gradient shape validation errors.",
    "Number of deleted lines": 2,
    "Deleted lines": "                # functions.\n                in_grads = _MaybeCompile(\n                    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\n              else:\n                # For function call ops, we add a 'SymbolicGradient'\n                # node to the graph to compute gradients.\n                in_grads = _MaybeCompile(\n                    grad_scope, op, func_call, lambda: _SymGrad(op, out_grads))\n              in_grads = _AsList(in_grads)\n              _VerifyGeneratedGradients(in_grads, op)\n              if gate_gradients and len(\n                  [x for x in in_grads if x is not None]) > 1:\n                in_grads = control_flow_ops.tuple(in_grads)\n          _LogOpGradients(op, out_grads, in_grads)\n        else:\n          # If no grad_fn is defined or none of out_grads is available,\n          # just propagate a list of None backwards.\n          in_grads = [None] * len(op.inputs)\n        for t_in, in_grad in zip(op.inputs, in_grads):\n          if in_grad is not None:\n            if (isinstance(in_grad, ops.Tensor) and\n                t_in.dtype != dtypes.resource):\n              in_grad.set_shape(t_in.get_shape())\n            _SetGrad(grads, t_in, in_grad)\n        if loop_state:\n          loop_state.ExitGradWhileContext(op, before=False)\n\n      # Update pending count for the inputs of op and enqueue ready ops.\n      _UpdatePendingAndEnqueueReady(grads, op, queue, pending_count, loop_state)\n\n  if loop_state:\n    loop_state.PostProcessing()\n  return [_GetGrad(grads, x) for x in xs]\n\n\ndef _HasAnyNotNoneGrads(grads, op):\n  \"\"\"Return true iff op has real gradient.\"\"\"\n  out_grads = _GetGrads(grads, op)\n  for out_grad in out_grads:\n    if isinstance(out_grad, (ops.Tensor, ops.IndexedSlices)):\n      return True\n    if out_grad and isinstance(out_grad, collections.Sequence):\n      if any([g is not None for g in out_grad]):"
},
{
    "Id": 400,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/25821f0d91623d654bb1bdd62423e644bae9f7f8",
    "Violation": "improper",
    "Bug report": "TensorFlow: Fix OP_REQUIRES check for depthwise pooling.",
    "Number of deleted lines": 2,
    "Deleted lines": "                    \"Pooling is not yet supported on the batch dimension.\"));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    PoolParameters params{context,  ksize_,      stride_,\n                          padding_, FORMAT_NHWC, tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(\n                                0, params.forward_output_shape(), &output));\n\n    if (params.depth_window > 1) {\n      // Validate spec against the current implementation.  A\n      // relaxation of these requirements would be ideal.\n      OP_REQUIRES(context, params.out_depth % params.depth_window > 0,\n                  errors::Unimplemented(\n                      \"Depthwise max pooling requires \"\n                      \"the depth window to evenly divide the input depth.\"));\n      OP_REQUIRES(\n          context, params.out_depth == params.depth_stride,\n          errors::Unimplemented(\"Depthwise max pooling requires \"\n                                \"the depth window to equal the depth stride.\"));\n\n      DepthwiseMaxPool(context, output, tensor_in, params);\n    } else {\n      SpatialMaxPool(context, output, tensor_in, params, padding_);\n    }\n  }\n\n private:\n  // Single-threaded implementation of DepthwiseMaxPool which\n  // does not handle all of the same options as SpatialMaxPool\n  // (strict assumptions on no padding, stride).\n  //\n  // TODO(vrv): implement a more general depthwise-max pool that works\n  // on GPU as well.\n  void DepthwiseMaxPool(OpKernelContext* context, Tensor* output,\n                        const Tensor& tensor_in, const PoolParameters& params) {\n    Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n        in_by_pool(tensor_in.flat<T>().data(), params.depth_window,"
},
{
    "Id": 401,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/05ec322172958f6e67e4bcaef4681e6aa54fabeb",
    "Violation": "missing",
    "Bug report": " Return error message with illegal input rather than check-failing in op_kernel.",
    "Number of deleted lines": 0,
    "Deleted lines": "              static_cast<GPUDeviceContext*>(ctx->op_device_context());\n          gpu_device_context->stream()->ThenWaitFor(\n              gpu_device_context->host_to_device_stream());\n        }\n      } else {\n        // No copy required.\n        ctx->set_output(i, const_tensor);\n        output_tensor = ctx->mutable_output(i);\n      }\n      if (XlaTensor* xla_tensor = XlaTensor::FromTensor(output_tensor)) {\n        xla_tensor->set_host_tensor(const_tensor);\n      }\n    } else {\n      const TensorShape& shape = kernel->outputs[i].shape;\n      const DataType& type = kernel->outputs[i].type;\n      VLOG(2) << \"Retval \" << i << \" shape \" << shape.DebugString() << \" type \"\n              << DataTypeString(type);\n      if (type == DT_RESOURCE) {\n        ctx->set_output(i, ctx->input(kernel->outputs[i].input_index));\n      } else {\n        se::DeviceMemoryBase buffer = output.buffer({output_num});\n        if (allocate_xla_tensors_) {\n          Tensor* output_tensor;\n          TF_RETURN_IF_ERROR(ctx->allocate_output(i, shape, &output_tensor));\n          XlaTensor* xla_tensor = XlaTensor::FromTensor(output_tensor);\n          if (xla_tensor) {\n            xla_tensor->set_shaped_buffer(ScopedShapedBuffer(\n                ExtractSubShapedBuffer(&output, output_num, xla_allocator_)));\n            if (use_multiple_streams_) {\n              xla_tensor->SetDefinedOn(stream, definition_event);\n            }\n          } else {\n            // xla_tensor wasn't valid, which must mean this is a zero-element\n            // tensor.\n            CHECK_EQ(output_tensor->TotalBytes(), 0);\n          }\n        } else {\n          Tensor output_tensor = XlaTensorBuffer::MakeTensor("
},
{
    "Id": 402,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/62cb54f2caf48480dc6b3c1ce9629eaac4688f83",
    "Violation": "missing",
    "Bug report": " Set 2nd output shape for SparseSegmentReduceGradV2 Fixes a debug check failure.",
    "Number of deleted lines": 0,
    "Deleted lines": "  const Tensor* dim0 = outputs_unique_indices ? nullptr : c->input_tensor(3);\n  ShapeHandle dim0_shape;\n  if (dim0 == nullptr) {\n    // We don't have the value at inference time, so the output\n    // shape is unknown.\n    dim0_shape = c->Vector(InferenceContext::kUnknownDim);\n  } else {\n    auto dim0_value = dim0->scalar<int32>()();\n    if (dim0_value < 0) {\n      return errors::InvalidArgument(\n          \"Cannot specify a negative value for output_dim0\");\n    }\n    dim0_shape = c->Vector(dim0_value);\n  }\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(c->Concatenate(dim0_shape, subshape, &out));\n  c->set_output(0, out);\n  return OkStatus();\n}\n\nStatus SparseSegmentReductionGradShapeFn(InferenceContext* c) {\n  return SparseSegmentReductionGradShapeFnImpl(\n      c,\n      /*outputs_unique_indices=*/false);\n}\n\nStatus SparseSegmentReductionGradV2ShapeFn(InferenceContext* c) {\n  return SparseSegmentReductionGradShapeFnImpl(c,\n                                               /*outputs_unique_indices=*/true);\n}\n\nStatus SparseSegmentReductionWithNumSegmentsShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));"
},
{
    "Id": 403,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9b0f99ddd27e7738732a154be5469391ee8fc977",
    "Violation": "missing",
    "Bug report": "Add check to ensure element sizes are the same",
    "Number of deleted lines": 1,
    "Deleted lines": "        params.output_offset +\n        MultiplyByQuantizedMultiplierSmallerThanOneExp(\n            unscaled_quotient, params.output_multiplier, total_shift);\n    const int32 clamped_output =\n        std::min(params.quantized_activation_max,\n                 std::max(params.quantized_activation_min, unclamped_result));\n    output_data[SubscriptToIndex(output_desc, indexes)] =\n        static_cast<uint8>(clamped_output);\n  };\n  NDOpsHelper<N>(output_desc, div_func);\n}\n\ntemplate <typename T>\ninline void SubWithActivation(\n    const ArithmeticParams& params, const RuntimeShape& input1_shape,\n    const T* input1_data, const RuntimeShape& input2_shape,\n    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {\n  ruy::profiler::ScopeLabel label(\"SubWithActivation_optimized\");\n\n  auto input1_map = MapAsVector(input1_data, input1_shape);\n  auto input2_map = MapAsVector(input2_data, input2_shape);\n  auto output_map = MapAsVector(output_data, output_shape);\n  T activation_min, activation_max;\n  GetActivationParams(params, &activation_min, &activation_max);\n  output_map.array() = (input1_map.array() - input2_map.array())\n                           .cwiseMin(activation_max)\n                           .cwiseMax(activation_min);\n}\n\ninline void SubNonBroadcast(const ArithmeticParams& params,\n                            const RuntimeShape& input1_shape,\n                            const float* input1_data,\n                            const RuntimeShape& input2_shape,\n                            const float* input2_data,\n                            const RuntimeShape& output_shape,\n                            float* output_data) {\n  ruy::profiler::ScopeLabel label(\"SubNonBroadcast\");\n  SubWithActivation<float>(params, input1_shape, input1_data, input2_shape,\n                           input2_data, output_shape, output_data);"
},
{
    "Id": 404,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f8ec0f101bac066faa2e917ac714ca9eea310eac",
    "Violation": "missing",
    "Bug report": "adding checks that pad fusion works only Conv2D",
    "Number of deleted lines": 1,
    "Deleted lines": "          dst_dims_tf_order[0] == 0) {\n        MklDnnShape dst_mkl_shape;\n        dst_mkl_shape.SetMklTensor(false);\n        AllocateOutputSetMklShape(context, kOutputIndex_Dst,\n                    &dst_tensor, src_tf_shape, dst_mkl_shape);\n\n        // MklConv2D/3D also outputs converted filter\n        // as 2nd output of Conv2D/3D.\n        filter_mkl_shape.SetMklTensor(false);\n        Tensor* output_filter_tensor = nullptr;\n        AllocateOutputSetMklShape(context, kOutputIndex_Filter,\n                                  &output_filter_tensor,\n                                  filter_tf_shape, filter_mkl_shape);\n        return;\n      }\n\n      bool isConv2D = (strides_.size() == 4);\n      // TODO(Intel-tf) Add check to make sure padEnabled is true only for 2D\n\n      // Create memory for user data.\n      // Describe how the inputs and outputs of Convolution look like. Also\n      // specify buffers containing actual input and output data.\n      auto tf_fmt = isConv2D ? TFDataFormatToMklDnnDataFormat(data_format_)\n                             : TFDataFormatToMklDnn3DDataFormat(data_format_);\n\n      // If input is in MKL layout, then simply grab input layout; otherwise,\n      // construct input Tf layout. For TF layout, although input shape\n      // (src_dims) required is in MKL-DNN order, the layout is Tensorflow's\n      // layout depending on data format:\n      //     Conv2D: NHWC or NCHW\n      //     Conv3D: NDHWC or NCDHW\n      auto src_md = src_mkl_shape.IsMklTensor()\n                        ? src_mkl_shape.GetMklLayout()\n                        : memory::desc(src_dims, MklDnnType<T>(), tf_fmt);\n\n      // Although filter shape (filter_dims) required is in MKL-DNN order,\n      // the layout is Tensorflow's layout (HWIO).\n      auto filter_md = filter_mkl_shape.IsMklTensor()  // Should NEVER be true\n                           ? filter_mkl_shape.GetMklLayout()"
},
{
    "Id": 405,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9718fed7b9aba244359b3d38c2a1dc20e50428bd",
    "Violation": "missing",
    "Bug report": " Added size check to avoid memory corruption in GraphDefImporter::ConvertNodeDef.",
    "Number of deleted lines": 0,
    "Deleted lines": "    TF_ASSIGN_OR_RETURN(Attribute attr,\n                        ConvertAttributeValue(name_attr.second, b_));\n    state.addAttribute(name_attr.first, attr);\n  }\n\n  // Add missing default attributes.\n  for (const auto &attr_def : op_def->attr()) {\n    if (attr_def.has_default_value() &&\n        !state.attributes.get(attr_def.name())) {\n      TF_ASSIGN_OR_RETURN(Attribute attr,\n                          ConvertAttributeValue(attr_def.default_value(), b_));\n      state.addAttribute(attr_def.name(), attr);\n    }\n  }\n\n  // Get the result types. Ops can have multiple named results. Track the\n  // segment sizes.\n  SmallVector<std::pair<unsigned, unsigned>> result_segments;\n  result_segments.reserve(op_def->output_arg_size());\n  state.types.reserve(op_def->output_arg_size() + 1);\n  for (const OpDef::ArgDef &def : op_def->output_arg()) {\n    unsigned index = state.types.size();\n    TF_ASSIGN_OR_RETURN(unsigned size,\n                        ArgNumType(state.attributes, def, state.types));\n    result_segments.emplace_back(index, size);\n  }\n  state.types.push_back(dialect_->getControlType());\n\n  // Collect the operands. Set backedges to a placeholder and resolve them\n  // later.\n  state.operands.reserve(node.input_size());\n  SmallVector<Value> control_operands;\n  struct BackedgeResolution {\n    ResultInfo *info;\n    size_t operand_index;\n    ResultId id;\n  };\n  SmallVector<BackedgeResolution> unresolved_data_operands,"
},
{
    "Id": 406,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/edd9fb416e04b8ca4398c4eea65f14dc6704a44a",
    "Violation": "unnecessary",
    "Bug report": " TfLiteTensorCopy returns an error status when src and dest bytes are not equal. So we don't need to check them specifically if we ensure the status of the call to copy (which we should do anyways).",
    "Number of deleted lines": 2,
    "Deleted lines": "// to `dst_tensor_indices` in `dst_subgraph`.\ntemplate <typename SrcVector, typename DstVector>\nTfLiteStatus CopyTensorsData(TfLiteContext* context, Subgraph* src_subgraph,\n                             const SrcVector& src_tensor_indices,\n                             Subgraph* dst_subgraph,\n                             const DstVector& dst_tensor_indices) {\n  TF_LITE_ENSURE_EQ(context, src_tensor_indices.size(),\n                    dst_tensor_indices.size());\n  for (int i = 0; i < src_tensor_indices.size(); ++i) {\n    // Skip copying unused destination tensors.\n    if (dst_tensor_indices[i] == kTfLiteOptionalTensor) continue;\n\n    const TfLiteTensor* src_tensor =\n        src_subgraph->tensor(src_tensor_indices[i]);\n    TfLiteTensor* dst_tensor = dst_subgraph->tensor(dst_tensor_indices[i]);\n    if (IsDynamicTensor(dst_tensor)) {\n      TfLiteTensorRealloc(src_tensor->bytes, dst_tensor);\n    }\n    TF_LITE_ENSURE_EQ(context, src_tensor->bytes, dst_tensor->bytes);\n    TfLiteTensorCopy(src_tensor, dst_tensor);\n  }\n  return kTfLiteOk;\n}\n\n// Propagate tensor shapes and types from `src_tensor_indices` in `src_subgraph`\n// to `dst_tensor_indices` in `dst_subgraph` and copy data deeply.\ntemplate <typename SrcVector, typename DstVector>\nTfLiteStatus DeepCopyTensorsShapeTypeData(TfLiteContext* context,\n                                          TfLiteNode* node,\n                                          Subgraph* src_subgraph,\n                                          const SrcVector& src_tensor_indices,\n                                          Subgraph* dst_subgraph,\n                                          const DstVector& dst_tensor_indices) {\n  const OpData* op_data = reinterpret_cast<OpData*>(node->user_data);\n\n  if (op_data->body_has_dynamic_output_tensors) {\n    Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);\n    bool resize_subgraph_inputs = (dst_subgraph != this_subgraph);\n    TF_LITE_ENSURE_OK(\n        context, CopyTensorsShapeAndType("
},
{
    "Id": 407,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8a2e7deb21f02e4072d6b62cf7f447b9264afe01",
    "Violation": "improper",
    "Bug report": " Adjust checks for type(Tensor) to isinstance or is_eager/is_symbolic_tensor.",
    "Number of deleted lines": 1,
    "Deleted lines": "  \"\"\"Helper method to recursively apply a function to structure of tensors.\n\n  The structure of the tensors should take the form similar to fetches in\n  `tf.compat.v1.Session` and includes single `Tensor`, `list`, nested `list`,\n  `tuple`,\n  `namedtuple`, or `dict`.\n\n  Args:\n    tensors: Single `Tensor`, `list`, nested `list, `tuple`, `namedtuple`, or\n      `dict`.\n    apply_fn: Function to apply to each `Tensor` and should return a `Tensor`.\n\n  Returns:\n    Returns the modified tensors with the same structure.\n  Raises:\n    `TypeError` if undefined type in the tensors structure.\n  \"\"\"\n  tensors_type = type(tensors)\n  if tensors_type is ops.Tensor:\n    return apply_fn(tensors)\n  elif isinstance(tensors, variables.Variable):\n    return apply_fn(tensors.value())\n  elif isinstance(tensors, (list, tuple)):\n    tensors = [_recursive_apply(t, apply_fn) for t in tensors]\n    if tensors_type is list:\n      return list(tensors)\n    elif tensors_type is tuple:\n      return tuple(tensors)\n    return tensors_type(*tensors)  # collections.namedtuple\n  elif tensors_type is dict:\n    return dict((k, _recursive_apply(v, apply_fn)) for k, v in tensors.items())\n  else:\n    raise TypeError(f'_recursive_apply argument {tensors!r} has invalid type '\n                    f'{tensors_type!r}')\n\n\nclass _ControlOutputCache(object):\n  \"\"\"Helper class to manage calculating and caching control_outputs in graph.\"\"\"\n"
},
{
    "Id": 408,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b68b869e75916e6de37c2ca23a93643faf333011",
    "Violation": "improper",
    "Bug report": "Fix invalid keras tensor isinstance check",
    "Number of deleted lines": 1,
    "Deleted lines": "      if input_shape is not None:\n        batch_input_shape = (batch_size,) + tuple(input_shape)\n      else:\n        batch_input_shape = None\n      graph = backend.get_graph()\n      with graph.as_default():\n        input_tensor = backend.placeholder(\n            shape=batch_input_shape,\n            dtype=dtype,\n            name=self.name,\n            sparse=sparse,\n            ragged=ragged)\n\n      self.is_placeholder = True\n      self._batch_input_shape = batch_input_shape\n    else:\n      raise_eager_tensor_error = False\n      if keras_tensor.keras_tensors_enabled():\n        if not isinstance(input_tensor, keras_tensor.keras_tensors_enabled()):\n          raise_eager_tensor_error = True\n      else:\n        if not tf_utils.is_symbolic_tensor(input_tensor):\n          raise_eager_tensor_error = True\n      if raise_eager_tensor_error:\n        raise ValueError('You should not pass an EagerTensor to `Input`. '\n                         'For example, instead of creating an '\n                         'InputLayer, you should instantiate your model and '\n                         'directly call it on your input.')\n      self.is_placeholder = False\n      try:\n        self._batch_input_shape = tuple(input_tensor.shape.as_list())\n      except ValueError:\n        # If the shape cannot be represented as a tuple (e.g. unknown rank)\n        self._batch_input_shape = None\n    # Create an input node.\n    input_tensor._keras_mask = None\n    node_module.Node(layer=self, outputs=input_tensor)\n\n    # Store type spec"
},
{
    "Id": 409,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/040aaf39aebda57921991d05d29be5123e908d7c",
    "Violation": "missing",
    "Bug report": "Don't check that bool arrays are quantized.",
    "Number of deleted lines": 4,
    "Deleted lines": "  std::vector<int> out_shape = output_array.shape().dims();\n\n  // If the reshape changes the number of dimensions so it cannot be interpreted\n  // as a transpose.\n  if (!allow_extra_unary_dims && in_shape.size() != out_shape.size()) {\n    return false;\n  }\n\n  in_shape.erase(std::remove(in_shape.begin(), in_shape.end(), 1),\n                 in_shape.end());\n  out_shape.erase(std::remove(out_shape.begin(), out_shape.end(), 1),\n                  out_shape.end());\n  return in_shape == out_shape;\n}\n\nvoid CheckFinalDataTypesSatisfied(const Model& model) {\n  for (const auto& array_entry : model.GetArrayMap()) {\n    const auto& array = *array_entry.second;\n    // If the final data type is int16, the data type may be float, for example\n    // after dequantization.\n    if (array.final_data_type != ArrayDataType::kNone &&\n        array.final_data_type != ArrayDataType::kInt16) {\n      CHECK(array.final_data_type == array.data_type)\n          << \"Array \\\"\" << array_entry.first\n          << \"\\\" has mis-matching actual and final data types (\"\n          << ArrayDataTypeName(array.data_type) << \",\"\n          << ArrayDataTypeName(array.final_data_type) << \").\";\n    }\n  }\n}\n\nArrayDataType ConvertIODataTypeToArrayDataType(IODataType type) {\n  switch (type) {\n    case FLOAT:\n      return ArrayDataType::kFloat;\n    case QUANTIZED_UINT8:\n      return ArrayDataType::kUint8;\n    case QUANTIZED_INT16:\n      return ArrayDataType::kInt16;\n    case INT32:\n      return ArrayDataType::kInt32;\n    case INT64:\n      return ArrayDataType::kInt64;\n    case BOOL:\n      return ArrayDataType::kBool;\n    default:\n      return ArrayDataType::kNone;"
},
{
    "Id": 410,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9a0de0ca6a39f3037e1be6ec740829863bcda3e8",
    "Violation": "improper",
    "Bug report": "[XLA:GPU] Fix type check in IsMatrixMultiplication",
    "Number of deleted lines": 1,
    "Deleted lines": "\n}  // namespace\n\nbool IsMatrixMultiplication(const HloInstruction& dot) {\n  if (dot.opcode() != HloOpcode::kDot) {\n    return false;\n  }\n  const Shape& lhs_shape = dot.operand(0)->shape();\n  const Shape& rhs_shape = dot.operand(1)->shape();\n  const DotDimensionNumbers& dim_numbers = dot.dot_dimension_numbers();\n\n  PrimitiveType output_primitive_type = dot.shape().element_type();\n  bool type_is_allowed =\n      (output_primitive_type == F8E4M3FN || output_primitive_type == F8E5M2 ||\n       output_primitive_type == F16 || output_primitive_type == BF16 ||\n       output_primitive_type == F32 || output_primitive_type == F64 ||\n       output_primitive_type == C64 || output_primitive_type == C128) ||\n      (output_primitive_type == S32 && lhs_shape.element_type() == S8 &&\n       lhs_shape.element_type() == S8);\n  bool shapes_are_valid =\n      type_is_allowed &&\n      IsRank2(lhs_shape, dim_numbers.lhs_batch_dimensions_size()) &&\n      IsRank2(rhs_shape, dim_numbers.lhs_batch_dimensions_size()) &&\n      IsRank2(dot.shape(), dim_numbers.lhs_batch_dimensions_size()) &&\n      !ShapeUtil::IsZeroElementArray(lhs_shape) &&\n      !ShapeUtil::IsZeroElementArray(rhs_shape);\n\n  if (!shapes_are_valid) {\n    return false;\n  }\n\n  // The size of the reduction dimension should match. The shape inference\n  // guarantees this invariant, so the check here is for programming\n  // errors.\n  CHECK_EQ(lhs_shape.dimensions(dim_numbers.lhs_contracting_dimensions(0)),\n           rhs_shape.dimensions(dim_numbers.rhs_contracting_dimensions(0)));\n\n  return true;\n}"
},
{
    "Id": 411,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/db9b247cd1f3ff046359f7b64ca60c2d697fe2e1",
    "Violation": "insufficient",
    "Bug report": " Fix the functional model loading with nested sequential model. The nested sequential model is created with _is_graph_network = False, the current instance check is not strong enough.",
    "Number of deleted lines": 1,
    "Deleted lines": "  \"\"\"Returns the nodes and layers in the topology from `inputs` to `outputs`.\n\n  Args:\n    inputs: List of input tensors.\n    outputs: List of output tensors.\n\n  Returns:\n    A tuple of List{Node] and List[Layer].\n  \"\"\"\n  base_layer_utils.create_keras_history(outputs)\n  # Keep only nodes and layers in the topology between inputs and outputs.\n  _, nodes_by_depth, layers, _ = _map_graph_network(inputs, outputs)\n  return nest.flatten([nodes for nodes in nodes_by_depth.values()]), layers\n\n\ndef _should_skip_first_node(layer):\n  \"\"\"Returns True if the first layer node should not be saved or loaded.\"\"\"\n  # Networks start with a pre-existing node linking their input to output.\n  return isinstance(layer, Functional)\n\n\ndef _deserialize_keras_tensors(kwargs, layer_map):\n  \"\"\"Deserializes Keras Tensors passed to `call`..\"\"\"\n\n  def _deserialize_keras_tensor(t):\n    \"\"\"Deserializes a single Keras Tensor passed to `call`.\"\"\"\n    if isinstance(t, tf_utils.ListWrapper):\n      t = t.as_list()\n      layer_name = t[0]\n      node_index = t[1]\n      tensor_index = t[2]\n\n      layer = layer_map[layer_name]\n      node = layer._inbound_nodes[node_index]\n      return nest.flatten(node.outputs)[tensor_index]\n    return t\n\n  kwargs = tf_utils.convert_inner_node_data(kwargs, wrap=True)\n  return nest.map_structure(_deserialize_keras_tensor, kwargs)"
},
{
    "Id": 412,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/9a4b6b6bcc7a813162bf0378727950e321aca19c",
    "Violation": "improper",
    "Bug report": "Add stricter type checking for tf.math.real (using is_numeric)",
    "Number of deleted lines": 1,
    "Deleted lines": "  x = tf.constant([-2.25 + 4.75j, 3.25 + 5.75j])\n  tf.math.real(x)  # [-2.25, 3.25]\n  ```\n\n  If `input` is already real, it is returned unchanged.\n\n  Args:\n    input: A `Tensor`. Must have numeric type.\n    name: A name for the operation (optional).\n\n  Returns:\n    A `Tensor` of type `float32` or `float64`.\n  \"\"\"\n  with ops.name_scope(name, \"Real\", [input]) as name:\n    input = ops.convert_to_tensor(input, name=\"input\")\n    if input.dtype.is_complex:\n      real_dtype = input.dtype.real_dtype\n      return gen_math_ops.real(input, Tout=real_dtype, name=name)\n    elif tf.debugging.is_numeric_tensor(input):\n      return input\n    else:\n      raise TypeError(\"input must be a numeric tensor, but got tensor with dtype {}\".format(input.dtype))\n\n\n@tf_export(\"math.imag\", v1=[\"math.imag\", \"imag\"])\n@dispatch.register_unary_elementwise_api\n@dispatch.add_dispatch_support\n@deprecation.deprecated_endpoints(\"imag\")\ndef imag(input, name=None):\n  r\"\"\"Returns the imaginary part of a complex (or real) tensor.\n\n  Given a tensor `input`, this operation returns a tensor of type `float` that\n  is the imaginary part of each element in `input` considered as a complex\n  number. If `input` is real, a tensor of all zeros is returned.\n\n  For example:\n\n  ```python\n  x = tf.constant([-2.25 + 4.75j, 3.25 + 5.75j])"
},
{
    "Id": 413,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8a0fee00855a0e806bd5c9cc1ad6c0175a985922",
    "Violation": "unnecessary",
    "Bug report": " [XLA] Don't use isnan on values which can't have NaN. While we are here, don't upcast to double just to check if something is NaN.",
    "Number of deleted lines": 5,
    "Deleted lines": "          return false;\n        }\n\n        for (int64_t i = 0; i < subshape.rank(); ++i) {\n          if (piece.GetDynamicSize(i) != other_piece.GetDynamicSize(i)) {\n            return false;\n          }\n        }\n\n        if (!piece.EqualElements(other_piece)) {\n          return false;\n        }\n        return true;\n      });\n}\n\ntemplate <typename NativeT>\nstatic bool EqualIncludingNan(NativeT a, NativeT b) {\n  // msvc can't compile std::isnan(a) where `a` is uint8_t.  This is a bug\n  // according to https://en.cppreference.com/w/cpp/numeric/math/isnan, but it's\n  // easy to work around.\n  return a == b || (std::isnan(static_cast<double>(a)) &&\n                    std::isnan(static_cast<double>(b)));\n}\n\ntemplate <typename T>\nstatic bool EqualIncludingNan(std::complex<T> a, std::complex<T> b) {\n  return EqualIncludingNan(a.real(), b.real()) &&\n         EqualIncludingNan(a.imag(), b.imag());\n}\n\ntemplate <typename NativeT>\nstatic bool AllElementsEqualValue(absl::Span<const NativeT> data,\n                                  NativeT value) {\n  for (int64_t i = 0; i < data.size(); ++i) {\n    if (!EqualIncludingNan(data[i], value)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nbool Literal::Piece::IsAll(const Literal& scalar) const {"
},
{
    "Id": 414,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/580140611a47413dcf6373deb1250c0ed605e873",
    "Violation": "missing",
    "Bug report": " [XLA] Do not check fail in proto copy from if the backend config proto and desired proto type do not match.",
    "Number of deleted lines": 2,
    "Deleted lines": "    return true;\n  }\n  auto lhs_module = lhs->GetModule();\n  auto rhs_module = rhs->GetModule();\n  CHECK((lhs_module == nullptr && rhs_module == nullptr) ||\n        (lhs_module != nullptr && rhs_module != nullptr));\n  if (lhs_module != nullptr &&\n      lhs_module->unique_id() != rhs_module->unique_id()) {\n    return lhs_module->unique_id() < rhs_module->unique_id();\n  }\n  return lhs->unique_id() < rhs->unique_id();\n}\n\nStatus HloInstruction::GetBackendConfigInternal(\n    tensorflow::protobuf::Message* proto) const {\n  proto->Clear();\n\n  if (auto* proto_ptr = backend_config_.GetProtoPtr()) {\n    proto->CopyFrom(*proto_ptr);\n    return Status::OK();\n  }\n\n  auto& raw_string = raw_backend_config_string();\n  // Empty string does not parse as valid JSON, but it's a valid backend config,\n  // corresponding to the empty proto.\n  if (raw_string.empty()) {\n    return Status::OK();\n  }\n  TF_RETURN_IF_ERROR(tensorflow::HumanReadableJsonToProto(raw_string, proto));\n  backend_config_.SetProto(*proto);\n  return Status::OK();\n}\n\nconst std::string& HloInstruction::BackendConfigRep::GetRawString() const {\n  if (proto_ && raw_string_.empty()) {\n    raw_string_ = BackendConfigToRawString(*proto_).ValueOrDie();\n  }\n  return raw_string_;\n}\n"
},
{
    "Id": 415,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/d3d1cd3ad2becac5c31387f7fc483af65c7c8c84",
    "Violation": "unnecessary",
    "Bug report": " Fixes the crashes caused by the refcount checks for non-copyable types. For async value refs, refcounts don't equal to number of waiters as waiters can make copies of the async value refs.",
    "Number of deleted lines": 1,
    "Deleted lines": "  }\n\n  // Registers callback to be called once the promise is ready, with the final\n  // value.\n  //\n  // callback may be called on an internal system thread or the calling thread.\n  // The client should avoid any potentially re-entrant API calls within the\n  // callback, for example by using the callback to enqueue work on a\n  // client-owned threadpool.\n  void OnReady(absl::AnyInvocable<void(T) &&> callback) {\n    CHECK(IsValid());\n    promise_ref_.AndThen([promise = promise_ref_.AsPtr(),\n                          callback = std::move(callback)]() mutable {\n      DCHECK(promise.IsConcrete());\n      if constexpr (std::is_copy_constructible_v<T>) {\n        std::move(callback)(*promise);\n        return;\n      }\n      DCHECK_EQ(promise.value()->NumRef(), 1);\n      std::move(callback)(std::move(*promise));\n    });\n  }\n\n  // Indicates that event will not complete until after this becomes ready.\n  //\n  // May safely be called with event==nullptr in which case AssertHappensBefore\n  // has no effect.\n  void AssertHappensBefore(ScopedAsyncTrackingEvent* event) {\n    CHECK(IsValid());\n    if (event) {\n      event->AddDependency(promise_ref_.CopyRCRef());\n    }\n  }\n\n private:\n  // Wrapped object to wait on.\n  tfrt::AsyncValueRef<T> promise_ref_;\n  // Function that is called before a thread starts blocking on the promise.\n  PjRtFutureHelpers::OnBlockStartFn on_block_start_;"
},
{
    "Id": 416,
    "Library": "tensorflow",
    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/02907e867c74651a9eb74971f56559d5db2efa1c",
    "Violation": "missing",
    "Bug report": " Use Nano seconds in Timestamp check as Pico seconds can lead to overflow.",
    "Number of deleted lines": 0,
    "Deleted lines": "\n  int64_t OffsetPs() const { return event_->offset_ps(); }\n\n  int64_t LineTimestampNs() const { return line_->timestamp_ns(); }\n\n  int64_t TimestampNs() const { return line_->timestamp_ns() + OffsetNs(); }\n\n  int64_t TimestampPs() const {\n    return NanoToPico(line_->timestamp_ns()) + event_->offset_ps();\n  }\n\n  double DurationNs() const { return PicoToNano(event_->duration_ps()); }\n\n  int64_t DurationPs() const { return event_->duration_ps(); }\n\n  int64_t EndOffsetPs() const {\n    return event_->offset_ps() + event_->duration_ps();\n  }\n  int64_t EndTimestampPs() const { return TimestampPs() + DurationPs(); }\n\n  int64_t NumOccurrences() const { return event_->num_occurrences(); }\n\n  bool operator<(const XEventVisitor& other) const {\n    return GetTimespan() < other.GetTimespan();\n  }\n\n  const XEventMetadata* metadata() const { return metadata_; }\n\n  XEventMetadataVisitor Metadata() const {\n    return XEventMetadataVisitor(plane_, metadata_);\n  }\n\n  Timespan GetTimespan() const { return Timespan(TimestampPs(), DurationPs()); }\n\n private:\n  const XPlaneVisitor* plane_;\n  const XLine* line_;\n  const XEvent* event_;"
}]