{
    "Edge Cases":
        {
            "example1":
                {
                    "Deleted lines": "-  TORCH_CHECK(std > 0.0, \"normal_ expects std > 0.0, but found std=\", std);  // TODO: dedupe",
                    "Added lines": "+    OP_REQUIRES(\n+        context, dense_size > 0 && product > 0,\n+        errors::InvalidArgument(\n+            \"Input tensor has \", nnz, \" non zero elements but input shape (\",\n+            input_shape.DebugString(), \") or output shape (\",\n+            output_shape.DebugString(), \") is empty\"));",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/4923de56ec94fff7770df259ab7f2288a74feb41"
                },
            "example2":
                {
                    "Deleted lines": "-    if dim:",
                    "Added lines": "+    if dim is not None:",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/c99277e177cf16736262251c7e92ea5e9ba2c5c2"
                }
            
        },
    "Type Checking":
        {
            "example1":
                {
                    "Deleted lines": "-      self.dim() <= output_size.size(),",
                    "Added lines": "+      static_cast<size_t>(self.dim()) <= output_size.size(),",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/a69f427f957a37eee9c1dd5df681f30ab38ed3e4"
                },
            "example2":
                {
                    "Deleted lines": "",
                    "Added lines": "+  if (value.isTensor() && argument.type() == TensorType::get()) {\n+    // Fast-path for the common case\n+    return;\n+  }",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/3611d26a25bd889627403a808ea667ac99c09904"
                }
        },
    "Null Value":
        {
            "example1":
                {
                    "Deleted lines": "-",
                    "Added lines": "+  if (cuda_stream_ != nullptr) {\n+    LOG(FATAL) <<  // Crash OK.\n+        \"Trying to set the stream twice. This isn't supported. \";\n+  }\n+",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/c5019e2156c749d35ec786ff7946a55006d9ba91"
                },
            "example2":
                {
                    "Deleted lines": "-    if (data == nullptr) {",
                    "Added lines": "+    if (is_empty()) {",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/bde7b81f34925491fbcbb9e355697eb594e36923"
                }
        },
    "Boundary Value":
        {
            "example1":
                {
                    "Deleted lines": "-    TORCH_CHECK(i <= UINT32_MAX);\n-    iterShapeData[i] = (uint32_t)(iterShape[i]);\n-      strides[i][offset] = iter.strides(offset)[i];",
                    "Added lines": "+  TORCH_CHECK(iter.can_use_32bit_indexing(), \"Can't be indexed using 32-bit iterator\");\n+    iterShapeData[i] = static_cast<uint32_t>(iterShape[i]);\n+      strides[i][offset] = static_cast<uint32_t>(iter.strides(offset)[i]);",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/f6639359357452de8bfc691430396ded98ea399c"
                },
            "example2":
                {
                    "Deleted lines": "-    } while (IsTrailByte(in[*pos]) && *pos < size);",
                    "Added lines": "+    } while (*pos < size && IsTrailByte(in[*pos]));",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/1908d7ef706f0f3f8c7a300068355bf795fb3d17"
                }
        },
    "Error Message":
        {
            "example1":
                {
                    "Deleted lines": "-          \"cannot compute \", op->Name(), \" as input #\", i,",
                    "Added lines": "+          \"cannot compute \", op->Name(), \" as input #\", i, \"(zero-based)\",",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/f0bf6c5191d224f229808f4b321158d890a481e0"
                },
            "example2":
                {
                    "Deleted lines": "-                error_message += 'XPU Autocast only supports dtype of torch.bfloat16 currently.'",
                    "Added lines": "+                error_message += 'XPU Autocast only supports dtypes of torch.bfloat16 and torch.float16 currently.'",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/faa7eb81c634492b70fcc0327622bb0aa812cacd"
                }
        },
    "Device Availability":
        {
            "example1":
                {
                    "Deleted lines": "-        if not torch.cuda.is_available() and self.device == 'cuda':",
                    "Added lines": "+        if torch.cuda.amp.common.amp_definitely_not_available() and self.device == 'cuda':",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/30e1c74dc19ae2b622b46ebcdb7972c42775ac80"
                },
            "example2":
                {
                    "Deleted lines": "",
                    "Added lines": "+  if (num_conv2d_gpu == 0) return false;\n+",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/b234ff0ee4ce87d21a3e5306b678e1fb4b1fedfc"
                }
        },
    "Device Version":
        {
            "example1":
                {
                    "Deleted lines": "-#if CUDA_VERSION < 10000",
                    "Added lines": "+#if defined(CUDA_VERSION) && (CUDA_VERSION < 10000)",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/563bbeb8905f4cea0bc5353dc12518c61113128e"
                },
            "example2":
                {
                    "Deleted lines": "-#if CUDA_VERSION >= 12000\n-#endif  // CUDA_VERSION >= 12000\n-#if CUDA_VERSION >= 12000\n-#endif  // CUDA_VERSION >= 12000",
                    "Added lines": "+#if CUDA_VERSION >= 12030\n+#endif  // CUDA_VERSION >= 12030\n+#if CUDA_VERSION >= 12030\n+#endif  // CUDA_VERSION >= 12030",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/6c472f6632c4864da749e7a4aee8c001a905287f"
                }
        },
    "Execution Mode":
        {
            "example1":
                {
                    "Deleted lines": "-    if context.executing_eagerly():\n-      trainable = variable._trainable  # pylint: disable=protected-access",
                    "Added lines": "+    if ops.executing_eagerly_outside_functions():\n+      trainable = variable.trainable",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/0317f64491ba42376d96b157983a02d8b31b679e"
                },
            "example2":
                {
                    "Deleted lines": "",
                    "Added lines": "+\n+    Raises:\n+      RuntimeError: When not called eagerly.\n+    if not context.executing_eagerly():\n+      raise RuntimeError(\"is_dtensor must be called eagerly.\")",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/8c3822edbb31cf71cedaf49f2167e45c1e2d0b83"
                }
        },
    "Computation Graph":
        {
            "example1":
                {
                    "Deleted lines": "-                if self.has_backedge():",
                    "Added lines": "+                if self.has_backedge() and self.should_compile_partial_graph():",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/bdbd3ed312e0fc81e75302239ea78b3445fe95e7"
                },
            "example2":
                {
                    "Deleted lines": "",
                    "Added lines": "+      if (graph->FindInputs(node->id).size() != 1) {\n+        return {TransformStatus::DECLINED,\n+",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/264eb6ed1dbfb5e078c7dd977da8d7e633106fc5"
                }
        },
    "Tensor Quantization":
        {
            "example1":
                {
                    "Deleted lines": "",
                    "Added lines": "+                    if orig.is_quantized:\n+                        orig = orig.dequantize()\n+                    if ref.is_quantized:\n+                        ref = ref.dequantize()",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/acd51e13f727af22e6c9e579518362898f1b12e6"
                },
            "example2":
                {
                    "Deleted lines": "-      // reference CPU path.\n-      Expect(is_accelerator_specified ||\n-                 (builtin->filter_width * builtin->filter_height <= 256),\n-             NNAPIValidationFailureType::kUnsupportedOperandSize,\n-             \"Large filter window would overflow on the reference CPU path\",\n-             &val_ctx);",
                    "Added lines": "+      // quantized reference CPU path.\n+      if (IsQuantized(context->tensors[node->inputs->data[0]].type)) {\n+        Expect(is_accelerator_specified ||\n+                   (builtin->filter_width * builtin->filter_height <= 256),\n+               NNAPIValidationFailureType::kUnsupportedOperandSize,\n+               \"Large filter window would overflow on the reference CPU path\",\n+               &val_ctx);\n+      }",
                    "Commit Link": "https://github.com/tensorflow/tensorflow/commit/2adf1114d4dc7ca30e5117acd2dc7aeb3279feb7"
                }
        },
    "Backend Type":
        {
            "example1":
                {
                    "Deleted lines": "-                if self.args.ci and (\n-                    (\n-                        isinstance(e, RuntimeError)\n-                        and \"Internal Triton PTX codegen error\" in str(e)\n-                    or (isinstance(e, KeyError) and \"cubin\" in str(e))",
                    "Added lines": "+from torch._dynamo.exc import BackendCompilerFailed\n+                if (\n+                    self.args.ci\n+                    and isinstance(e, BackendCompilerFailed)\n+                    and (\n+                        \"Internal Triton PTX codegen error\" in str(e)\n+                        or \"cubin\" in str(e)",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/6bf0e3b697ce688bc8325440dea3b51fea571c3d"
                },
            "example2":
                {
                    "Deleted lines": "-    # It is not expected for PG to be wrapped many times, but support it just\n-    # in case\n-    while isinstance(pg, _ProcessGroupWrapper):\n-        pg = pg.wrapped_pg",
                    "Added lines": "+    # Gate PG wrapper check on Gloo availability.\n+    if _GLOO_AVAILABLE:\n+        # It is not expected for PG to be wrapped many times, but support it just\n+        # in case\n+        while isinstance(pg, _ProcessGroupWrapper):\n+",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/678c08bb55eef0c2e707a17d0cd6e50f5b9bd427"
                }
        },
    "Device Type":
        {
            "example1":
                {
                    "Deleted lines": "-    if device_type.lower() == \"cuda\":",
                    "Added lines": "+    if device_type and device_type.lower() == \"cuda\":",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/1c02be1b6a0f6d02d3a0ae19c13d51a3e59a55ae"
                },
            "example2":
                {
                    "Deleted lines": "-    if (indices.is_cuda()) {",
                    "Added lines": "+    if (!indices.is_cpu()) {",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/a9deda5469a6ef73692a9dd796cc4eeba4436d6c"
                }
        },
    "N.A":
        {
            "example1":
                {
                    "Deleted lines": "-        if (nativeLibsDoNotStrip) {",
                    "Added lines": "+        if (nativeLibsDoNotStrip.toBoolean()) {\n+            logger.warn('WARNING: nativeLibsDoNotStrip==true; debug symbols included')",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/8e3486de81d848e5c9a375134b3b14998ac36654"
                },
            "example2":
                {
                    "Deleted lines": "",
                    "Added lines": "+static PyObject * THPVariable__is_view(PyObject *self, PyObject* args)\n+{\n+  HANDLE_TH_ERRORS\n+  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\n+  if (self_.is_view()) {\n+    Py_RETURN_TRUE;\n+  } else {\n+    Py_RETURN_FALSE;\n+  }\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+  {\"_is_view\", (PyCFunction)THPVariable__is_view, METH_NOARGS, NULL},",
                    "Commit Link": "https://github.com/pytorch/pytorch/commit/bd1271338ada8eda28a72e028a5521480d118bfb"
                }
        }
}